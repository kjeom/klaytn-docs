openapi: 3.0.2
info:
  title: web3rpc
  version: 0.9.0
  contact:
    name: API support
    url: https://forum.klaytn.foundation/
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
x-tagGroups:
  - name: namespaces
    tags:
      - klay
servers:
  - url: http://localhost:8551
  - url: https://api.baobab.klaytn.net:8651
  - url: https://public-en-cypress.klaytn.net
paths:
  /klay/account/accountCreated:
    post:
      operationId: accountCreated
      summary: '[Account] klay_accountCreated'
      description: |
        Returns `true` if the account associated with the address is created. It returns `false` otherwise.

        **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.*

        **JSONRPC:** `klay_accountCreated`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayAccountCreatedReq'
      responses:
        '200':
          description: The existence of an input address
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        description: The existence of an input address
                        type: boolean
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/accountCreated' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_accountCreated",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "0xa4f42d4d2a3a13874406435500950c9bf2d783db",
                "latest"
              ]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayAccountCreatedResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayAccountCreatedExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayAccountCreatedExample() throws IOException {
                    KlayAccountCreatedResponse ar = w3.klayAccountCreated(
                        "0xa4f42d4d2a3a13874406435500950c9bf2d783db",
                        "latest")
                    .send();
                    ar.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const address = "0xa4f42d4d2a3a13874406435500950c9bf2d783db";
              const blockTag = "latest";
              provider.klay
                .accountCreated(address, blockTag, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "0xa4f42d4d2a3a13874406435500950c9bf2d783db"
            blockTag = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.account_created(address, blockTag)

            print(klay_response)
  /klay/account/accounts:
    post:
      operationId: accounts
      summary: '[Account] klay_accounts'
      description: |
        Returns a list of addresses owned by client.

        **JSONRPC:** `klay_accounts`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                    - params
                  properties:
                    method:
                      type: string
                      default: klay_accounts
      responses:
        '200':
          description: Returns a list of addresses owned by client.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayAccountsResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
            'https://api.baobab.klaytn.net:8651/klay/accounts' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_accounts",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayAccountsResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayAccountsExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayAccountsExample() throws IOException {
                    KlayAccountsResponse ar = w3.klayAccounts().send();
                    ar.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.klay
                .accounts({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.accounts()

            print(klay_response)
  /klay/account/decodeAccountKey:
    post:
      operationId: decodeAccountKey
      summary: '[Account] klay_decodeAccountKey'
      description: |
        Decodes an RLP encoded account key.

        **JSONRPC:** `klay_decodeAccountKey`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayDecodeAccountKeyReq'
      responses:
        '200':
          description: Decodes an RLP encoded account key.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayDecodeAccountKeyResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/decodeAccountKey' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_decodeAccountKey",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "0x05f898a302a103e4a01407460c1c03ac0c82fd84f303a699b210c0b054f4aff72ff7dcdf01512db84e04f84b02f848e301a103e4a01407460c1c03ac0c82fd84f303a699b210c0b054f4aff72ff7dcdf01512de301a10336f6355f5b532c3c1606f18fa2be7a16ae200c5159c8031dd25bfa389a4c9c06a302a102c8785266510368d9372badd4c7f4a94b692e82ba74e0b5e26b34558b0f081447"
              ]
            }'
        - lang: java
          label: Java
          source: |


            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import org.web3j.protocol.klaytn.core.method.response.KlayDecodeAccountKeyResponse;

            import java.io.IOException;

            public class KlayDecodeAccountKeyExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayDecodeAccountKeyExample() throws IOException {
                    String accountKey = "0x05f898a302a103e4a01407460c1c03ac0c82fd84f303a699b210c0b054f4aff72ff7dcdf01512db84e04f84b02f848e301a103e4a01407460c1c03ac0c82fd84f303a699b210c0b054f4aff72ff7dcdf01512de301a10336f6355f5b532c3c1606f18fa2be7a16ae200c5159c8031dd25bfa389a4c9c06a302a102c8785266510368d9372badd4c7f4a94b692e82ba74e0b5e26b34558b0f081447";
                    KlayDecodeAccountKeyResponse ar = w3.klayDecodeAccountKey(
                                    accountKey)
                            .send();
                    ar.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const encodedAccountKey =
                "0x05f898a302a103e4a01407460c1c03ac0c82fd84f303a699b210c0b054f4aff72ff7dcdf01512db84e04f84b02f848e301a103e4a01407460c1c03ac0c82fd84f303a699b210c0b054f4aff72ff7dcdf01512de301a10336f6355f5b532c3c1606f18fa2be7a16ae200c5159c8031dd25bfa389a4c9c06a302a102c8785266510368d9372badd4c7f4a94b692e82ba74e0b5e26b34558b0f081447";

              provider.klay
                .decodeAccountKey(encodedAccountKey, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            accountKey = "0x05f898a302a103e4a01407460c1c03ac0c82fd84f303a699b210c0b054f4aff72ff7dcdf01512db84e04f84b02f848e301a103e4a01407460c1c03ac0c82fd84f303a699b210c0b054f4aff72ff7dcdf01512de301a10336f6355f5b532c3c1606f18fa2be7a16ae200c5159c8031dd25bfa389a4c9c06a302a102c8785266510368d9372badd4c7f4a94b692e82ba74e0b5e26b34558b0f081447"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.decode_account_key(accountKey)

            print(klay_response)
  /klay/account/encodeAccountKey:
    post:
      operationId: encodeAccountKey
      summary: '[Account] klay_encodeAccountKey'
      description: |
        Encodes an account key using the Recursive Length Prefix (RLP) encoding scheme.

        **JSONRPC:** `klay_encodeAccountKey`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayEncodeAccountKeyReq'
      responses:
        '200':
          description: Return RLP encoded account key
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayEncodeAccountKeyResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/encodeAccountKey' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_encodeAccountKey",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [{"keyType": 0, "key": {}}]
            }'
        - lang: java
          label: Java
          source: |
            import com.fasterxml.jackson.databind.ObjectMapper;
            import com.fasterxml.jackson.databind.node.ObjectNode;

            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import org.web3j.protocol.klaytn.core.method.response.KlayEncodeAccountKeyResponse;

            import java.io.IOException;

            public class KlayEncodeAccountKeyExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayEncodeAccountKeyExample() throws IOException {
                    ObjectMapper objectMapper = new ObjectMapper();
                    ObjectNode node = objectMapper.createObjectNode();
                    node.put("keyType", 0);
                    node.putNull("key");

                    KlayEncodeAccountKeyResponse response = w3.klayEncodeAccountKey(node).send();

                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const accountKey = { keyType: 0, key: {} };

              provider.klay
                .encodeAccountKey(accountKey, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            accountKey = {
                "keyType": 0,
                "key": {}
            }

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.encode_account_key(accountKey)

            print(klay_response)
  /klay/account/getAccount:
    post:
      operationId: getAccount
      summary: '[Account] klay_getAccount'
      description: |
        Returns the account information of a given address. There are two different account types in Klaytn: Externally Owned Account (EOA) and Smart Contract Account. See Klaytn Accounts.

        **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.*`

        **JSONRPC:** `klay_getAccount`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetAccountReq'
      responses:
        '200':
          description: Returns the account information of a given address.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetAccountResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getAccount' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getAccount",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x3111a0577f322e8fb54f78d9982a26ae7ca0f722", "latest"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGetAccountResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetAccountExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayGetAccountExample() throws IOException {
                    KlayGetAccountResponse ar = w3.klayGetAccount(
                        "0x1cbd3b2770909d4e10f157cabc84c7264073c9ec",
                        "latest")
                    .send();
                    ar.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const address = "0x1cbd3b2770909d4e10f157cabc84c7264073c9ec";
              const blockNumberOrHash = "latest";

              provider.klay
                .getAccount(address, blockNumberOrHash, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "0x3111a0577f322e8fb54f78d9982a26ae7ca0f722"
            blockNumberOrHash = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_account(address, blockNumberOrHash)

            print(klay_response)
  /klay/account/getAccountKey:
    post:
      operationId: getAccountKey
      summary: '[Account] klay_getAccountKey'
      description: |
        Returns the account key of the Externally Owned Account (EOA) of a given address. If the account has AccountKeyLegacy or the account of the given address is a Smart Contract Account, it will return an empty key value.

        **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available*

        **JSONRPC:** `klay_getAccountKey`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetAccountKeyReq'
      responses:
        '200':
          description: Returns the account key or an empty key value.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetAccountKeyResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getAccountKey' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getAccountKey",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x3111a0577f322e8fb54f78d9982a26ae7ca0f722", "latest"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGetAccountKeyResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetAccountKeyExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    void klayGetAccountKeyExample() throws IOException {
                    String address = "0x3111a0577f322e8fb54f78d9982a26ae7ca0f722";
                    String blockNumberOrHashOrTag = "latest";
                    KlayGetAccountKeyResponse response = w3.klayGetAccountKey(address, blockNumberOrHashOrTag).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const address = "0xa36a5fdc679ecaabe057556ccec2f3558068bdc8";
              const blockNumberOrHash = "latest";

              provider.klay
                .getAccountKey(address, blockNumberOrHash, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "0x3111a0577f322e8fb54f78d9982a26ae7ca0f722"
            blockTag = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_account_key(address, blockTag)

            print(klay_response)
  /klay/account/getBalance:
    post:
      operationId: getBalance
      summary: '[Account] klay_getBalance'
      description: |
        Returns the balance of the account of given address.

        **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.*`

        **JSONRPC:** `klay_getBalance`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetBalanceReq'
      responses:
        '200':
          description: Returns the balance of the account of given address.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetBalanceResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getBalance' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getBalance",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x3111a0577f322e8fb54f78d9982a26ae7ca0f722", "latest"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGetBalanceResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetBalanceExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayGetBalanceExample() throws IOException {
                    KlayGetBalanceResponse gr = w3.klayGetBalance(
                        "0xc94770007dda54cF92009BFF0dE90c06F603a09f",
                        "latest")
                    .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const address = "0x1cbd3b2770909d4e10f157cabc84c7264073c9ec";
              const blockNumberOrHash = "latest";

              provider.klay
                .getBalance(address, blockNumberOrHash, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "0x3111a0577f322e8fb54f78d9982a26ae7ca0f722"
            blockTag = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_balance(address, blockTag)

            print(klay_response)
  /klay/account/getCode:
    post:
      operationId: getCode
      summary: '[Account] klay_getCode'
      description: |
        Returns code at a given address.

        **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.*

        **JSONRPC:** `klay_getCode`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetCodeReq'
      responses:
        '200':
          description: Returns code at a given address.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: DATA
                        description: The code from the given address.
                        example: '0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getCode' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getCode",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b", "0x2"]
            }'
        - lang: java
          label: Java
          source: |


            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetCodeResponse;

            import java.io.IOException;

            public class KlayGetCodeExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayGetCodeExample() throws IOException {
                    KlayGetCodeResponse gr = w3.klayGetCode(
                                    "0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b",
                                    "0x2")
                            .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const account = "0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b";
              const blockNumberOrHash = "0x2";

              provider.klay
                .getCode(account, blockNumberOrHash, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b"
            blockTag = "0x2"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_code(address, blockTag)

            print(klay_response)
  /klay/account/getTransactionCount:
    post:
      operationId: getTransactionCount
      summary: '[Account] klay_getTransactionCount'
      description: |
        Returns the number of transactions sent from an address.

        **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available*

        **JSONRPC:** `klay_getTransactionCount`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetTransactionCountReq'
      responses:
        '200':
          description: Returns the number of transactions sent from an address.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetTransactionCountResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getTransactionCount' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getTransactionCount",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xc94770007dda54cF92009BFF0dE90c06F603a09f","latest"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGetTransactionCountResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetTransactionCountExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayGetTransactionCountExample() throws IOException {
                    KlayGetTransactionCountResponse response = w3.klayGetTransactionCount(
                            "0xc94770007dda54cF92009BFF0dE90c06F603a09f","latest"
                    ).send();
                    response.getResult();
                }

            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const address = "0xc94770007dda54cF92009BFF0dE90c06F603a09f";
              const blockNumberOrHashOrTag = "latest";

              provider.klay
                .getTransactionCount(
                  address,
                  blockNumberOrHashOrTag,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "0xc94770007dda54cF92009BFF0dE90c06F603a09f"
            blockTag = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_transaction_count(address, blockTag)

            print(klay_response)
  /klay/account/isContractAccount:
    post:
      operationId: isContractAccount
      summary: '[Account] klay_isContractAccount'
      description: |
        Returns true if an input account has a non-empty codeHash at the time of a specific block number. It returns false if the account is an EOA or a smart contract account which doesn't have codeHash.

        **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available*

        **JSONRPC:** `klay_isContractAccount`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/schemas-KlayGetTransactionCountReq'
      responses:
        '200':
          description: Returns true if an input account has a non-empty codeHash at the time of a specific block number.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/schemas-KlayGetTransactionCountResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/isContractAccount' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_isContractAccount",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xc94770007dda54cF92009BFF0dE90c06F603a09f","latest"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayIsContractAccountResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayIsContractAccountExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    void whenRequestValid_ThenCall200ResponseReturns() throws IOException {
                    KlayIsContractAccountResponse response = w3.klayIsContractAccount(
                            "0xc94770007dda54cF92009BFF0dE90c06F603a09f","latest"
                    ).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const account = "0xc94770007dda54cF92009BFF0dE90c06F603a09f";
              const blockNumberOrHashOrTag = "latest";

              provider.klay
                .isContractAccount(
                  account,
                  blockNumberOrHashOrTag,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "0xc94770007dda54cF92009BFF0dE90c06F603a09f"
            blockTag = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.is_contract_account(address, blockTag)

            print(klay_response)
  /klay/account/sign:
    post:
      operationId: sign
      summary: '[Account] klay_sign'
      description: |
        The sign method calculates a Klaytn-specific signature with:

        sign(keccak256("\x19Klaytn Signed Message:\n" + len(message) + message)))

        Adding a prefix to the message makes the calculated signature recognizable as a Klaytn-specific signature. This prevents misuse where a malicious dApp can sign arbitrary data, e.g., transaction, and use the signature to impersonate the victim.

        `klay_sign` will be failed to baobab/cypress network because it is signed in the EN node, which means that the EN must have the key that you want to sign with.
        Steps to test `klay_sign`.
          - Step 1: Setup a local EN node
          - Step 2: <a href="#tag/personal/operation/newAccount" target="_blank">Create an account</a> into the EN node
          - Step 3: <a href="#tag/personal/operation/unlockAccount" target="_blank">Unlock the account</a> for using in signing

        **JSONRPC:** `klay_sign`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlaySignReq'
      responses:
        '200':
          description: Return signature
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: DATA
                        description: Signature
                        example: '0xa3f20717a250c2b0b729b7e5becbff67fdaef7e0699da4de7ca5895b02a170a12d887fd3b17bfdce3481f10bea41f45ba9f709d39ce8325427b57afcfc994cee1b'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/sign' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_sign",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "0x9b2055d370f73ec7d8a03e965129118dc8f5bf83",
                "0xdeadbeaf"
              ]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlaySignResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;


            public class KlaySignExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klaySignExample() throws IOException {
                    String address = "0x487f2dfef230c2120b8cc55c5087b103146536ec";
                    String message = "0xdeadbeaf";
                    KlaySignResponse response = w3.klaySign(address, message).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const address = "0x487f2dfef230c2120b8cc55c5087b103146536ec";
              const message = "0xdeadbeaf";

              provider.klay
                .sign(address, message, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b"
            message = "0xdeadbeaf"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.sign(address, message)

            print(klay_response)
  /klay/block/blockNumber:
    post:
      operationId: blockNumber
      summary: '[Block] klay_blockNumber'
      description: |
        Returns the number of most recent block.

        **JSONRPC:** `klay_blockNumber`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_blockNumber
      responses:
        '200':
          description: Returns the number of most recent block.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        description: Integer of the current block number the client is on.
                        example: '0xc94'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/blockNumber' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_blockNumber",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayBlockNumberResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayBlockNumberExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayBlockNumberExample() throws IOException {
                    KlayBlockNumberResponse br = w3.klayBlockNumber().send();
                    br.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.klay
                .blockNumber({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.block_number()

            print(klay_response)
  /klay/block/getBlockByHash:
    post:
      operationId: getBlockByHash
      summary: '[Block] klay_getBlockByHash'
      description: |
        Returns information about a block by hash. This API works only on RPC call, not on JavaScript console.

        **JSONRPC:** `klay_getBlockByHash`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetBlockByHashReq'
      responses:
        '200':
          description: Returns information about a block by hash
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetBlockByHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getBlockByHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getBlockByHash",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577", true]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGetBlockByHashResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetBlockByHashExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayGetBlockByHashExample() throws IOException {
                    KlayGetBlockByHashResponse gr = w3.klayGetBlockByHash(
                        "0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577",
                        true)
                    .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const blockHash =
                "0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577";
              const returnTransactionObject = true;

              provider.klay
                .getBlockByHash(
                  blockHash,
                  returnTransactionObject,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577"
            returnTransactionObject = True

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_block_by_hash(blockHash, returnTransactionObject)

            print(klay_response)
  /klay/block/getBlockByNumber:
    post:
      operationId: getBlockByNumber
      summary: '[Block] klay_getBlockByNumber'
      description: |
        Returns information about a block by block number. This API works only on RPC call, not on JavaScript console.

        **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.*

        **JSONRPC:** `klay_getBlockByNumber`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetBlockByNumberReq'
      responses:
        '200':
          description: Returns information about a block by block number.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetBlockByNumberResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getBlockByNumber' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getBlockByNumber",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x1b4", true]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGetBlockByNumberResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetBlockByNumberExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayGetBlockByNumberExample() throws IOException {
                    KlayGetBlockByNumberResponse gr = w3.klayGetBlockByNumber(
                        "0x1b4",
                        true)
                    .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockNumber = 1;
              const returnTransactionObject = true;

              provider.klay
                .getBlockByNumber(
                  blockNumber,
                  returnTransactionObject,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "0x1b4"
            boolean = True

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_block_by_number(blockTag, boolean)

            print(klay_response)
  /klay/block/getBlockReceipts:
    post:
      operationId: getBlockReceipts
      summary: '[Block] klay_getBlockReceipts'
      description: |
        Returns receipts included in a block identified by block hash.

        **JSONRPC:** `klay_getBlockReceipts`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetBlockReceiptsReq'
      responses:
        '200':
          description: Receipts included in a block. If the target block contains no transaction, an empty array [] is returned.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetBlockReceiptsResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getBlockReceipts' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getBlockReceipts",
              "id": 73,
              "jsonrpc": "2.0",
              "params": ["0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577"]
            }'
        - lang: java
          label: Java
          source: |


            import org.web3j.protocol.klaytn.core.method.response.KlayGetBlockReceiptsResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetBlockReceiptsExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayGetBlockReceiptsExample() throws IOException {
                    String blockHash = "0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577";
                    KlayGetBlockReceiptsResponse response = w3.klayGetBlockReceipts(blockHash).send();
                    response.getResult();
                }

            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockHash =
                "0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577";

              provider.klay
                .getBlockReceipts(blockHash, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_block_receipts(blockHash)

            print(klay_response)
  /klay/block/getBlockTransactionCountByHash:
    post:
      operationId: getBlockTransactionCountByHash
      summary: '[Block] klay_getBlockTransactionCountByHash'
      description: |
        Returns the number of transactions in a block from a block that matches the given hash.

        **JSONRPC:** `klay_getBlockTransactionCountByHash`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_getBlockTransactionCountByHash
                    params:
                      type: array
                      description: Hash of a block
                      items:
                        title: hashOfBlock
                        type: string
                        format: 32-byte DATA
                        description: Hash of a block
                        example:
                          - '0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577'
      responses:
        '200':
          description: Return integer of the number of transactions in this block.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        description: Integer of the number of transactions in this block.
                        format: hex
                        example: '0x0'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getBlockTransactionCountByHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getBlockTransactionCountByHash",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGetBlockTransactionCountByHashResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetBlockTransactionCountByHashExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayGetBlockTransactionCountByHashExample() throws IOException {
                    KlayGetBlockTransactionCountByHashResponse gr = w3.klayGetBlockTransactionCountByHash(
                        "0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577")
                    .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const blockHash =
                "0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577";

              provider.klay
                .getBlockTransactionCountByHash(blockHash, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_block_transaction_count_by_hash(blockHash)

            print(klay_response)
  /klay/block/getBlockTransactionCountByNumber:
    post:
      operationId: getBlockTransactionCountByNumber
      summary: '[Block] klay_getBlockTransactionCountByNumber'
      description: |
        Returns the number of transactions in a block matching the given block number.

        **NOTE:**  In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.

        **JSONRPC:** `klay_getBlockTransactionCountByNumber`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetBlockTransactionCountByNumberReq'
      responses:
        '200':
          description: Returns integer of the number of transactions in this block.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: Integer of the number of transactions in this block.
                        example: '0xa'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getBlockTransactionCountByNumber' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getBlockTransactionCountByNumber",
              "id": 73,
              "jsonrpc": "2.0",
              "params": ["0xe8"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGetBlockTransactionCountByNumberResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetBlockTransactionCountByNumberExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayGetBlockTransactionCountByNumberExample() throws IOException {
                    KlayGetBlockTransactionCountByNumberResponse gr = w3.klayGetBlockTransactionCountByNumber(
                        "0xe8")
                    .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockNumber = 1;
              provider.klay
                .getBlockTransactionCountByNumber(
                  blockNumber,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "0x1b4"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_block_transaction_count_by_number(blockTag)

            print(klay_response)
  /klay/block/getBlockWithConsensusInfoByHash:
    post:
      operationId: getBlockWithConsensusInfoByHash
      summary: '[Block] klay_getBlockWithConsensusInfoByHash'
      description: |
        Returns a block with consensus information that matches the given hash.

        **JSONRPC:** `klay_getBlockWithConsensusInfoByHash`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetBlockWithConsensusInfoByHashReq'
      responses:
        '200':
          description: Returns a block with consensus information that matches the given hash.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetBlockWithConsensusInfoByHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getBlockWithConsensusInfoByHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getBlockWithConsensusInfoByHash",
              "id": 73,
              "jsonrpc": "2.0",
              "params": ["0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGetBlockWithConsensusInfoByHashResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetBlockWithConsensusInfoByHashExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayGetBlockWithConsensusInfoByHashExample() throws IOException {
                    KlayGetBlockWithConsensusInfoByHashResponse gr = w3.klayGetBlockWithConsensusInfoByHash(
                                    "0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577")
                            .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const blockHash =
                "0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577";
              provider.klay
                .getBlockWithConsensusInfoByHash(blockHash, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_block_with_consensus_info_by_hash(blockHash)

            print(klay_response)
  /klay/block/getBlockWithConsensusInfoByNumber:
    post:
      operationId: getBlockWithConsensusInfoByNumber
      summary: '[Block] klay_getBlockWithConsensusInfoByNumber'
      description: |
        Returns a block with consensus information that matches the given block number.

        **NOTE:**  In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available. 

        **JSONRPC:** `klay_getBlockWithConsensusInfoByNumber`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetBlockWithConsensusInfoByNumberReq'
      responses:
        '200':
          description: Returns a block with consensus information that matches the given block number.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetBlockWithConsensusInfoByNumberResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getBlockWithConsensusInfoByNumber' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getBlockWithConsensusInfoByNumber",
              "id": 73,
              "jsonrpc": "2.0",
              "params": ["0x6e0431"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGetBlockWithConsensusInfoByNumberResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetBlockWithConsensusInfoByNumberExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayGetBlockWithConsensusInfoByNumberExample() throws IOException {
                    KlayGetBlockWithConsensusInfoByNumberResponse gr = w3.klayGetBlockWithConsensusInfoByNumber(
                        "0xe8")
                    .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockNumber = 1;

              provider.klay
                .getBlockWithConsensusInfoByNumber(
                  blockNumber,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "0x6e0431"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_block_with_consensus_info_by_number(blockTag)

            print(klay_response)
  /klay/block/getBlockWithConsensusInfoByNumberRange:
    post:
      operationId: getBlockWithConsensusInfoByNumberRange
      summary: '[Block] klay_getBlockWithConsensusInfoByNumberRange'
      description: |
        Returns a block with consensus information matched by the given block hash or block number.

        **JSONRPC:** `klay_getBlockWithConsensusInfoByNumberRange`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetBlockWithConsensusInfoByNumberRangeReq'
      responses:
        '200':
          description: Returns a block with consensus information matched by the given block hash or block number.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetBlockWithConsensusInfoByNumberRangeResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/klay_getBlockWithConsensusInfoByNumberRange' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getBlockWithConsensusInfoByNumberRange",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [1, 1]
            }'
        - lang: java
          label: Java
          source: |
            import org.web3j.protocol.klaytn.core.method.response.KlayGetBlockWithConsensusInfoByNumberRangeResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class KlayGetBlockWithConsensusInfoByNumberRangeExample {
                private Web3j w3 = new Web3j(new HttpService("https://api.baobab.klaytn.net:8651"));
                void klayGetBlockWithConsensusInfoByNumberRangeExample() throws IOException {
                    Integer blockNumber = 1;
                    Integer numberRange = 1;
                    KlayGetBlockWithConsensusInfoByNumberRangeResponse response = w3
                        .klayGetBlockWithConsensusInfoByNumberRange(
                            blockNumber,
                            numberRange)
                        .send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockHashOrBlockNumber = 1;
              const range = 10;

              provider.klay
                .getBlockWithConsensusInfoByNumberRange(
                  blockHashOrBlockNumber,
                  range,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = 1
            numberRange = 10

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_block_with_consensus_info_by_number_range(blockHash, numberRange)

            print(klay_response)
  /klay/block/getCommittee:
    post:
      operationId: getCommittee
      summary: '[Block] klay_getCommittee'
      description: |
        Returns a list of all validators in the committee at the specified block. If the parameter is not set, returns a list of all validators in the committee at the latest block.

        **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.*

        **JSONRPC:** `klay_getCommittee`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetCommitteeReq'
      responses:
        '200':
          description: Array - Array of addresses of all validators in the committee, or null when no committee was found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetCommitteeResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getCommittee' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getCommittee",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x1b4"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGetCommitteeResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetCommitteeExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayGetCommitteeExample() throws IOException {
                    KlayGetCommitteeResponse gr = w3.klayGetCommittee(
                        "0x1b4")
                    .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockNumberOrTag = "0x1b4";

              provider.klay
                .getCommittee(blockNumberOrTag, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "0x1b4"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_committee(blockTag)

            print(klay_response)
  /klay/block/getCommitteeSize:
    post:
      operationId: getCommitteeSize
      summary: '[Block] klay_getCommitteeSize'
      description: |
        Returns the size of the committee at the specified block. If the parameter is not set, returns the size of the committee at the latest block.

        **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.*

        **JSONRPC:** `klay_getCommitteeSize`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetCommitteeSizeReq'
      responses:
        '200':
          description: Integer - The size of the committee, or -1 when no committee was found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: number
                        description: The size of the committee
                        example: 4
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getCommitteeSize' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getCommitteeSize",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x1b4"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGetCommitteeSizeResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetCommitteeSizeExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayGetCommitteeSizeExample() throws IOException {
                    KlayGetCommitteeSizeResponse gr = w3.klayGetCommitteeSize(
                        "0x1b4")
                    .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockNumberOrTag = "0x1b4";

              provider.klay
                .getCommitteeSize({ blockNumberOrTag }, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "0x1b4"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_committee_size(blockTag)

            print(klay_response)
  /klay/block/getCouncil:
    post:
      operationId: getCouncil
      summary: '[Block] klay_getCouncil'
      description: |
        Returns a list of all validators of the council at the specified block. If the parameter is not set, returns a list of all validators of the council at the latest block.

        **NOTE:** 

        *klay_getValidators is replaced with this method and is not supported anymore.*

        *In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.*

        **JSONRPC:** `klay_getCouncil`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetCouncilReq'
      responses:
        '200':
          description: Array - Array of validator addresses of the council, or null when no council was found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetCouncilResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getCouncil' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getCouncil",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x1b4"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGetCouncilResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetCouncilExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayGetCouncilExample() throws IOException {
                    KlayGetCouncilResponse gr = w3.klayGetCouncil(
                        "0x1b4")
                    .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const blockNumberOrTag = "0x1b4";
              provider.klay
                .getCouncil(blockNumberOrTag, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "0x1b4"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_council(blockTag)

            print(klay_response)
  /klay/block/getCouncilSize:
    post:
      operationId: getCouncilSize
      summary: '[Block] klay_getCouncilSize'
      description: |
        Returns the size of the council at the specified block. If the parameter is not set, returns the size of the council at the latest block.

        **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.*

        **JSONRPC:** `klay_getCouncilSize`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetCouncilSizeReq'
      responses:
        '200':
          description: Integer - The size of the council, or -1 when no council was found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: number
                        description: The size of the council
                        example: 4
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getCouncilSize' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getCouncilSize",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x1b4"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGetCouncilSizeResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetCouncilSizeExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayGetCouncilSizeExample() throws IOException {
                    KlayGetCouncilSizeResponse gr = w3.klayGetCouncilSize(
                        "0x1b4")
                    .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const blockNumberOrTag = "0x1b4";

              provider.klay
                .getCouncilSize({ blockNumberOrTag }, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "0x1b4"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_council_size(blockTag)

            print(klay_response)
  /klay/block/getHeaderByHash:
    post:
      operationId: getHeaderByHash
      summary: '[Block] klay_getHeaderByHash'
      description: |
        Returns information about a header by hash. This API works only on RPC call, not on JavaScript console.

        **NOTE:** *This API is supported from Klaytn v1.7.0.*

        **JSONRPC:** `klay_getHeaderByHash`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetHeaderByHashReq'
      responses:
        '200':
          description: Returns information about a header by hash.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetHeaderByHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getHeaderByHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getHeaderByHash",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xb8deae63002d2b6aa33247c8ef545383ee0fd2282ac9b49dbbb74114389ddb5c"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGetHeaderByHashResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetHeaderByHashExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayGetHeaderByHashExample() throws IOException {
                    KlayGetHeaderByHashResponse gr = w3.klayGetHeaderByHash(
                        "0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577")
                    .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const blockHash =
                "0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577";

              provider.klay
                .getHeaderByHash(blockHash, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_header_by_hash(blockHash)

            print(klay_response)
  /klay/block/getHeaderByNumber:
    post:
      operationId: getHeaderByNumber
      summary: '[Block] klay_getHeaderByNumber'
      description: |
        Returns information about a header by number. This API works only on RPC call, not on JavaScript console.

        **NOTE:** *This API is supported from Klaytn v1.7.0.*

        **JSONRPC:** `klay_getHeaderByNumber`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetHeaderByNumberReq'
      responses:
        '200':
          description: Returns information about a header by number
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetHeaderByNumberResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getHeaderByNumber' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getHeaderByNumber",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x1b4"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGetHeaderByNumberResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetHeaderByNumberExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayGetHeaderByNumberExample() throws IOException {
                    KlayGetHeaderByNumberResponse gr = w3.klayGetHeaderByNumber(
                        "0x1b4")
                    .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const blockNumber = 1;

              provider.klay
                .getHeaderByNumber(blockNumber, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "0x1b4"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_header_by_number(blockTag)

            print(klay_response)
  /klay/block/getRewards:
    post:
      tags:
        - klay
      operationId: getRewards
      summary: '[Block] klay_getRewards'
      description: |
        Returns the reward distribution result about a block by block number, including the rewardees and their shares. If the parameter is not set, it returns the reward distribution at the latest block.

        **JSONRPC:** `klay_getRewards`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetRewardsReq'
      responses:
        '200':
          description: block rewards information
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetRewardsResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getRewards' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getRewards",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "latest"
              ]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGetRewardsResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetRewardsExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayGetRewardsExample() throws IOException {
                    KlayGetRewardsResponse gr = w3.klayGetRewards(
                        "0x1000")
                    .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockNumberOrTag = "latest";
              provider.klay
                .getRewards(blockNumberOrTag, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_rewards(blockTag)

            print(klay_response)
  /klay/block/getStorageAt:
    post:
      operationId: getStorageAt
      summary: '[Block] klay_getStorageAt'
      description: |
        Returns the value from a storage position at a given address.

        **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.*

        **JSONRPC:** `klay_getStorageAt`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetStorageAtReq'
      responses:
        '200':
          description: Returns the value from a storage position at a given address.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: DATA
                        description: The value at this storage position.
                        example: '0x00000000000000000000000000000000000000000000000000000000000004d2'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getStorageAt' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getStorageAt",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x295a70b2de5e3953354a6a8344e616ed314d7251", "0x0", "latest"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGetStorageAtResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetStorageAtExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayGetStorageAtExample() throws IOException {
                    KlayGetStorageAtResponse gr = w3.klayGetStorageAt(
                        "0x295a70b2de5e3953354a6a8344e616ed314d7251",
                        "0x0",
                        "latest")
                    .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const storageAddress = "0x295a70b2de5e3953354a6a8344e616ed314d7251";
              const position = "0x0";
              const blockNumberOrHash = "latest";

              provider.klay
                .getStorageAt(
                  storageAddress,
                  position,
                  blockNumberOrHash,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "0x295a70b2de5e3953354a6a8344e616ed314d7251"
            position = "0x0"
            blockHash = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_storage_at(address, position, blockHash)

            print(klay_response)
  /klay/block/syncing:
    post:
      operationId: syncing
      summary: '[Block] klay_syncing'
      description: |
        Returns an object with data about the sync status or false.

        **JSONRPC:** `klay_syncing`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_syncing
      responses:
        '200':
          description: Returns Object|Boolean, an object with sync status data or false when not syncing
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlaySyncingResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/syncing' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_syncing",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            import java.io.IOException;

            import org.web3j.protocol.klaytn.core.method.response.KlaySyncingResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            public class KlaySyncingExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));  void klaySyncingExample() throws IOException {
                KlaySyncingResponse response = w3.klaySyncing().send();
                response.getResult();
              }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.klay
                .syncing({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.syncing()

            print(klay_response)
  /klay/transaction/call:
    post:
      operationId: call
      summary: '[Transaction] klay_call'
      tags:
        - klay
      description: |
        Executes a new message call immediately without creating a transaction on the block chain. It returns data or an error object of JSON RPC if error occurs.

        If you deployed a contract, use klay_getTransactionReceipt to get the contract address.

        **NOTE** In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.

        **JSONRPC:** `klay_call`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayCallReq'
      responses:
        '200':
          description: Return value of executed contract or returns an error object of JSON RPC if anything goes wrong
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayCallResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl 'https://api.baobab.klaytn.net:8651/klay/call' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_call",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                {
                  "from": "0x3f71029af4e252b25b9ab999f77182f0cd3bc085",
                  "to": "0x87ac99835e67168d4f9a40580f8f5c33550ba88b",
                  "gas": "0x100000",
                  "gasPrice": "0x5d21dba00",
                  "value": "0x0",
                  "input": "0x8ada066e"
                },
                "latest"
              ]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayCallObject;
            import org.web3j.protocol.klaytn.core.method.response.KlayCallResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class KlayCallExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayCallExample() throws IOException {
                    KlayCallObject callObject = new KlayCallObject();
                    callObject.setFrom("0x3f71029af4e252b25b9ab999f77182f0cd3bc085");
                    callObject.setTo("0x87ac99835e67168d4f9a40580f8f5c33550ba88b");
                    callObject.setGas("0x100000");
                    callObject.setGasPrice("0x5d21dba00");
                    callObject.setValue("0x0");
                    callObject.setInput("0x8ada066e");

                    KlayCallResponse cr = w3.klayCall(
                        callObject,
                        "latest")
                    .send();
                    cr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const callObject = {
                from: "0x3f71029af4e252b25b9ab999f77182f0cd3bc085",
                to: "0x87ac99835e67168d4f9a40580f8f5c33550ba88b",
                gas: "0x100000",
                gasPrice: "0x5d21dba00",
                value: "0x0",
                input: "0x8ada066e",
              };
              const blockTag = "latest";
              provider.klay
                .call(callObject, blockTag, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            callObject = {
                "from": "0x3f71029af4e252b25b9ab999f77182f0cd3bc085",
                "to": "0x87ac99835e67168d4f9a40580f8f5c33550ba88b",
                "gas": "0x100000",
                "gasPrice": "0x5d21dba00",
                "value": "0x0",
                "input": "0x8ada066e"
            }
            blockTag = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.call(callObject, blockTag)

            print(klay_response)
  /klay/transaction/createAccessList:
    post:
      operationId: createAccessList
      summary: '[Transaction] klay_createAccessList'
      description: |
        This method creates an accessList based on a given Transaction. The accessList contains all storage slots and addresses read and written by the transaction, except for the sender account and the precompiles. This method uses the same transaction call object and blockNumberOrTag object as caver.rpc.klay.call. An accessList can be used to release stuck contracts that became inaccessible due to gas cost increases. Adding an accessList to your transaction does not necessary result in lower gas usage compared to a transaction without an access list.

        **JSONRPC:** `klay_createAccessList`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayCreateAccessListReq'
      responses:
        '200':
          description: returns an object includes an access list
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayCreateAccessListResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
            'https://api.baobab.klaytn.net:8651/klay/createAccessList' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_createAccessList",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
              {
                  "from": "0x3bc5885c2941c5cda454bdb4a8c88aa7f248e312",
                  "to": "0x00f5f5f3a25f142fafd0af24a754fafa340f32c7",
                  "gas": "0x3d0900",
                  "gasPrice": "0x3b9aca00",
                  "data": "0x20965255"
                },
                "latest"
              ]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayCallObject;
            import org.web3j.protocol.klaytn.core.method.response.KlayCreateAccessListResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayCreateAccessListExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayCreateAccessListExample() throws IOException {
                    KlayCallObject object = new KlayCallObject();
                    object.setFrom("0x3bc5885c2941c5cda454bdb4a8c88aa7f248e312");
                    object.setTo("0x00f5f5f3a25f142fafd0af24a754fafa340f32c7");
                    object.setGas("0x3d0900");
                    object.setGasPrice("0x3b9aca00");
                    object.setInput("0x20965255");
                    KlayCreateAccessListResponse response = w3.klayCreateAccessList(object , "latest").send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const callObject = {
                from: "0x3bc5885c2941c5cda454bdb4a8c88aa7f248e312",
                to: "0x00f5f5f3a25f142fafd0af24a754fafa340f32c7",
                gas: "0x3d0900",
                gasPrice: "0x3b9aca00",
                data: "0x20965255",
              };
              const blockParameter = "latest";
              provider.klay
                .createAccessList(
                  callObject,
                  { blockParameter },
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            callObject = {
                  "from": "0x3bc5885c2941c5cda454bdb4a8c88aa7f248e312",
                  "to": "0x00f5f5f3a25f142fafd0af24a754fafa340f32c7",
                  "gas": "0x3d0900",
                  "gasPrice": "0x3b9aca00",
                  "data": "0x20965255"
                }
            blockTag = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.create_access_list(callObject, blockTag)

            print(klay_response)
  /klay/transaction/estimateComputationCost:
    post:
      operationId: estimateComputationCost
      summary: '[Transaction] klay_estimateComputationCost'
      tags:
        - klay
      description: |
        Generates and returns an estimate of how much computation cost will be spent to execute the transaction. Klaytn limits the computation cost of a transaction to 100000000 currently not to take too much time by a single transaction. The transaction will not be added to the blockchain like klay_estimateGas

        **JSONRPC:** `klay_estimateComputationCost`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayEstimateComputationCostReq'
      responses:
        '200':
          description: Return the amount of computation cost used.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: The amount of computation cost used.
                        example: '0x1e8b0ad'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/estimateComputationCost' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_estimateComputationCost",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [{"from":"0x73718c4980728857f3aa5148e9d1b471efa3a7dd", "to":"0x069942a3ca0dabf495dba872533134205764bc9c", "value":"0x0", "input":"0x2a31efc7000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000003039"}, "latest"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayCallObject;
            import org.web3j.protocol.klaytn.core.method.response.KlayEstimateComputationCostResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayEstimateComputationCostExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayEstimateComputationCostExample() throws IOException {
                    KlayCallObject callObject = new KlayCallObject();
                    callObject.setFrom("0x73718c4980728857f3aa5148e9d1b471efa3a7dd");
                    callObject.setTo("0x069942a3ca0dabf495dba872533134205764bc9c");
                    callObject.setValue("0x0");
                    callObject.setInput("0x2a31efc7000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000003039");
                    callObject.setGas("0x9999");

                    KlayEstimateComputationCostResponse er = w3.klayEstimateComputationCost(
                                    callObject,
                                    "latest")
                            .send();
                    er.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const callObject = {
                from: "0x73718c4980728857f3aa5148e9d1b471efa3a7dd",
                to: "0x069942a3ca0dabf495dba872533134205764bc9c",
                value: "0x0",
                input:
                  "0x2a31efc7000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000003039",
              };
              const blockNumberOrHash = "latest";

              provider.klay
                .estimateComputationCost(
                  callObject,
                  blockNumberOrHash,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            callObject = {
                "from": "0x73718c4980728857f3aa5148e9d1b471efa3a7dd",
                "to": "0x069942a3ca0dabf495dba872533134205764bc9c",
                "value": "0x0",
                "input": "0x2a31efc7000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000003039"
            }
            blockNumberOrHash = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.estimate_computation_cost(callObject, blockNumberOrHash)

            print(klay_response)
  /klay/transaction/estimateGas:
    post:
      operationId: estimateGas
      summary: '[Transaction] klay_estimateGas'
      tags:
        - klay
      description: |
        Generates and returns an estimate of how much gas is necessary to allow the transaction to complete. The transaction will not be added to the blockchain. Note that the estimate may be significantly more than the amount of gas actually used by the transaction, for a variety of reasons including Klaytn Virtual Machine mechanics and node performance.

        **JSONRPC:** `klay_estimateGas`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayEstimateGasReq'
      responses:
        '200':
          description: The amount of gas used.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayEstimateGasResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/estimateGas' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_estimateGas",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                {
                  "from": "0x3f71029af4e252b25b9ab999f77182f0cd3bc085",
                  "to": "0x87ac99835e67168d4f9a40580f8f5c33550ba88b",
                  "gas": "0x100000",
                  "gasPrice":"0x5d21dba00",
                  "value": "0x0",
                  "input": "0x8ada066e"
                }
              ]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayCallObject;
            import org.web3j.protocol.klaytn.core.method.response.KlayEstimateGasResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayEstimateGasExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayEstimateGasExample() throws IOException {
                    KlayCallObject callObject = new KlayCallObject();
                    callObject.setFrom("0x3f71029af4e252b25b9ab999f77182f0cd3bc085");
                    callObject.setTo("0x87ac99835e67168d4f9a40580f8f5c33550ba88b");
                    callObject.setGas("0x100000");
                    callObject.setGasPrice("0x5d21dba00");
                    callObject.setValue("0x0");
                    callObject.setInput("0x8ada066e");

                    KlayEstimateGasResponse er = w3.klayEstimateGas(
                                    callObject)
                            .send();
                    er.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const callObject = {
                from: "0x3f71029af4e252b25b9ab999f77182f0cd3bc085",
                to: "0x87ac99835e67168d4f9a40580f8f5c33550ba88b",
                gas: "0x100000",
                gasPrice: "0x5d21dba00",
                value: "0x0",
                input: "0x8ada066e",
              };
              provider.klay
                .estimateGas(callObject, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            callObject = {
                "from": "0x3f71029af4e252b25b9ab999f77182f0cd3bc085",
                "to": "0x87ac99835e67168d4f9a40580f8f5c33550ba88b",
                "gas": "0x100000",
                "gasPrice": "0x5d21dba00",
                "value": "0x0",
                "input": "0x8ada066e"
            }

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.estimate_gas(callObject)

            print(klay_response)
  /klay/transaction/getDecodedAnchoringTransactionByHash:
    post:
      operationId: getDecodedAnchoringTransactionByHash
      summary: '[Transaction] klay_getDecodedAnchoringTransactionByHash'
      description: |
        Returns the decoded anchored data in the transaction for the given transaction hash.

        **JSONRPC:** `klay_getDecodedAnchoringTransactionByHash`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetDecodedAnchoringTransactionByHashReq'
      responses:
        '200':
          description: Returns the decoded anchored data in the transaction for the given transaction hash.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetDecodedAnchoringTransactionByHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getDecodedAnchoringTransactionByHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getDecodedAnchoringTransactionByHash",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x72cde80650c7c6745e4cf4c162e9ce1e5542f4d86112925faa6aa75f6a6142ec"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGetDecodedAnchoringTransactionByHashResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetDecodedAnchoringTransactionByHashExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayGetDecodedAnchoringTransactionByHashExample() throws IOException {
                    KlayGetDecodedAnchoringTransactionByHashResponse gr = w3.klayGetDecodedAnchoringTransactionByHash(
                        "0x026b64e16b86633c0199f78f37a64840d3601d83e5c799f115b63024764524ca")
                    .send();
                    gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const hashOfTransaction =
                "0x026b64e16b86633c0199f78f37a64840d3601d83e5c799f115b63024764524ca";

              provider.klay
                .getDecodedAnchoringTransactionByHash(
                  hashOfTransaction,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            hashOfTransaction = "0x72cde80650c7c6745e4cf4c162e9ce1e5542f4d86112925faa6aa75f6a6142ec"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_decoded_anchoring_transaction_by_hash(hashOfTransaction)

            print(klay_response)
  /klay/transaction/getRawTransactionByBlockHashAndIndex:
    post:
      operationId: getRawTransactionByBlockHashAndIndex
      summary: '[Transaction] klay_getRawTransactionByBlockHashAndIndex'
      description: |
        GetRawTransactionByBlockHashAndIndex returns the bytes of the transaction for the given block hash and index.

        **JSONRPC:** `klay_getRawTransactionByBlockHashAndIndex`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetRawTransactionByBlockHashAndIndexReq'
      responses:
        '200':
          description: Returns the bytes of the transaction for the given block hash and index.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetRawTransactionByBlockHashAndIndexResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getRawTransactionByBlockHashAndIndex' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getRawTransactionByBlockHashAndIndex",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x29b6cd965c7d9a53a6f068da259dce1d3810ba79fff8eebac5d4da14754e67e6","0x20965255"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGetRawTransactionByBlockHashAndIndexResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetRawTransactionByBlockHashAndIndexExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    void klayGetRawTransactionByBlockHashAndIndexExample() throws IOException {
                    String blockHash = "0x29b6cd965c7d9a53a6f068da259dce1d3810ba79fff8eebac5d4da14754e67e6";
                    String index = "0x20965255";
                    KlayGetRawTransactionByBlockHashAndIndexResponse response = w3
                            .klayGetRawTransactionByBlockHashAndIndex( blockHash , index)
                            .send();
                    response.getResult();

                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockHash =
                "0x4c4cbf242a80183d2ea2daf047c578d5fc89c0b14c4262606c8b6bb0b36715be";
              const transactionIndexPosition = "0x0";

              provider.klay
                .getRawTransactionByBlockHashAndIndex(
                  blockHash,
                  transactionIndexPosition,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0x29b6cd965c7d9a53a6f068da259dce1d3810ba79fff8eebac5d4da14754e67e6"
            index = "0x20965255"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_raw_transaction_by_block_hash_and_index(blockHash, index)

            print(klay_response)
  /klay/transaction/getRawTransactionByBlockNumberAndIndex:
    post:
      operationId: getRawTransactionByBlockNumberAndIndex
      summary: '[Transaction] klay_getRawTransactionByBlockNumberAndIndex'
      tags:
        - klay
      description: |
        GetRawTransactionByBlockNumberAndIndex returns the bytes of the transaction for the given block number and index.

        **JSONRPC:** `klay_getRawTransactionByBlockNumberAndIndex`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetRawTransactionByBlockNumberAndIndexReq'
      responses:
        '200':
          description: Returns the bytes of the transaction for the given block number and index.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetRawTransactionByBlockNumberAndIndexResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getRawTransactionByBlockNumberAndIndex' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getRawTransactionByBlockNumberAndIndex",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x27", "0x0"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGetRawTransactionByBlockNumberAndIndexResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetRawTransactionByBlockNumberAndIndexExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    void klayGetRawTransactionByBlockNumberAndIndexExample() throws IOException {
                    String blockTag = "0x27";
                    String index = "0x0";

                    KlayGetRawTransactionByBlockNumberAndIndexResponse response = w3
                            .klayGetRawTransactionByBlockNumberAndIndex(blockTag, index)
                            .send();
                    response.getResult();


                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const blockNumber = 118593751;
              const transactionIndexPosition = "0x0";

              provider.klay
                .getRawTransactionByBlockNumberAndIndex(
                  blockNumber,
                  transactionIndexPosition,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "0x27"
            transactionIndex = "0x0"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_raw_transaction_by_block_number_and_index(blockTag, transactionIndex)

            print(klay_response)
  /klay/transaction/getRawTransactionByHash:
    post:
      operationId: getRawTransactionByHash
      summary: '[Transaction] klay_getRawTransactionByHash'
      description: |
        GetRawTransactionByHash returns the bytes of the transaction for the given hash.

        **JSONRPC:** `klay_getRawTransactionByHash`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetRawTransactionByHashReq'
      responses:
        '200':
          description: Returns the bytes of the transaction for the given hash.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetRawTransactionByHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getRawTransactionByHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getRawTransactionByHash",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x29b6cd965c7d9a53a6f068da259dce1d3810ba79fff8eebac5d4da14754e67e6"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGetRawTransactionByHashResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetRawTransactionByHashExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    void klayGetRawTransactionByHashExample() throws IOException {
                    String transactionHash = "0x29b6cd965c7d9a53a6f068da259dce1d3810ba79fff8eebac5d4da14754e67e6";

                    KlayGetRawTransactionByHashResponse response = w3
                            .klayGetRawTransactionByHash(transactionHash)
                            .send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const transactionHash =
                "0x21b2919b89278ca786226f10edbaadced7381dbd73df546a4823547aaebffa58";

              provider.klay
                .getRawTransactionByHash(transactionHash, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            transactionHash = "0x29b6cd965c7d9a53a6f068da259dce1d3810ba79fff8eebac5d4da14754e67e6"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_raw_transaction_by_hash(transactionHash)

            print(klay_response)
  /klay/transaction/getTransactionByBlockHashAndIndex:
    post:
      operationId: getTransactionByBlockHashAndIndex
      summary: '[Transaction] klay_getTransactionByBlockHashAndIndex'
      tags:
        - klay
      description: |
        Returns information about a transaction by block hash and transaction index position. This API works only on RPC call, not on JavaScript console.

        **JSONRPC:** `klay_getTransactionByBlockHashAndIndex`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetTransactionByBlockHashAndIndexReq'
      responses:
        '200':
          description: Returns information about a transaction by block hash and transaction index position.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetTransactionByBlockHashAndIndexResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getTransactionByBlockHashAndIndex' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getTransactionByBlockHashAndIndex",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x451cafae98d61b7458b5cef54402830941432278184453e3ca490eb687317e68", "0x0"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGetTransactionByBlockHashAndIndexResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetTransactionByBlockHashAndIndexExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    void klayGetTransactionByBlockHashAndIndexExample() throws IOException {
                    KlayGetTransactionByBlockHashAndIndexResponse response = w3.klayGetTransactionByBlockHashAndIndex(
                            "0x451cafae98d61b7458b5cef54402830941432278184453e3ca490eb687317e68",
                            "0x0"
                    ).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockHash =
                "0x4c4cbf242a80183d2ea2daf047c578d5fc89c0b14c4262606c8b6bb0b36715be";
              const transactionIndexPosition = "0x0";

              provider.klay
                .getTransactionByBlockHashAndIndex(
                  blockHash,
                  transactionIndexPosition,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0x4c4cbf242a80183d2ea2daf047c578d5fc89c0b14c4262606c8b6bb0b36715be"
            transactionIndexPosition = "0x0"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_transaction_by_block_hash_and_index(blockHash, transactionIndexPosition)

            print(klay_response)
  /klay/transaction/getTransactionByBlockNumberAndIndex:
    post:
      operationId: getTransactionByBlockNumberAndIndex
      summary: '[Transaction] klay_getTransactionByBlockNumberAndIndex'
      description: |
        Returns information about a transaction by block number and transaction index position. This API works only on RPC call, not on JavaScript console.

        **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.*

        **JSONRPC:** `klay_getTransactionByBlockNumberAndIndex`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetTransactionByBlockNumberAndIndexReq'
      responses:
        '200':
          description: Returns information about a transaction by block number and transaction index position.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetTransactionByBlockNumberAndIndexResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getTransactionByBlockNumberAndIndex' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getTransactionByBlockNumberAndIndex",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [118593751, "0x0"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGetTransactionByBlockNumberAndIndexResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetTransactionByBlockNumberAndIndexExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    void klayGetTransactionByBlockNumberAndIndexExample() throws IOException {
                    KlayGetTransactionByBlockNumberAndIndexResponse response = w3.klayGetTransactionByBlockNumberAndIndex(
                            "0x451cafae98d61b7458b5cef54402830941432278184453e3ca490eb687317e68",
                            "0x0"
                    ).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const blockNumber = 118593751;
              const transactionIndexPosition = "0x0";

              provider.klay
                .getTransactionByBlockNumberAndIndex(
                  blockNumber,
                  transactionIndexPosition,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "0x27"
            transactionIndex = "0x0"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_transaction_by_block_number_and_index(blockTag, transactionIndex)

            print(klay_response)
  /klay/transaction/getTransactionByHash:
    post:
      operationId: getTransactionByHash
      summary: '[Transaction] klay_getTransactionByHash'
      tags:
        - klay
      description: |
        Returns the information about a transaction requested by transaction hash. This API works only on RPC call, not on JavaScript console.

        **JSONRPC:** `klay_getTransactionByHash`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetTransactionByHashReq'
      responses:
        '200':
          description: Object - A transaction object, or null when no transaction was found.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetTransactionByHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getTransactionByHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getTransactionByHash",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGetTransactionByHashResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetTransactionByHashExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayGetTransactionByHashExample() throws IOException {
                    KlayGetTransactionByHashResponse response = w3.klayGetTransactionByHash(
                            "0x21b2919b89278ca786226f10edbaadced7381dbd73df546a4823547aaebffa58"
                    ).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const transactionHash =
                "0x21b2919b89278ca786226f10edbaadced7381dbd73df546a4823547aaebffa58";

              provider.klay
                .getTransactionByHash(transactionHash, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            transactionHash = "0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_transaction_by_hash(transactionHash)

            print(klay_response)
  /klay/transaction/getTransactionBySenderTxHash:
    post:
      operationId: getTransactionBySenderTxHash
      summary: '[Transaction] klay_getTransactionBySenderTxHash'
      description: |
        Returns the information about a transaction requested by sender transaction hash. This API works only on RPC call, not on JavaScript console. Please note that this API returns correct result only if indexing feature is enabled by --sendertxhashindexing. This can be checked by call klay_isSenderTxHashIndexingEnabled.

        **JSONRPC:** `klay_getTransactionBySenderTxHash`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetTransactionBySenderTxHashReq'
      responses:
        '200':
          description: Returns information about a transaction by block number and transaction index position.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetTransactionBySenderTxHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getTransactionBySenderTxHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getTransactionBySenderTxHash",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x18fe9e1007da7d20aad77778557fb8acc58c80054daba65124c8c843aadd3478"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGetTransactionBySenderTxHashResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetTransactionBySenderTxHashExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    void klayGetTransactionBySenderTxHashExample() throws IOException {
                    KlayGetTransactionBySenderTxHashResponse response = w3.klayGetTransactionBySenderTxHash(
                            "0x21b2919b89278ca786226f10edbaadced7381dbd73df546a4823547aaebffa58"
                    ).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const transactionHash =
                "0x21b2919b89278ca786226f10edbaadced7381dbd73df546a4823547aaebffa58";

              provider.klay
                .getTransactionBySenderTxHash(
                  transactionHash,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            transactionHash = "0x18fe9e1007da7d20aad77778557fb8acc58c80054daba65124c8c843aadd3478"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_transaction_by_sender_tx_hash(transactionHash)

            print(klay_response)
  /klay/transaction/getTransactionReceipt:
    post:
      operationId: getTransactionReceipt
      summary: '[Transaction] klay_getTransactionReceipt'
      description: |
        Returns the receipt of a transaction by transaction hash.

        **NOTE:** The receipt is not available for pending transactions.

        **JSONRPC:** `klay_getTransactionReceipt`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetTransactionReceiptReq'
      responses:
        '200':
          description: Returns a transaction receipt object, or null when no receipt was found.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetTransactionReceiptResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getTransactionReceipt' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getTransactionReceipt",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGetTransactionReceiptResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetTransactionReceiptExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayGetTransactionReceiptExample() throws IOException {
                    KlayGetTransactionReceiptResponse response = w3.klayGetTransactionReceipt(
                            "0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67"
                    ).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const transactionHash =
                "0x2781f2f57b2587f6d9ad80a9e5f60158439d2548eebbc23bd806ecb856fe724e";
              provider.klay
                .getTransactionReceipt(transactionHash, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            transactionHash = "0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_transaction_receipt(transactionHash)

            print(klay_response)
  /klay/transaction/getTransactionReceiptBySenderTxHash:
    post:
      operationId: getTransactionReceiptBySenderTxHash
      summary: '[Transaction] klay_getTransactionReceiptBySenderTxHash'
      tags:
        - klay
      description: |
        Returns the receipt of a transaction by sender transaction hash.

        **NOTE:** The receipt is not available for pending transactions. Please note that this API returns correct result only if indexing feature is enabled by --sendertxhashindexing. This can be checked by call klay_isSenderTxHashIndexingEnabled.

        **JSONRPC:** `klay_getTransactionReceiptBySenderTxHash`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/schemas-KlayGetTransactionByHashReq'
      responses:
        '200':
          description: Returns the receipt of a transaction by sender transaction hash.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/schemas-KlayGetTransactionByHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getTransactionReceiptBySenderTxHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getTransactionReceiptBySenderTxHash",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGetTransactionReceiptBySenderTxHashResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetTransactionReceiptBySenderTxHashExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayGetTransactionReceiptBySenderTxHashExample() throws IOException {
                    KlayGetTransactionReceiptBySenderTxHashResponse response = w3.klayGetTransactionReceiptBySenderTxHash(
                            "0x21b2919b89278ca786226f10edbaadced7381dbd73df546a4823547aaebffa58"
                    ).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const senderTxHash =
                "0x2781f2f57b2587f6d9ad80a9e5f60158439d2548eebbc23bd806ecb856fe724e";

              provider.klay
                .getTransactionReceiptBySenderTxHash(
                  senderTxHash,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            transactionHash = "0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_transaction_receipt_by_sender_tx_hash(transactionHash)

            print(klay_response)
  /klay/transaction/pendingTransactions:
    post:
      operationId: pendingTransactions
      summary: '[Transaction] klay_pendingTransactions'
      tags:
        - klay
      description: |
        Returns the transactions that are in the transaction pool and have a from address that is one of the accounts this node manages.

        **JSONRPC:** `klay_pendingTransactions`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayPendingTransactionsReq'
      responses:
        '200':
          description: Returns an array of transactions
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayPendingTransactionsResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/pendingTransactions' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_pendingTransactions",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayPendingTransactionsResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayPendingTransactionsExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    void klayPendingTransactionsExample() throws IOException {
                    KlayPendingTransactionsResponse response = w3.klayPendingTransactions().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.klay
                .pendingTransactions({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.pending_transactions()

            print(klay_response)
  /klay/transaction/resend:
    post:
      operationId: resend
      summary: '[Transaction] klay_resend'
      description: |
        Resend accepts an existing transaction and a new gas price and limit. It will remove the given transaction from the pool and reinsert it with the new gas price and limit.

        **JSONRPC:** `klay_resend`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayResendReq'
      responses:
        '200':
          description: Resend accepts an existing transaction and a new gas price and limit.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: Hex representation of a Keccak 256 hash
                        example: '0xced304149857009d8767c54b7e624f700c39afe8b93d61b970902d95ac6271d1'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/resend' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_resend",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [{"from": "0x65b47be3457ff26f2911cf89fd079cef0475a2e6","to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee","value": "0x1","gas": "0x9999","maxFeePerGas": "0x5d21dba00","maxPriorityFeePerGas": "0x5d21dba00","nonce": "0xf"}, "0xba43b7500", "0xe8d4a50fff"]
            }'
        - lang: java
          label: Java
          source: |
            import java.io.IOException;


            import org.web3j.protocol.klaytn.core.method.response.KlayResendResponse;
            import org.web3j.protocol.klaytn.core.method.response.SendArgs;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            public class KlayResendExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayResendExample() throws IOException {
                    SendArgs oldTrx = new SendArgs();
                    oldTrx.setFrom("0x65b47be3457ff26f2911cf89fd079cef0475a2e6");
                    oldTrx.setTo("0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee");
                    oldTrx.setValue("0x1");
                    oldTrx.setGas("0x9999");
                    oldTrx.setNonce("0xd3");
                    oldTrx.setMaxPriorityFeePerGas("0x5d21dba00");
                    oldTrx.setMaxFeePerGas("0x5d21dba00");
                    String gasPrice = "0xba43b7500";
                    String gasLimit = "0xe8d4a50fff";

                    KlayResendResponse response = w3.klayResend(oldTrx, gasPrice, gasLimit).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const sendArgs = {
                from: "0x65b47be3457ff26f2911cf89fd079cef0475a2e6",
                to: "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                value: "0x1",
                gas: "0x9999",
                maxFeePerGas: "0x5d21dba00",
                maxPriorityFeePerGas: "0x5d21dba00",
                nonce: "0xd",
              };
              const gasPrice = "0xba43b7500";
              const gasLimit = "0xe8d4a50fff";

              provider.klay.resend(
                sendArgs,
                gasPrice,
                gasLimit,
                {},
                (err, data, response) => {
                  console.log(data);
                },
              );
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))

            sendArgs = {
                "from": "0x65b47be3457ff26f2911cf89fd079cef0475a2e6",
                "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                "value": "0x1",
                "gas": "0x9999",
                "maxFeePerGas": "0x5d21dba00",
                "maxPriorityFeePerGas": "0x5d21dba00",
                "nonce": "0xd"
            }
            gasPrice = "0xba43b7500"
            gasLimit = "0xe8d4a50fff"

            klay_response = w3.klay.resend(sendArgs, gasPrice, gasLimit)

            print(klay_response)
  /klay/transaction/sendRawTransaction:
    post:
      operationId: sendRawTransaction
      summary: '[Transaction] klay_sendRawTransaction'
      description: |
        Creates a new message call transaction or a contract creation for signed transactions.

        **NOTE:** If you deployed a contract, use klay_getTransactionReceipt to get the contract address.

        **JSONRPC:** `klay_sendRawTransaction`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlaySendRawTransactionReq'
      responses:
        '200':
          description: Returns the transaction hash or the zero hash if the transaction is not yet available.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: 32-byte DATA
                        description: The transaction hash or the zero hash if the transaction is not yet available.
                        example: '0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/sendRawTransaction' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_sendRawTransaction",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xf86680850ba43b7400829999948c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee01808207f4a092d389e81c665711cb71cb6decc33fda5f990b4a62a309a7f5ae704a24a9848fa0458e5e3ceceb05371241be9424ac8062fcefee8373ffdacf2935860e5cc7d9b1"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlaySendRawTransactionResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlaySendRawTransactionExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klaySendRawTransactionExample() throws IOException {
                    String singedTransactionData = "0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67";

                    KlaySendRawTransactionResponse response = w3.klaySendRawTransaction(singedTransactionData).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const singedTransactionData =
                "0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67";

              provider.klay
                .sendRawTransaction(singedTransactionData, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            singedTransactionData = "0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.send_raw_transaction(singedTransactionData)

            print(klay_response)
  /klay/transaction/sendTransaction:
    post:
      operationId: sendTransaction
      summary: '[Transaction] klay_sendTransaction'
      description: |
        Constructs a transaction with given parameters, signs the transaction with a sender's private key and propagates the transaction to Klaytn network.

        `klay_sendTransaction` will be failed to baobab/cypress network because it is signed in the EN node, which means that the EN must have the key that you want to sign with.
        Steps to test `klay_sendTransaction`.
          - Step 1: Setup a local EN node
          - Step 2: <a href="#tag/personal/operation/newAccount" target="_blank">Create an account</a> into the EN node
          - Step 3: <a href="#tag/personal/operation/unlockAccount" target="_blank">Unlock the account</a> for using in signing

        **JSONRPC:** `klay_sendTransaction`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlaySendTransactionReq'
      responses:
        '200':
          description: Returns the transaction hash.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: 32-byte DATA
                        description: The transaction hash
                        example: '0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/sendTransaction' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_sendTransaction",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [{
                "from": "0xb60e8dd61c5d32be8058bb8eb970870f07233155",
                "to": "0xd46e8dd67c5d32be8058bb8eb970870f07244567",
                "gas": "0x76c0",
                "gasPrice": "0x5d21dba00",
                "value": "0x9184e72a",
                "input": "0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675"
              }]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlaySendTransactionResponse;
            import org.web3j.protocol.klaytn.core.method.response.KlaytnTransactionTypes;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlaySendTransactionExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klaySendTransactionExample() throws IOException {
                    String address = "0x413ba0e5f6f00664598b5c80042b1308f4ff1408";
                    KlaytnTransactionTypes type = new KlaytnTransactionTypes();
                    type.setFrom(address);
                    type.setTo("0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee");
                    type.setValue("0x0");
                    type.setGas("0x9999");
                    KlaySendTransactionResponse transactionResponse = w3.klaySendTransaction(type).send();
                    transactionResponse.getResult();

                }

            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const transactionObject = {
                from: "0x487f2dfef230c2120b8cc55c5087b103146536ec",
                to: "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                value: "0x1",
                gas: "0x9999",
                maxFeePerGas: "0x5d21dba00",
                maxPriorityFeePerGas: "0x5d21dba00",
              };

              provider.klay
                .sendTransaction(transactionObject, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            transactionObject = {
                "from": "0x487f2dfef230c2120b8cc55c5087b103146536ec",
                "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                "value": "0x1",
                "gas": "0x9999",
                "maxFeePerGas": "0x5d21dba00",
                "maxPriorityFeePerGas": "0x5d21dba00"
            }

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.send_transaction(transactionObject)

            print(klay_response)
  /klay/transaction/sendTransactionAsFeePayer:
    post:
      operationId: sendTransactionAsFeePayer
      summary: '[Transaction] klay_sendTransactionAsFeePayer'
      description: |
        Constructs a transaction with given parameters, signs the transaction with a fee payer's private key and propagates the transaction to Klaytn network. This API supports only fee delegated type (including partial fee delegated type) transactions.

        `klay_sendTransactionAsFeePayer` will be failed to baobab/cypress network because it is signed in the EN node, which means that the EN must have the key that you want to sign with.
        Steps to test `klay_sendTransactionAsFeePayer`.
          - Step 1: Setup a local EN node
          - Step 2: <a href="#tag/personal/operation/newAccount" target="_blank">Create an account</a> into the EN node
          - Step 3: <a href="#tag/personal/operation/unlockAccount" target="_blank">Unlock the account</a> for using in signing

        **JSONRPC:** `klay_sendTransactionAsFeePayer`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlaySendTransactionAsFeePayerReq'
      responses:
        '200':
          description: Returns the transaction hash
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        title: SendTransactionAsFeePayerResult
                        format: 32-byte DATA
                        description: The transaction hash
                        example: '0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/sendTransactionAsFeePayer' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_sendTransactionAsFeePayer",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [{
                "typeInt": 18,
                "from": "0xcd01b2b44584fb143824c1ea0231bebaea826b9d",
                "to": "0x44711E89b0c23845b5B2ed9D3716BA42b8a3e075",
                "gas": "0x4a380",
                "gasPrice": "0x5d21dba00",
                "nonce": "0x2c",
                "value": "0xf4",
                "input": "0xb3f98adc0000000000000000000000000000000000000000000000000000000000000001",
                "feePayer": "0xcd01b2b44584fb143824c1ea0231bebaea826b9d",
                "feeRatio": 30,
                "signatures": [{
                  "V": "0x4e43",
                  "R": "0xd3ff5ca7bdd0120d79e8aa875593d05022fe74ce2b7a0594218d53c0fdca7fa9",
                  "S": "0x2c100e69d2455afc9393e017514063da18b18db6f7e811d0aeaf6002515b58ef"
                }]
              }]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlaySendTransactionAsFeePayerResponse;
            import org.web3j.protocol.klaytn.core.method.response.KlaytnTransactionTypes;
            import org.web3j.protocol.klaytn.core.method.response.Signature;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;
            import java.util.List;

            public class KlaySendTransactionAsFeePayerExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
              void klaySendTransactionAsFeePayerExample() throws IOException {
                KlaytnTransactionTypes tx = new KlaytnTransactionTypes();
                Signature signature = new Signature();
                signature.setV("0x4e43");
                signature.setR("0xd3ff5ca7bdd0120d79e8aa875593d05022fe74ce2b7a0594218d53c0fdca7fa9");
                signature.setS("0x2c100e69d2455afc9393e017514063da18b18db6f7e811d0aeaf6002515b58ef");
                tx.setTypeInt(18);
                tx.setFrom("0xcd01b2b44584fb143824c1ea0231bebaea826b9d");
                tx.setTo("0x44711E89b0c23845b5B2ed9D3716BA42b8a3e075");
                tx.setGas("0x4a380");
                tx.setGasPrice("0x5d21dba00");
                tx.setNonce("0x2c");
                tx.setValue("0xf4");
                tx.setInput("0xb3f98adc0000000000000000000000000000000000000000000000000000000000000001");
                tx.setFeePayer("0xcd01b2b44584fb143824c1ea0231bebaea826b9d");
                tx.setFeeRatio(30);
                tx.setSignatures(List.of(signature));
                KlaySendTransactionAsFeePayerResponse response = w3.klaySendTransactionAsFeePayer(tx).send();
                response.getResult();
              }

            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const txObject = {
                typeInt: 18,
                from: "0xcd01b2b44584fb143824c1ea0231bebaea826b9d",
                to: "0x44711E89b0c23845b5B2ed9D3716BA42b8a3e075",
                gas: "0x4a380",
                gasPrice: "0x5d21dba00",
                nonce: "0x2c",
                value: "0xf4",
                input:
                  "0xb3f98adc0000000000000000000000000000000000000000000000000000000000000001",
                feePayer: "0xcd01b2b44584fb143824c1ea0231bebaea826b9d",
                feeRatio: 30,
                signatures: [
                  {
                    V: "0x4e43",
                    R: "0xd3ff5ca7bdd0120d79e8aa875593d05022fe74ce2b7a0594218d53c0fdca7fa9",
                    S: "0x2c100e69d2455afc9393e017514063da18b18db6f7e811d0aeaf6002515b58ef",
                  },
                ],
              };

              provider.klay
                .sendTransactionAsFeePayer(txObject, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            txObject = {
                "typeInt": 18,
                "from": "0xcd01b2b44584fb143824c1ea0231bebaea826b9d",
                "to": "0x44711E89b0c23845b5B2ed9D3716BA42b8a3e075",
                "gas": "0x4a380",
                "gasPrice": "0x5d21dba00",
                "nonce": "0x2c",
                "value": "0xf4",
                "input": "0xb3f98adc0000000000000000000000000000000000000000000000000000000000000001",
                "feePayer": "0xcd01b2b44584fb143824c1ea0231bebaea826b9d",
                "feeRatio": 30,
                "signatures": [{
                    "V": "0x4e43",
                    "R": "0xd3ff5ca7bdd0120d79e8aa875593d05022fe74ce2b7a0594218d53c0fdca7fa9",
                    "S": "0x2c100e69d2455afc9393e017514063da18b18db6f7e811d0aeaf6002515b58ef"
                }]
            }

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.send_transaction_as_fee_payer(txObject)

            print(klay_response)
  /klay/transaction/signTransaction:
    post:
      operationId: signTransaction
      summary: '[Transaction] klay_signTransaction'
      description: |
        Constructs a transaction with given parameters and signs the transaction with a sender's private key. This method can be used either to generate a sender signature or to make a final raw transaction that is ready to submit to Klaytn network.

        `klay_signTransaction` will be failed to baobab/cypress network because it is signed in the EN node, which means that the EN must have the key that you want to sign with.
        Steps to test `klay_signTransaction`.
          - Step 1: Setup a local EN node
          - Step 2: <a href="#tag/personal/operation/newAccount" target="_blank">Create an account</a> into the EN node
          - Step 3: <a href="#tag/personal/operation/unlockAccount" target="_blank">Unlock the account</a> for using in signing

        **JSONRPC:** `klay_signTransaction`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlaySignTransactionReq'
      responses:
        '200':
          description: Returns signed raw transaction and transaction object including the sender's signature
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlaySignTransactionResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/signTransaction' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_signTransaction",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                {
                  "from":"0x413ba0e5f6f00664598b5c80042b1308f4ff1408",
                  "nonce": "0x0",
                  "gasPrice": "0xba43b7400",
                  "gas": "0x9999",
                  "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                  "value": "0x1"
                }
              ]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlaySignTransactionResponse;
            import org.web3j.protocol.klaytn.core.method.response.KlaytnTransactionTypes;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;
            import java.util.concurrent.ExecutionException;

            public class KlaySignTransactionExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    void klaySignTransactionExample() throws IOException, ExecutionException, InterruptedException {
                    KlaytnTransactionTypes type = new KlaytnTransactionTypes();
                    String address = "0x487f2dfef230c2120b8cc55c5087b103146536ec";
                    String nonce = "0x20";
                    type.setFrom(address);
                    type.setTo("0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee");
                    type.setValue("0x10000");
                    type.setGas("0x1000000");
                    type.setGasPrice("0x25000000000");
                    type.setNonce(nonce);
                    KlaySignTransactionResponse response = w3.klaySignTransaction(type).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const transactionObject = {
                from: "0x487f2dfef230c2120b8cc55c5087b103146536ec",
                to: "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                value: "0x1",
                gas: "0x9999",
                nonce: "0x1",
              };

              provider.klay
                .signTransaction(transactionObject, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            transactionObject = {
                "from": "0x487f2dfef230c2120b8cc55c5087b103146536ec",
                "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                "value": "0x1",
                "gas": "0x9999",
                "nonce": "0x1"
            }

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.sign_transaction(transactionObject)

            print(klay_response)
  /klay/transaction/signTransactionAsFeePayer:
    post:
      operationId: signTransactionAsFeePayer
      summary: '[Transaction] klay_signTransactionAsFeePayer'
      description: |
        Constructs a transaction with given parameters and signs the transaction with a fee payer's private key. This method can be used either to generate a fee payer signature or to make a final raw transaction that is ready to submit to Klaytn network. In case you just want to extract the fee-payer signature, simply take the feePayerSignatures from the result. Note that the raw transaction is not final if the sender's signature is not attached (that is, signatures in tx is empty).

        `klay_signTransactionAsFeePayer` will be failed to baobab/cypress network because it is signed in the EN node, which means that the EN must have the key that you want to sign with.
        Steps to test `klay_signTransactionAsFeePayer`.
          - Step 1: Setup a local EN node
          - Step 2: <a href="#tag/personal/operation/newAccount" target="_blank">Create an account</a> into the EN node
          - Step 3: <a href="#tag/personal/operation/unlockAccount" target="_blank">Unlock the account</a> for using in signing

        **JSONRPC:** `klay_signTransactionAsFeePayer`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlaySignTransactionAsFeePayerReq'
      responses:
        '200':
          description: Returns signed raw transaction and transaction object including the fee payer's signature
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlaySignTransactionAsFeePayerResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/signTransactionAsFeePayer' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_signTransactionAsFeePayer",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                {
                  "typeInt": 17,
                  "from": "0xcd01b2b44584fb143824c1ea0231bebaea826b9d",
                  "to": "0x44711E89b0c23845b5B2ed9D3716BA42b8a3e075",
                  "gas": "0x76c0",
                  "gasPrice": "0x5d21dba00",
                  "value": "0xf4",
                  "input": "0xb3f98adc0000000000000000000000000000000000000000000000000000000000000001",
                  "feePayer": "0xcd01b2b44584fb143824c1ea0231bebaea826b9d"
                }
              ]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlaySignTransactionAsFeePayerResponse;
            import org.web3j.protocol.klaytn.core.method.response.KlaytnTransactionTypes;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlaySignTransactionAsFeePayerExample   {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klaySignTransactionAsFeePayerExample() throws IOException {
                    KlaytnTransactionTypes type = new KlaytnTransactionTypes();
                    String address = "0x487f2dfef230c2120b8cc55c5087b103146536ec";
                    String nonce = "0x1";
                    type.setTypeInt(17);
                    type.setFrom(address);
                    type.setTo("0x44711E89b0c23845b5B2ed9D3716BA42b8a3e075");
                    type.setValue("0xf4");
                    type.setGas("0x76c0");
                    type.setGasPrice("0x5d21dba00");
                    type.setInput("0xb3f98adc0000000000000000000000000000000000000000000000000000000000000001");
                    type.setFeePayer(address);
                    type.setNonce(nonce);
                    KlaySignTransactionAsFeePayerResponse response = w3.klaySignTransactionAsFeePayer(type).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const txObject = {
                typeInt: 17,
                from: "0x487f2dfef230c2120b8cc55c5087b103146536ec",
                to: "0x44711E89b0c23845b5B2ed9D3716BA42b8a3e075",
                gas: "0x76c0",
                gasPrice: "0x5d21dba00",
                value: "0xf4",
                input:
                  "0xb3f98adc0000000000000000000000000000000000000000000000000000000000000001",
                feePayer: "0x487f2dfef230c2120b8cc55c5087b103146536ec",
                nonce: "0x1",
              };

              provider.klay
                .signTransactionAsFeePayer(txObject, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            txObject = {
                "typeInt": 17,
                "from": "0x487f2dfef230c2120b8cc55c5087b103146536ec",
                "to": "0x44711E89b0c23845b5B2ed9D3716BA42b8a3e075",
                "gas": "0x76c0", "gasPrice": "0x5d21dba00",
                "value": "0xf4",
                "input": "0xb3f98adc0000000000000000000000000000000000000000000000000000000000000001",
                "feePayer": "0x487f2dfef230c2120b8cc55c5087b103146536ec",
                "nonce": "0x1"
            }

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.sign_transaction_as_fee_payer(txObject)

            print(klay_response)
  /klay/configuration/chainID:
    post:
      operationId: chainID
      summary: '[Configuration] klay_chainID'
      description: |
        Returns the chain ID of the chain.

        **JSONRPC:** `klay_chainID`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_chainID
      responses:
        '200':
          description: The chain ID of the chain.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        description: Integer of the chain ID of the chain.
                        example: '0x7e2'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/chainID' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_chainID",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayChainIDResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayChainIdExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayChainIdExample() throws IOException {
                    KlayChainIDResponse cr = w3.klayChainID().send();
                    cr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.klay
                .chainId({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.chain_id()

            print(klay_response)
  /klay/configuration/clientVersion:
    post:
      operationId: clientVersion
      summary: '[Configuration] klay_clientVersion'
      description: |
        Returns the current client version of a Klaytn node.

        **JSONRPC:** `klay_clientVersion`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_clientVersion
      responses:
        '200':
          description: The current client version of a Klaytn node.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        description: The current client version of a Klaytn node.
                        example: Klaytn/v0.9.1+3518232250/linux-amd64/go1.11.2
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/clientVersion' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_clientVersion",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayClientVersionResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayClientVersionExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayClientVersionExample() throws IOException {
                    KlayClientVersionResponse cr = w3.klayClientVersion().send();
                    cr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.klay
                .clientVersion({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.client_version()

            print(klay_response)
  /klay/configuration/gasPrice:
    post:
      operationId: gasPrice
      summary: '[Configuration] klay_gasPrice'
      description: |
        Returns a suggestion for a gas price in peb.

        **JSONRPC:** `klay_gasPrice`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_gasPrice
      responses:
        '200':
          description: Returns a suggestion for a gas price in peb.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: Integer of the current gas price in peb
                        example: '0xAE9F7BCC00'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/gasPrice' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_gasPrice",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGasPriceResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGasPriceExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayGasPriceExample() throws IOException {
                    KlayGasPriceResponse gr = w3.klayGasPrice().send();
                    gr.getResult();
                }
            }
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.gas_price()

            print(klay_response)
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.klay
                .gasPrice({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
  /klay/configuration/gasPriceAt:
    post:
      operationId: gasPriceAt
      summary: '[Configuration] klay_gasPriceAt'
      description: |
        Returns different values based on the condition described below. The unit of the return value is peb.

        - If baseFee is undefined in the header, it returns the unit price from the governance parameter

        - If the block is a pending block, it returns the gas price of the txpool.

        - Otherwise, it returns the base fee of the given block.

        **JSONRPC:** `klay_gasPriceAt`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGasPriceAtReq'
      responses:
        '200':
          description: Integer of the current gas price in peb.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: Integer of the current gas price in peb.
                        example: '0xAE9F7BCC00'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/gasPriceAt' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_gasPriceAt",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x64"]
            }'
        - lang: java
          label: Java
          source: |

            //import org.web3j.protocol.klaytn.core.method.response.KlayGasPriceAtResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGasPriceAtExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayGasPriceAtExample() throws IOException {
            //        KlayGasPriceAtResponse gr = w3.klayGasPriceAt(
            //            "0x64")
            //        .send();
            //        gr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockNumber = 1;
              provider.klay
                .gasPriceAt({ blockNumber }, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            baseFee = "0x64"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.gas_price_at(baseFee)

            print(klay_response)
  /klay/configuration/getChainConfig:
    post:
      operationId: .getChainConfig
      summary: '[Configuration] klay_getChainConfig'
      description: |
        Returns the configuration of the chain.

        **JSONRPC:** `klay_getChainConfig`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetChainConfigReq'
      responses:
        '200':
          description: The chain configuration of the chain.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetChainConfigResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getChainConfig' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getChainConfig",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [100]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGetChainConfigResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetChainConfigExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    void klayGetChainConfigExample() throws IOException {
                    Integer blogNumberOrTag = 100;
                    KlayGetChainConfigResponse response = w3.klayGetChainConfig(blogNumberOrTag).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockNumberOrTag = 100;
              provider.klay
                .getChainConfig({ blockNumberOrTag }, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = 100

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_chain_config()

            print(klay_response)
  /klay/configuration/isParallelDBWrite:
    post:
      operationId: isParallelDBWrite
      summary: '[Configuration] klay_isParallelDBWrite'
      description: |
        Returns true if the node is writing blockchain data in parallel manner. It is enabled by default.

        **JSONRPC:** `klay_isParallelDBWrite`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_isParallelDBWrite
      responses:
        '200':
          description: Returns true if the node is writing blockchain data in parallel manner.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: boolean
                        description: true means the node is writing blockchain data in parallel manner. It is false if the node is writing the data in serial manner.
                        example: true
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/isParallelDBWrite' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_isParallelDBWrite",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayIsParallelDBWriteResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayIsParallelDBWriteExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    void klayIsParallelDBWriteExample() throws IOException {
                    KlayIsParallelDBWriteResponse response = w3.klayIsParallelDBWrite().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.klay
                .isParallelDBWrite({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.is_parallel_db_write()

            print(klay_response)
  /klay/configuration/isSenderTxHashIndexingEnabled:
    post:
      operationId: isSenderTxHashIndexingEnabled
      summary: '[Configuration] klay_isSenderTxHashIndexingEnabled'
      description: |
        Returns true if the node is indexing sender transaction hash to transaction hash mapping information. It is disabled by default and can be enabled by --sendertxhashindexing.

        **JSONRPC:** `klay_isSenderTxHashIndexingEnabled`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_isSenderTxHashIndexingEnabled
      responses:
        '200':
          description: Returns true if the node is indexing sender transaction hash to transaction hash mapping information.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: boolean
                        description: '`true` means the node is indexing sender transaction hash to transaction hash mapping information.'
                        example: true
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/isSenderTxHashIndexingEnabled' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_isSenderTxHashIndexingEnabled",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayIsSenderTxHashIndexingEnabledResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayIsSenderTxHashIndexingEnabledExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayIsSenderTxHashIndexingEnabledExample() throws IOException {
                    KlayIsSenderTxHashIndexingEnabledResponse response = w3.klayIsSenderTxHashIndexingEnabled().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.klay
                .isSenderTxHashIndexingEnabled({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.is_sender_tx_hash_indexing_enabled()

            print(klay_response)
  /klay/configuration/protocolVersion:
    post:
      operationId: protocolVersion
      summary: '[Configuration] klay_protocolVersion'
      description: |
        Returns the Klaytn protocol version of the node. The current version (as of v1.9.0) of Cypress/Baobab is istanbul/65.

        **JSONRPC:** `klay_protocolVersion`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_protocolVersion
      responses:
        '200':
          description: Returns the Klaytn protocol version of the node.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: The Klaytn protocol version of the node.
                        example: '0xAE9F7BCC00'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/protocolVersion' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_protocolVersion",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayProtocolVersionResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayProtocolVersionExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    void klayProtocolVersionExample() throws IOException {
                    KlayProtocolVersionResponse response = w3.klayProtocolVersion().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.klay.protocolVersion({}, (err, data, response) => {
                console.log(data);
              });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.protocol_version()

            print(klay_response)
  /klay/configuration/rewardbase:
    post:
      operationId: rewardbase
      summary: '[Configuration] klay_rewardbase'
      description: |
        Returns the rewardbase of the current node. Rewardbase is the address of the account where the block rewards goes to. It is only required for CNs.

        **JSONRPC:** `klay_rewardbase`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_rewardbase
      responses:
        '200':
          description: Returns the rewardbase of the current node
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: 20-byte DATA
                        description: Address.
                        example: '0x96Fd91f34Cc8da9f6338C106Ba37aA8B48FB4Fa5'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/rewardbase' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_rewardbase",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayRewardbaseResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayRewardBaseExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    void klayRewardBaseExample() throws IOException {
                    KlayRewardbaseResponse response = w3.klayRewardbase().send();
                    response.getResult();
                }
                
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.klay.rewardbase({}, (err, data, response) => {
                console.log(data);
              });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.rewardbase()

            print(klay_response)
  /klay/filter/getFilterChanges:
    post:
      operationId: getFilterChanges
      summary: '[Filter] klay_getFilterChanges'
      description: |
        Polling method for a filter, which returns an array of logs which occurred since last poll.

        **JSONRPC:** `klay_getFilterChanges`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_getFilterChanges
                    params:
                      type: array
                      items:
                        type: string
                        title: QUANTITY
                      description: The filter id (e.g., "0x16" // 22).
                      example:
                        - '0x16'
      responses:
        '200':
          description: Returns an array of logs which occurred since last poll.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetFilterChangesResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getFilterChanges' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getFilterChanges",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xd32fd16b6906e67f6e2b65dcf48fc272"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGetFilterChangesResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetFilterChangesExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayGetFilterChangesExample() throws IOException {
                    KlayGetFilterChangesResponse response = w3.klayGetFilterChanges("0x1aa7b9746d4192e90fb0acd89c514375").send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const quantity = "0x16";
              provider.klay
                .getFilterChanges(quantity, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            quantity = "0x63000c8f11e790cb4c93b0659319a159"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_filter_changes(quantity)

            print(klay_response)
  /klay/filter/getFilterLogs:
    post:
      operationId: getFilterLogs
      summary: '[Filter] klay_getFilterLogs'
      description: |
        Returns an array of all logs matching filter with given id, which has been obtained using klay_newFilter.Note that filter ids returned by other filter creation functions, such as klay_newBlockFilter or klay_newPendingTransactionFilter, cannot be used with this function.

        The execution of this API can be limited by two node configurations to manage resources of Klaytn node safely.

        - The number of maximum returned results in a single query (Default: 10,000).

        - The execution duration limit of a single query (Default: 10 seconds).

        **JSONRPC:** `klay_getFilterLogs`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_getFilterLogs
                    params:
                      type: array
                      items:
                        type: string
                        title: QUANTITY
                      description: The filter id
                      example:
                        - '0xd32fd16b6906e67f6e2b65dcf48fc272'
      responses:
        '200':
          description: Returns an array of all logs matching filter with given id. See klay_getFilterChanges.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetFilterLogsResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getFilterLogs' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getFilterLogs",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xd32fd16b6906e67f6e2b65dcf48fc272"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGetFilterLogsResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetFilterLogsExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayGetFilterLogsExample() throws IOException {
                    String quantity = "0x16";

                    KlayGetFilterLogsResponse response = w3.klayGetFilterLogs(quantity).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const quantity = "0x16";
              provider.klay
                .getFilterLogs(quantity, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            quantity = "0x16"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_filter_logs(quantity)

            print(klay_response)
  /klay/filter/getLogs:
    post:
      operationId: getLogs
      summary: '[Filter] klay_getLogs'
      description: |
        Returns an array of all logs matching a given filter object.

        The execution of this API can be limited by two node configurations to manage resources of Klaytn node safely.

        -The number of maximum returned results in a single query (Default: 10,000).

        -The execution duration limit of a single query (Default: 10 seconds).

        **NOTE**: In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.

        **JSONRPC:** `klay_getLogs`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_getLogs
                    params:
                      type: array
                      items:
                        $ref: '#/components/schemas/FilterOptions'
                      description: The filter options.
                      example:
                        - fromBlock: '0x1'
                          toBlock: latest
                          address: '0x87ac99835e67168d4f9a40580f8f5c33550ba88b'
      responses:
        '200':
          description: Returns an array of all logs matching a given filter object.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetLogsResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getLogs' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getLogs",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [{"fromBlock":"0x1","toBlock":"latest","address":"0x87ac99835e67168d4f9a40580f8f5c33550ba88b"}]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.FilterOptions;
            import org.web3j.protocol.klaytn.core.method.response.KlayGetLogsResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetLogsExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayGetLogsExample() throws IOException {
                    FilterOptions options = new FilterOptions();
                    options.setFromBlock("latest");
                    options.setToBlock("latest");
                    options.setAddress("0x87ac99835e67168d4f9a40580f8f5c33550ba88b");
                    KlayGetLogsResponse response = w3.klayGetLogs(options).send();
                    response.getResult();
                }

            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const filterOptions = {
                fromBlock: "latest",
                toBlock: "latest",
                address: "0x87ac99835e67168d4f9a40580f8f5c33550ba88b",
              };

              provider.klay
                .getLogs(filterOptions, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            filterOptions = {
                "fromBlock": "latest",
                "toBlock": "latest",
                "address": "0x87ac99835e67168d4f9a40580f8f5c33550ba88b"
            }

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_logs(filterOptions)

            print(klay_response)
  /klay/filter/newBlockFilter:
    post:
      operationId: newBlockFilter
      summary: '[Filter] klay_newBlockFilter'
      description: |
        Creates a filter in the node, to notify when a new block arrives. To check if the state has changed, call klay_getFilterChanges.

        **JSONRPC:** `klay_newBlockFilter`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_newBlockFilter
      responses:
        '200':
          description: Returns a filter id.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: A filter id.
                        example: '0xc2f2e8168a7e38b5d979d0f7084130ee'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/newBlockFilter' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_newBlockFilter",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayNewBlockFilterResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayNewBlockFilterExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    void klayNewBlockFilterExample() throws IOException {
                    KlayNewBlockFilterResponse response = w3.klayNewBlockFilter().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.klay.newBlockFilter({}, (err, data, response) => {
                console.log(data);
              });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.new_block_filter()

            print(klay_response)
  /klay/filter/newFilter:
    post:
      operationId: newFilter
      summary: '[Filter] klay_newFilter'
      description: |
        Creates a filter object, based on filter options, to notify when the state changes (logs).
        - To check if the state has changed, call klay_getFilterChanges.
        - To obtain all logs matching the filter created by klay_newFilter, call klay_getFilterLogs.

        **A note on specifying topic filters:** Topics are order-dependent. A transaction with a log with topics [A, B] will be matched by the following topic filters:
        - [] "anything"
        - [A] "A in first position (and anything after)"
        - [null, B] "anything in first position AND B in second position (and anything after)"
        - [A, B] "A in first position AND B in second position (and anything after)"
        - [[A, B], [A, B]] "(A OR B) in first position AND (A OR B) in second position (and anything after)"

        **NOTE:** In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.

        **JSONRPC:** `klay_newFilter`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayNewFilterReq'
      responses:
        '200':
          description: Returns a filter id
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayNewFilterResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/newFilter' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_newFilter",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                {
                  "fromBlock":"earliest",
                  "toBlock":"latest",
                  "address":"0x87ac99835e67168d4f9a40580f8f5c33550ba88b",
                  "topics":[
                    "0xd596fdad182d29130ce218f4c1590c4b5ede105bee36690727baa6592bd2bfc8"
                  ]
                }
              ]
            }'
        - lang: java
          label: Java
          source: |
            import java.util.List;

            import org.web3j.protocol.klaytn.core.method.response.FilterOptions;
            import org.web3j.protocol.klaytn.core.method.response.KlayNewFilterResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayNewFilterExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    void klayNewFilterExample() throws IOException {
                    FilterOptions filterOptions = new FilterOptions();
                    filterOptions.setFromBlock("latest");
                    filterOptions.setToBlock("latest");
                    filterOptions.setAddress("0x87ac99835e67168d4f9a40580f8f5c33550ba88b");
                    filterOptions.setTopics(List.of("0xd596fdad182d29130ce218f4c1590c4b5ede105bee36690727baa6592bd2bfc8"));
                    KlayNewFilterResponse response = w3.klayNewFilter(filterOptions).send();
                    response.getResult();
                }

            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const fromBlock = "earliest";
              const toBlock = "latest";
              const address = "0x87ac99835e67168d4f9a40580f8f5c33550ba88b";
              const topics = [
                "0xd596fdad182d29130ce218f4c1590c4b5ede105bee36690727baa6592bd2bfc8",
              ];
              provider.klay.newFilter(
                { fromBlock, toBlock, address, topics },
                {},
                (err, data, response) => {
                  console.log(data);
                },
              );
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            filterOptions = {
                "fromBlock": "earliest",
                "toBlock": "latest",
                "address": "0x87ac99835e67168d4f9a40580f8f5c33550ba88b",
                "topics": ["0xd596fdad182d29130ce218f4c1590c4b5ede105bee36690727baa6592bd2bfc8"]
            }

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.new_filter(filterOptions)

            print(klay_response)
  /klay/filter/newPendingTransactionFilter:
    post:
      operationId: newPendingTransactionFilter
      summary: '[Filter] klay_newPendingTransactionFilter'
      description: |
        Creates a filter in the node, to notify when new pending transactions arrive. To check if the state has changed, call klay_getFilterChanges.

        **JSONRPC:** `klay_newPendingTransactionFilter`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_newPendingTransactionFilter
      responses:
        '200':
          description: Returns a filter id.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: A filter id.
                        example: '0x90cec22a723fcc725fb2462733c2880f'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/newPendingTransactionFilter' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_newPendingTransactionFilter",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayNewPendingTransactionFilterResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayNewPendingTransactionFilterExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    void klayNewPendingTransactionFilterExample() throws IOException {
                    KlayNewPendingTransactionFilterResponse response = w3.klayNewPendingTransactionFilter().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.klay.newPendingTransactionFilter({}, (err, data, response) => {
                console.log(data);
              });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.new_pending_transaction_filter()

            print(klay_response)
  /klay/filter/subscribe:
    post:
      operationId: subscribe
      summary: '[Filter] klay_subscribe'
      description: |
        Creates a new subscription to specific events by using either RPC Pub/Sub over WebSockets or filters over HTTP. It allows clients to wait for events instead of polling for them.

        The node will return a subscription id for each subscription created. For each event that matches the subscription, a notification with relevant data is sent together with the subscription id. If a connection is closed, all subscriptions created over the connection are removed.

        **JSONRPC:** `klay_subscribe`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_subscribe
                    params:
                      type: array
                      items:
                        title: NotificationType
                        type: string
                        enum:
                          - newHeads
                          - logs
                      description: 'A notification type: "newHeads" or "logs"'
                      example:
                        - newHeads
      responses:
        '200':
          description: Return a subscription id when a subscription is created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        example: '0xbdab16c8e4ae1b9e6930c78359de3e0e'
                        description: A subscription id when a subscription is created. For each event that matches the subscription, a notification with relevant data will be delivered as well.
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/subscribe' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_subscribe",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["newHeads"]
            }'
  /klay/filter/uninstallFilter:
    post:
      operationId: uninstallFilter
      summary: '[Filter] klay_uninstallFilter'
      description: |
        Uninstalls a filter with given id. Should always be called when watch is no longer needed. Additionally, filters timeout when they are not requested with klay_getFilterChanges for a period of time.

        **JSONRPC:** `klay_uninstallFilter`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_uninstallFilter
                    params:
                      type: array
                      items:
                        type: string
                        title: Filter
                      description: The filter id
                      example:
                        - '0xd32fd16b6906e67f6e2b65dcf48fc272'
      responses:
        '200':
          description: Return true if the filter was successfully uninstalled, otherwise false.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: boolean
                        description: true if the filter was successfully uninstalled, otherwise false.
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/uninstallerFilter' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_uninstallFilter",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xd32fd16b6906e67f6e2b65dcf48fc272"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayUninstallFilterResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayUninstallFilterExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    void klayUninstallFilterExample() throws IOException {
                    String filter = "0xd32fd16b6906e67f6e2b65dcf48fc272";
                    KlayUninstallFilterResponse response = w3.klayUninstallFilter(filter).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const quantity = "0xd32fd16b6906e67f6e2b65dcf48fc272";

              provider.klay
                .uninstallFilter(quantity, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            quantity = "0xd32fd16b6906e67f6e2b65dcf48fc272"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.uninstall_filter(quantity)

            print(klay_response)
  /klay/filter/unsubscribe:
    post:
      operationId: unsubscribe
      summary: '[Filter] klay_unsubscribe'
      description: |
        Cancels the subscription with a specific subscription id by using either RPC Pub/Sub over WebSockets or filters over HTTP. Only the connection that created a subscription can unsubscribe from it.

        **JSONRPC:** `klay_unsubscribe`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_unsubscribe
                    params:
                      type: array
                      description: A subscription id.
                      items:
                        title: SubscriptionId
                        type: string
                        format: hex
                        description: A subscription id.
                      example:
                        - '0xab8ac7a4045025d0c2807d63060eea6d'
      responses:
        '200':
          description: Return true if the subscription was successfully canceled, otherwise false.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: boolean
                        description: true if the subscription was successfully canceled, otherwise false.
                        example: true
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/unsubscribe' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_unsubscribe",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xab8ac7a4045025d0c2807d63060eea6d"]
            }'
  /klay/gas/feeHistory:
    post:
      operationId: feeHistory
      summary: '[Gas] klay_feeHistory'
      description: |
        Returns base fee per gas and transaction effective priority fee per gas history for the requested block range if available.

        **NOTE:** This API is effective after Klaytn v1.8.0

        **JSONRPC:** `klay_feeHistory`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayFeeHistoryReq'
      responses:
        '200':
          description: Returns base fee per gas and transaction effective priority fee per gas history for the requested block range if available.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayFeeHistoryResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/feeHistory' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_feeHistory",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x10", "latest", [0.1, 0.2, 0.3]]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayFeeHistoryResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;
            import java.util.List;

            public class KlayFeeHistoryExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayFeeHistoryExample() throws IOException {
                    KlayFeeHistoryResponse fr = w3.klayFeeHistory(
                        "0x10",
                        "latest",
                        List.of(0.1, 0.2, 0.3))
                    .send();
                    fr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockCount = "0x10";
              const lastBlock = "latest";
              const rewardPercentiles = [0.1, 0.2, 0.3];
              provider.klay
                .feeHistory(
                  blockCount,
                  lastBlock,
                  rewardPercentiles,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockCount = "0x10"
            lastBlock = "latest"
            rewardPercentiles = [0.1, 0.2, 0.3]

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.fee_history(blockCount, lastBlock, rewardPercentiles)

            print(klay_response)
  /klay/gas/lowerBoundGasPrice:
    post:
      operationId: lowerBoundGasPrice
      summary: '[Gas] klay_lowerBoundGasPrice'
      description: |
        Returns lower bound gas price.

        **JSONRPC:** `klay_lowerBoundGasPrice`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_lowerBoundGasPrice
      responses:
        '200':
          description: Returns lower bound gas price.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: Lower bound gas price.
                        example: '0xae9f7bcc00'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/lowerBoundGasPrice' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_lowerBoundGasPrice",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayLowerBoundGasPriceResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayLowerBoundGasPriceExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    void klayLowerBoundGasPriceExample() throws IOException {
                    KlayLowerBoundGasPriceResponse response = w3.klayLowerBoundGasPrice().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.klay.lowerBoundGasPrice({}, (err, data, response) => {
                console.log(data);
              });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.lower_bound_gas_price()

            print(klay_response)
  /klay/gas/maxPriorityFeePerGas:
    post:
      operationId: maxPriorityFeePerGas
      summary: '[Gas] klay_maxPriorityFeePerGas'
      description: |
        Returns a suggestion for a gas tip cap for dynamic fee transactions in peb.

        **NOTE:** This API is effective after Klaytn v1.8.0

        **JSONRPC:** `klay_maxPriorityFeePerGas`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_maxPriorityFeePerGas
      responses:
        '200':
          description: Returns a suggestion for a gas tip cap for dynamic fee transactions in peb.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: Integer of the current max priority fee per gas
                        example: '0xAE9F7BCC00'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/maxPriorityFeePerGas' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_maxPriorityFeePerGas",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayMaxPriorityFeePerGasResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayMaxPriorityFeePerGasExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    void whenRequestValid_ThenCall200ResponseReturns() throws IOException {
                    KlayMaxPriorityFeePerGasResponse response = w3.klayMaxPriorityFeePerGas().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.klay.maxPriorityFeePerGas({}, (err, data, response) => {
                console.log(data);
              });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.max_priority_fee_per_gas()

            print(klay_response)
  /klay/gas/upperBoundGasPrice:
    post:
      operationId: upperBoundGasPrice
      summary: '[Gas] klay_upperBoundGasPrice'
      description: |
        Returns upper bound gas price.

        **JSONRPC:** `klay_upperBoundGasPrice`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_upperBoundGasPrice
      responses:
        '200':
          description: Returns upper bound gas price.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: Upper bound gas price.
                        example: '0xae9f7bcc00'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/upperBoundGasPrice' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_upperBoundGasPrice",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayUpperBoundGasPriceResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayUpperBoundGasPriceExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    void klayUpperBoundGasPriceExample() throws IOException {
                    KlayUpperBoundGasPriceResponse response = w3.klayUpperBoundGasPrice().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              provider.klay
                .upperBoundGasPrice({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.upper_bound_gas_price()

            print(klay_response)
  /klay/miscellaneous/getStakingInfo:
    post:
      operationId: getStakingInfo
      summary: '[Miscellaneous] klay_getStakingInfo'
      tags:
        - klay
      description: |
        The getStakingInfo returns staking information at a specific block. The result includes the following information.
        - BlockNum: The block number at which the staking information is given.
        - CouncilNodeAddrs: The addresses of the consensus node.
        - CouncilRewardAddrs: The addresses to which the block reward of the associated nodes is sent.
        - CouncilStakingAddrs: The contract addresses in which the associated nodes deploy for staking.
        - CouncilStakingAmounts: The amount of KLAY which the associated nodes stake.
        - Gini: Gini coefficient.
        - KIRAddr: The contract address of KIR.
        - PoCAddr: The contract address of KGF. PoC is the previous name of KGF.
        - UseGini: The boolean value whether or not the Gini coefficient is used.

        Note that the order of all addresses and the staking amounts are matched.

        **JSONRPC:** `klay_getStakingInfo`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetStakingInfoReq'
      responses:
        '200':
          description: Returns staking information at a specific block
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetStakingInfoResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/getStakingInfo' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_getStakingInfo",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["latest"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayGetStakingInfoResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetStakingInfoExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    void klayGetStakingInfoExample() throws IOException {
                    String blockTag = "latest";

                    KlayGetStakingInfoResponse response = w3
                            .klayGetStakingInfo(blockTag)
                            .send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const blockNumberOrTag = "latest";

              provider.klay
                .getStakingInfo(blockNumberOrTag, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_staking_info(blockTag)

            print(klay_response)
  /klay/miscellaneous/nodeAddress:
    post:
      operationId: nodeAddress
      summary: '[Miscellaneous] klay_nodeAddress'
      description: |
        The nodeAddress property provides the address of the node that a user is using. It is derived from the nodekey and used to sign consensus messages.

        **JSONRPC:** `klay_nodeAddress`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_nodeAddress
      responses:
        '200':
          description: Return 20 BYTE address of a node
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: 20 BYTE address of a node
                        example: '0x86a68a935953996509e724c6afd521df8d7d13ba'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/nodeAddress' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_nodeAddress",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlayNodeAddressResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlayGetNodeAddressExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    void klayGetNodeAddressExample() throws IOException {
                    KlayNodeAddressResponse response = w3.klayNodeAddress().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.klay.nodeAddress({}, (err, data, response) => {
                console.log(data);
              });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.node_address()

            print(klay_response)
  /klay/miscellaneous/recoverFromTransaction:
    post:
      operationId: recoverFromTransaction
      summary: '[Miscellaneous] klay_recoverFromTransaction'
      description: |
        Using this API, users can recover from transaction data.


        **JSONRPC:** `klay_recoverFromTransaction`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayRecoverFromTransactionReq'
      responses:
        '200':
          description: The result of recover from transaction.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        example: '0xe15cd70a41dfb05e7214004d7d054801b2a2f06b'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/recoverFromTransaction' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_recoverFromTransaction",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x08f88608850ba43b7400827b0c94c40b6909eb7085590e1c26cb3becc25368e249e9880de0b6b3a764000094e15cd70a41dfb05e7214004d7d054801b2a2f06bf847f845820fe9a090421871e8fd77e08b6a72760006a15184a96cfc39c7486ea948d11fd830ae8aa05876248aa8dc0783d782e584e6f8d9bf977c698210a0eab3e754192d0954de65", "latest"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import org.web3j.protocol.klaytn.core.method.response.KlayRecoverFromTransactionResponse;

            import java.io.IOException;

            public class KlayRecoverFromTransactionExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayRecoverFromTransaction() throws IOException {
                    String rlpEncoded = "0x08f88608850ba43b7400827b0c94c40b6909eb7085590e1c26cb3becc25368e249e9880de0b6b3a764000094e15cd70a41dfb05e7214004d7d054801b2a2f06bf847f845820fe9a090421871e8fd77e08b6a72760006a15184a96cfc39c7486ea948d11fd830ae8aa05876248aa8dc0783d782e584e6f8d9bf977c698210a0eab3e754192d0954de65";
                    String blockNumber = "latest";
                    KlayRecoverFromTransactionResponse response = w3.klayRecoverFromTransaction(rlpEncoded, blockNumber).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const rlpEncoded =
                "0x08f88608850ba43b7400827b0c94c40b6909eb7085590e1c26cb3becc25368e249e9880de0b6b3a764000094e15cd70a41dfb05e7214004d7d054801b2a2f06bf847f845820fe9a090421871e8fd77e08b6a72760006a15184a96cfc39c7486ea948d11fd830ae8aa05876248aa8dc0783d782e584e6f8d9bf977c698210a0eab3e754192d0954de65";
              const blockNumber = "latest";

              provider.klay
                .recoverFromTransaction(
                  rlpEncoded,
                  blockNumber,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            rlpEncoded = '0x08f88608850ba43b7400827b0c94c40b6909eb7085590e1c26cb3becc25368e249e9880de0b6b3a764000094e15cd70a41dfb05e7214004d7d054801b2a2f06bf847f845820fe9a090421871e8fd77e08b6a72760006a15184a96cfc39c7486ea948d11fd830ae8aa05876248aa8dc0783d782e584e6f8d9bf977c698210a0eab3e754192d0954de65'
            blockNumber = 'latest'

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.recover_from_transaction(rlpEncoded, blockNumber)

            print(klay_response)
  /klay/miscellaneous/recoverFromMessage:
    post:
      operationId: recoverFromMessage
      summary: '[Miscellaneous] klay_recoverFromMessage'
      description: |
        Using this API, users can recover from message data.

        **JSONRPC:** `klay_recoverFromMessage`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayRecoverFromMessageReq'
      responses:
        '200':
          description: The result of recover from message.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        example: '0xa2a8854b1802d8cd5de631e690817c253d6a9153'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/recoverFromMessage' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_recoverFromMessage",
              "id": 1,
              "jsonrpc": "2.0",
              "params":["0xA2a8854b1802D8Cd5De631E690817c253d6a9153", "0xdeadbeef", "0x1e6338d6e4a8d688a25de78cf2a92efec9a92e52eb8425acaaee8c3957e68cdb3f91bdc483f0ed05a0da26eca3be4c566d087d90dc2ca293be23b2a9de0bcafc1c", "latest"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import org.web3j.protocol.klaytn.core.method.response.KlayRecoverFromMessageResponse;

            import java.io.IOException;

            public class KlayRecoverFromMessageExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void klayRecoverFromMessage() throws IOException {
                    String address = "0xA2a8854b1802D8Cd5De631E690817c253d6a9153";
                    String message = "0xdeadbeef";
                    String signature = "0x1e6338d6e4a8d688a25de78cf2a92efec9a92e52eb8425acaaee8c3957e68cdb3f91bdc483f0ed05a0da26eca3be4c566d087d90dc2ca293be23b2a9de0bcafc1c";
                    String blockNumber = "latest";
                    KlayRecoverFromMessageResponse response = w3.klayRecoverFromMessage(address, message, signature, blockNumber).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const address = "0xA2a8854b1802D8Cd5De631E690817c253d6a9153";
              const message = "0xdeadbeef";
              const signature =
                "0x1e6338d6e4a8d688a25de78cf2a92efec9a92e52eb8425acaaee8c3957e68cdb3f91bdc483f0ed05a0da26eca3be4c566d087d90dc2ca293be23b2a9de0bcafc1c";
              const blockNumber = "latest";

              provider.klay
                .recoverFromMessage(
                  address,
                  message,
                  signature,
                  blockNumber,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = '0xA2a8854b1802D8Cd5De631E690817c253d6a9153'
            message = '0xdeadbeef'
            signature = '0x1e6338d6e4a8d688a25de78cf2a92efec9a92e52eb8425acaaee8c3957e68cdb3f91bdc483f0ed05a0da26eca3be4c566d087d90dc2ca293be23b2a9de0bcafc1c'
            blockNumber = 'latest'

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.recover_from_message(address, message, signature, blockNumber)

            print(klay_response)
  /klay/miscellaneous/sha3:
    post:
      operationId: sha3
      summary: '[Miscellaneous] klay_sha3'
      description: |
        Returns Keccak-256 (not the standardized SHA3-256) of the given data.

        **JSONRPC:** `klay_sha3`
      tags:
        - klay
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlaySha3Req'
      responses:
        '200':
          description: Return the SHA3 result of the given data.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlaySha3Resp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/klay/sha3' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "klay_sha3",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x11223344"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.KlaySha3Response;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class KlaySha3Example {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    void klaySha3Example() throws IOException {
                    String data = "0x11223344";
                    KlaySha3Response response = w3.klaySha3(data).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const data = "0x11223344";

              provider.klay
                .sha3(data, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            hashData = "0x11223344"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.sha3(hashData)

            print(klay_response)
  /klay/miscellaneous/getProof:
    post:
      summary: '[Miscellaneous] klay_getProof'
      tags:
        - klay
      operationId: getProof
      description: |
        Returns the account and storage values of the specified account including the Merkle-proof. This call can be used to verify that the data you are pulling from is not tampered with.

        **JSONRPC:** `klay_getProof`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: klay_getProof
                    params:
                      type: array
                      items:
                        anyOf:
                          - title: Address
                            type: string
                            format: 20-byte DATA
                            description: Address of the account
                          - title: Keys
                            description: Array of storage-keys which should be proofed and included
                            type: string
                            format: 32-byte DATA
                          - $ref: '#/components/schemas/BlockNumberOrTag'
                      example:
                        - '0xe5cB067E90D5Cd1F8052B83562Ae670bA4A211a8'
                        - - '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421'
                        - latest
      responses:
        '200':
          description: A account object
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetProofResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getProof' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getProof",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "0xe5cB067E90D5Cd1F8052B83562Ae670bA4A211a8",
                ["0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"],
                "latest"
              ]
            }'
        - lang: javascript
          label: Javascript
          source: null
components:
  schemas:
    IntegerBlockNumber:
      title: IntegerBlockNumber
      description: the block number with type integer
      type: number
    HexadecimalBlockNumber:
      title: HexadecimalBlockNumber
      type: string
      format: hexadecimal
      description: the block number with type hexadecimal
    BlockTag:
      title: BlockTag
      type: string
      description: the block tag [latest, pending, earliest]
    BlockHash:
      title: BlockHash
      type: string
      format: 32-byte DATA
      description: the block hash
    BlockNumberOrHashOrTag:
      oneOf:
        - $ref: '#/components/schemas/IntegerBlockNumber'
        - $ref: '#/components/schemas/HexadecimalBlockNumber'
        - $ref: '#/components/schemas/BlockTag'
        - $ref: '#/components/schemas/BlockHash'
    JsonRpcRequest:
      type: object
      required:
        - method
        - id
        - jsonrpc
      properties:
        method:
          type: string
          description: Method name
        id:
          type: integer
          default: 1
          format: int64
          description: Request ID, Random or Auto incrementation
        jsonrpc:
          type: string
          default: '2.0'
          description: JSON-RPC Version (2.0)
        params:
          type: array
          items: {}
    Address:
      title: Address
      type: string
      format: 20-byte DATA
      description: Address
    KlayAccountCreatedReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_accountCreated
        params:
          type: array
          items:
            properties:
              Address:
                $ref: '#/components/schemas/Address'
              BlockNumberOrHashOrTag:
                $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - '0xa4f42d4d2a3a13874406435500950c9bf2d783db'
            - latest
    ErrorMember:
      type: object
      title: ErrorMember
      required:
        - code
      properties:
        code:
          type: integer
          format: int64
          example: -32700
          description: |
            A Number that indicates the error type that occurred.
            This MUST be an integer.

            | code | message | description |
            |-----|-----|-------|
            | -32700   | Parse error   | invalid JSON was received by the server. An error occurred on the server while parsing the JSON text. |
            |-32602 | Invalid params | Invalid method parameter(s). |
        message:
          type: string
          example: Parse error
          description: |
            A String providing a short description of the error.
            The message SHOULD be limited to a concise single sentence.
        data:
          type: string
          description: |
            A Primitive or Structured value that contains additional information about the error.
            This may be omitted.
            The value of this member is defined by the Server (e.g. detailed error information, nested errors etc.).
    JsonRpcResponse:
      type: object
      required:
        - jsonrpc
        - id
      properties:
        jsonrpc:
          type: string
          default: '2.0'
        id:
          type: integer
          format: int64
        error:
          $ref: '#/components/schemas/ErrorMember'
        result: {}
    KlayAccountsResp:
      type: object
      properties:
        result:
          type: array
          description: Addresses owned by the client
          items:
            $ref: '#/components/schemas/Address'
          example:
            - '0xc94770007dda54cF92009BFF0dE90c06F603a09f'
    KlayDecodeAccountKeyReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_decodeAccountKey
        params:
          type: array
          description: RLP encoded account key
          items:
            title: EncodedAccountKey
            type: string
            format: DATA
          example:
            - '0x05f898a302a103e4a01407460c1c03ac0c82fd84f303a699b210c0b054f4aff72ff7dcdf01512db84e04f84b02f848e301a103e4a01407460c1c03ac0c82fd84f303a699b210c0b054f4aff72ff7dcdf01512de301a10336f6355f5b532c3c1606f18fa2be7a16ae200c5159c8031dd25bfa389a4c9c06a302a102c8785266510368d9372badd4c7f4a94b692e82ba74e0b5e26b34558b0f081447'
    KlayDecodeAccountKeyResp:
      type: object
      properties:
        result:
          type: object
          required:
            - keytype
            - key
          properties:
            keytype:
              type: number
              description: Integer value indicating account key type.
            key:
              type: array
              items:
                type: object
              description: Account key object
          example:
            key:
              - key:
                  x: '0xe4a01407460c1c03ac0c82fd84f303a699b210c0b054f4aff72ff7dcdf01512d'
                  'y': '0xa5735a23ce1654b14680054a993441eae7c261983a56f8e0da61280758b5919'
                keyType: 2
              - key:
                  keys:
                    - key:
                        x: '0xe4a01407460c1c03ac0c82fd84f303a699b210c0b054f4aff72ff7dcdf01512d'
                        'y': '0xa5735a23ce1654b14680054a993441eae7c261983a56f8e0da61280758b5919'
                      weight: 1
                    - key:
                        x: '0x36f6355f5b532c3c1606f18fa2be7a16ae200c5159c8031dd25bfa389a4c9c06'
                        'y': '0x6fdf9fc87a16ac359e66d9761445d5ccbb417fb7757a3f5209d713824596a50d'
                      weight: 1
                  threshold: 2
                keyType: 4
              - key:
                  x: '0xc8785266510368d9372badd4c7f4a94b692e82ba74e0b5e26b34558b0f081447'
                  'y': '0x94c27901465af0a703859ab47f8ae17e54aaba453b7cde5a6a9e4a32d45d72b2'
                keyType: 2
            keyType: 5
    KlayEncodeAccountKeyReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_encodeAccountKey
        params:
          type: array
          items:
            type: object
            properties:
              keytype:
                type: integer
                description: Integer value indicating account key type. For the value of each account key type, see AccountKey.
              key:
                type: object
                description: Account key object
          example:
            - keyType: 1
              key: {}
    KlayEncodeAccountKeyResp:
      type: object
      properties:
        result:
          type: string
          description: RLP encoded account key
          format: DATA
          example: '0x01c0'
    KlayGetAccountReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getAccount
        params:
          type: array
          items:
            properties:
              Address:
                $ref: '#/components/schemas/Address'
              BlockNumberOrHashOrTag:
                $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - '0x3111a0577f322e8fb54f78d9982a26ae7ca0f722'
            - latest
    AccountKeyLegacy:
      title: AccountKeyLegacy
      type: object
      required:
        - key
        - keyType
      description: AccountKeyLegacy is used for the account having an address derived from the corresponding key pair
      properties:
        key:
          type: object
        keyType:
          type: integer
          description: The type of AccountKeyLegacy. This must be 0x01.
    AccountKeyNil:
      title: AccountKeyNil
      type: string
    AccountKeyPublic:
      title: AccountKeyPublic
      type: object
      required:
        - key
        - keyType
      description: AccountKeyPublic is used for accounts having one public key.
      properties:
        key:
          type: object
          required:
            - x
            - 'y'
          description: Key should be a compressed public key on S256 curve.
          properties:
            x:
              type: string
              format: 32-byte DATA
              description: The x coordinate of the public key.
            'y':
              type: string
              format: 32-byte DATA
              description: The y coordinate of the public key.
        keyType:
          type: integer
          description: The type of AccountKeyPublic. This must be 0x02.
    AccountKeyFail:
      title: AccountKeyFail
      type: object
      required:
        - keyType
        - key
      description: If an account has the key AccountKeyFail, the transaction validation process always fails. It can be used for smart contract accounts so that a transaction sent from the smart contract account always fails.
      properties:
        key:
          type: object
        keyType:
          type: integer
          description: The type of AccountKeyFail. This must be 0x03.
    AccountKeyWeightedMultiSig:
      title: AccountKeyWeightedMultiSig
      type: object
      required:
        - keyType
        - Threshold
        - WeightedPublicKeys
      description: AccountKeyWeightedMultiSig is an account key type containing a threshold and WeightedPublicKeys which contains a list consisting of a public key and its weight.
      properties:
        keyType:
          type: integer
          description: The type of AccountKeyWeightedMultiSig. This must be 0x04.
        Threshold:
          type: integer
          description: Validation threshold. To be a valid transaction, the weight sum of signatures should be larger than or equal to the threshold.
        WeightedPublicKeys:
          type: array
          description: A list of weighted public keys. A weighted public key contains a compressed public key and its weight.
          items:
            type: object
            required:
              - PublicKey
              - Weight
            properties:
              PublicKey:
                type: object
                required:
                  - x
                  - 'y'
                properties:
                  x:
                    type: string
                    format: 32-byte DATA
                    description: The x coordinate of the public key.
                  'y':
                    type: string
                    format: 32-byte DATA
                    description: The y coordinate of the public key.
              Weight:
                type: integer
    AccountKeyRoleBased:
      title: AccountKeyRoleBased
      type: object
      required:
        - keyType
        - key
      description: AccountKeyRoleBased represents a role-based key
      properties:
        key:
          type: array
          description: A list of keys. A key can be any of AccountKeyNil, AccountKeyLegacy, AccountKeyPublic, AccountKeyFail, and AccountKeyWeightedMultiSig
          items:
            anyOf:
              - $ref: '#/components/schemas/AccountKeyNil'
              - $ref: '#/components/schemas/AccountKeyLegacy'
              - $ref: '#/components/schemas/AccountKeyPublic'
              - $ref: '#/components/schemas/AccountKeyFail'
              - $ref: '#/components/schemas/AccountKeyWeightedMultiSig'
        keyType:
          type: integer
          description: The type of AccountKeyRoleBased. This must be 0x05.
    KlayGetAccountResp:
      type: object
      properties:
        result:
          type: object
          description: Each account type has different attributes.
          required:
            - accType
            - account
          properties:
            accType:
              type: number
              default: 1
            account:
              type: object
              properties:
                balance:
                  type: string
                humanReadable:
                  type: boolean
                key:
                  type: object
                  properties:
                    key:
                      oneOf:
                        - $ref: '#/components/schemas/AccountKeyLegacy'
                        - $ref: '#/components/schemas/AccountKeyNil'
                        - $ref: '#/components/schemas/AccountKeyPublic'
                        - $ref: '#/components/schemas/AccountKeyFail'
                        - $ref: '#/components/schemas/AccountKeyWeightedMultiSig'
                        - $ref: '#/components/schemas/AccountKeyRoleBased'
                    keyType:
                      type: number
                nonce:
                  type: number
          example:
            accType: 1
            account:
              balance: 4985316100000000000
              humanReadable: false
              key:
                key:
                  x: '0x230037a99462acd829f317d0ce5c8e2321ac2951de1c1b1a18f9af5cff66f0d7'
                  'y': '0x18a7fb1b9012d2ac87bc291cbf1b3b2339356f1ce7669ae68405389be7f8b3b6'
                keyType: 2
              nonce: 11
    KlayGetAccountKeyReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getAccountKey
        params:
          type: array
          items:
            properties:
              Address:
                $ref: '#/components/schemas/Address'
              BlockNumberOrHashOrTag:
                $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - '0x3111a0577f322e8fb54f78d9982a26ae7ca0f722'
            - latest
    KlayGetAccountKeyResp:
      type: object
      properties:
        result:
          oneOf:
            - $ref: '#/components/schemas/AccountKeyLegacy'
            - $ref: '#/components/schemas/AccountKeyNil'
            - $ref: '#/components/schemas/AccountKeyPublic'
            - $ref: '#/components/schemas/AccountKeyFail'
            - $ref: '#/components/schemas/AccountKeyWeightedMultiSig'
            - $ref: '#/components/schemas/AccountKeyRoleBased'
          example:
            key:
              x: '0x230037a99462acd829f317d0ce5c8e2321ac2951de1c1b1a18f9af5cff66f0d7'
              'y': '0x18a7fb1b9012d2ac87bc291cbf1b3b2339356f1ce7669ae68405389be7f8b3b6'
            keyType: 2
    KlayGetBalanceReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getBalance
        params:
          type: array
          items:
            properties:
              Address:
                $ref: '#/components/schemas/Address'
              BlockNumberOrHashOrTag:
                $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - '0x3111a0577f322e8fb54f78d9982a26ae7ca0f722'
            - latest
    KlayGetBalanceResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          description: Integer of the current balance in peb.
          example: 158972490234375000
    KlayGetCodeReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getCode
        params:
          type: array
          items:
            properties:
              Address:
                $ref: '#/components/schemas/Address'
              BlockNumberOrHashOrTag:
                $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - '0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b'
            - '0x2'
    KlayGetTransactionCountReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getTransactionCount
        params:
          type: array
          items:
            properties:
              Address:
                $ref: '#/components/schemas/Address'
              BlockNumberOrHashOrTag:
                $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - '0xc94770007dda54cF92009BFF0dE90c06F603a09f'
            - latest
    KlayGetTransactionCountResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          description: Integer of the number of transactions send from this address.
          example: '0x1'
    schemas-KlayGetTransactionCountReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_isContractAccount
        params:
          type: array
          items:
            properties:
              Address:
                $ref: '#/components/schemas/Address'
              BlockNumberOrHashOrTag:
                $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - '0xc94770007dda54cF92009BFF0dE90c06F603a09f'
            - latest
    schemas-KlayGetTransactionCountResp:
      type: object
      properties:
        result:
          type: boolean
          description: true means the input parameter is an existing smart contract address.
          example: true
    KlaySignReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_sign
        params:
          type: array
          items:
            properties:
              Account:
                type: string
                title: Account
                format: 20-byte DATA
                description: Address
              Message:
                type: string
                title: Message
                format: N-byte DATA
                description: Message to sign
          example:
            - '0x9b2055d370f73ec7d8a03e965129118dc8f5bf83'
            - '0xdeadbeaf'
    KlayGetBlockByHashReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getBlockByHash
        params:
          type: array
          items:
            properties:
              BlockHash:
                type: string
                title: HashOfBlock
                format: 32-byte DATA
                description: Hash of a block.
              ReturnTransactionObject:
                type: boolean
                title: ReturnTransactionObject
                description: If true it returns the full transaction objects, if false only the hashes of the transactions.
          example:
            - '0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577'
            - true
    KlayBlock:
      type: object
      required:
        - number
        - hash
        - parentHash
        - logsBloom
        - transactionsRoot
        - stateRoot
        - receiptsRoot
        - reward
        - blockScore
        - totalBlockScore
        - extraData
        - size
        - gasUsed
        - timestamp
        - timestampFoS
        - transactions
        - governanceData
        - voteData
        - baseFeePerGas
      description: A block object, or error when no block was found
      properties:
        number:
          type: string
          format: hex
          description: The block number. null when it is pending block.
        hash:
          type: string
          format: 32-byte DATA
          description: Hash of the block. null when it is pending block.
        parentHash:
          type: string
          format: 32-byte DATA
          description: Hash of the parent block.
        logsBloom:
          type: string
          format: 256-byte DATA
          description: The bloom filter for the logs of the block. null when it is pending block.
        transactionsRoot:
          type: string
          format: 32-byte DATA
          description: The root of the transaction trie of the block.
        stateRoot:
          type: string
          format: 32-byte DATA
          description: The root of the final state trie of the block.
        receiptsRoot:
          type: string
          format: 32-byte DATA
          description: The root of the receipts trie of the block.
        reward:
          type: string
          format: 20-byte DATA
          description: The address of the beneficiary to whom the block rewards were given.
        blockScore:
          type: string
          format: hex
          description: Former difficulty. Always 1 in the BFT consensus engine
        totalBlockScore:
          type: string
          format: hex
          description: Integer of the total blockScore of the chain until this block.
        extraData:
          type: string
          format: DATA
          description: The "extra data" field of this block.
        size:
          type: string
          format: hex
          description: Integer the size of this block in bytes.
        gasUsed:
          type: string
          format: hex
          description: The total used gas by all transactions in this block.
        timestamp:
          type: string
          format: hex
          description: The unix timestamp for when the block was collated.
        timestampFoS:
          type: string
          format: hex
          description: The fraction of a second of the timestamp for when the block was collated.
        transactions:
          type: array
          items:
            oneOf:
              - type: string
                format: 32-byte DATA
                description: Hash of a transaction.
              - type: object
                required:
                  - hash
                properties:
                  hash:
                    type: string
                    format: 32-byte DATA
                    description: Hash of the transaction.
                additionalProperties: true
          description: Array of transaction objects, or 32-byte transaction hashes depending on the last given parameter.
        governanceData:
          type: string
          format: DATA
          description: RLP encoded governance configuration
        voteData:
          type: string
          format: DATA
          description: RLP encoded governance vote of the proposer
        baseFeePerGas:
          type: string
          format: hex
          description: The base fee per gas. It has a meaningful value when EthTxTypeCompatible and Magma hardforks are activated.
      example:
        baseFeePerGas: '0x0'
        blockscore: '0x1'
        extraData: '0xda83010800846b6c617989676f312e31362e31338664617277696e0000000000f89ed5949712f943b296758aaae79944ec975884188d3a96b841ddfdf7e2cb0a93538f757f87f23a93ee35df703c781c6f15e31e4978ecdfb3501fc00924372b9a01df2bc452f2a924c242d83580183d131c47e49a25b78f625201f843b841b9b6034d5a8c5f5b057274cda4f427614cd1f448ee781f4c4322861d1361d09d47d6030f2b69a26cb426db984f54e71f8c112fbf882930ccd715d595e8d8307500'
        gasUsed: '0x0'
        governanceData: 0x
        hash: '0xe882d7a16f38126dc0c507f990b3fe18fa2d3a380002538581327abe96ca6edc'
        logsBloom: '0x
        number: '0x1e67'
        parentHash: '0x28b1c054346c3bd083741c757a750dcabf94b6d50c7f87158753544e96e73550'
        receiptsRoot: '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'
        reward: '0x4b2c736fd05c2e2da3ccbd001a395a444f16a861'
        size: '0x272'
        stateRoot: '0xdf9885621c9e6e75912ca94d6987bcb1b54fef0e4a99cbec5e68f1ffc7468a78'
        timestamp: '0x62130beb'
        timestampFoS: '0x0'
        totalBlockScore: '0x1e68'
        transactions: []
        transactionsRoot: '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'
        voteData: 0x
    KlayGetBlockByHashResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/KlayBlock'
    BlockNumberOrTag:
      oneOf:
        - $ref: '#/components/schemas/IntegerBlockNumber'
        - $ref: '#/components/schemas/HexadecimalBlockNumber'
        - $ref: '#/components/schemas/BlockTag'
    KlayGetBlockByNumberReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getBlockByNumber
        params:
          type: array
          items:
            properties:
              BlockNumberOrTag:
                $ref: '#/components/schemas/BlockNumberOrTag'
              Boolean:
                type: boolean
                title: Boolean
                description: If true it returns the full transaction objects, if false only the hashes of the transactions.
          example:
            - '0x1b4'
            - true
    KlayGetBlockByNumberResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/KlayBlock'
    KlayGetBlockReceiptsReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getBlockReceipts
        params:
          type: array
          description: Hash of a block
          items:
            type: string
            title: HashOfBlock
            format: 32-byte DATA
            description: Hash of a block.
          example:
            - '0xdc762ed0274496e2a42278e2648d910d82468687b5415bb5eb058a96a0b93c30'
    KlayGetBlockReceiptsResp:
      type: object
      properties:
        result:
          type: array
          items:
            type: object
            description: A Block Receipts
          example:
            - blockHash: '0xbbf314246e4b3578790ee48ada42111bc67708a4539373ccc2feb5d88833d839'
              blockNumber: '0x83db764'
              contractAddress: null
              effectiveGasPrice: '0x5d21dba00'
              feePayer: '0x5e6b99bca5a21818d40d12c56194674989146fc8'
              feePayerSignatures:
                - V: '0x7f5'
                  R: '0xfd3bf3bb2ee88b4a3399c0a87d21d1bd6f87f1510da495dad7d106774d882a95'
                  S: '0x17f88f413d72e15a0352b594bb138f5150c0eb68b673a56852f25d0d3a01f161'
              from: '0x95b4cef2d1d6a0b22b339306cea3aff74548cf83'
              gas: '0x61a80'
              gasPrice: '0xba43b7400'
              gasUsed: '0x23b6e'
              input: '0x202ee0ed000000000000000000000000000000000000000000000000000000000000e92d000000000000000000000000000000000000000000000000000000172f6e3700'
              logs:
                - address: '0x5266b74a8063e08e603bfbfc1ede4d71b8245dcd'
                  topics:
                    - '0x0109fc6f55cf40689f02fbaad7af7fe7bbac8a3d2186600afc7d3e10cac60271'
                    - '0x000000000000000000000000000000000000000000000000000000000000e92d'
                    - '0x00000000000000000000000095b4cef2d1d6a0b22b339306cea3aff74548cf83'
                  data: '0x0000000000000000000000000000000000000000000000000000000065518cbe'
                  blockNumber: '0x83db764'
                  transactionHash: '0x3aed1cf24976a3f89944bb06825db8a1fb3df2741e16b1b1922d6d0db9357856'
                  transactionIndex: '0x0'
                  blockHash: '0xbbf314246e4b3578790ee48ada42111bc67708a4539373ccc2feb5d88833d839'
                  logIndex: '0x0'
                  removed: false
                - address: '0x5266b74a8063e08e603bfbfc1ede4d71b8245dcd'
                  topics:
                    - '0x92e98423f8adac6e64d0608e519fd1cefb861498385c6dee70d58fc926ddc68c'
                    - '0x000000000000000000000000000000000000000000000000000000172f6e3700'
                    - '0x000000000000000000000000000000000000000000000000000000000000e92d'
                    - '0x00000000000000000000000095b4cef2d1d6a0b22b339306cea3aff74548cf83'
                  data: 0x
                  blockNumber: '0x83db764'
                  transactionHash: '0x3aed1cf24976a3f89944bb06825db8a1fb3df2741e16b1b1922d6d0db9357856'
                  transactionIndex: '0x0'
                  blockHash: '0xbbf314246e4b3578790ee48ada42111bc67708a4539373ccc2feb5d88833d839'
                  logIndex: '0x1'
                  removed: false
                - address: '0x5266b74a8063e08e603bfbfc1ede4d71b8245dcd'
                  topics:
                    - '0x0559884fd3a460db3073b7fc896cc77986f16e378210ded43186175bf646fc5f'
                    - '0x000000000000000000000000000000000000000000000000000000172f6e3700'
                    - '0x000000000000000000000000000000000000000000000000000000000000e92d'
                  data: '0x0000000000000000000000000000000000000000000000000000000065518cbe'
                  blockNumber: '0x83db764'
                  transactionHash: '0x3aed1cf24976a3f89944bb06825db8a1fb3df2741e16b1b1922d6d0db9357856'
                  transactionIndex: '0x0'
                  blockHash: '0xbbf314246e4b3578790ee48ada42111bc67708a4539373ccc2feb5d88833d839'
                  logIndex: '0x2'
                  removed: false
              logsBloom: '0x00000000000000000020000000000000400000000000000000000000000000000000000000000000040000000020000000000000000200000000000000000000000000000000000000000000002000000000000001000000000100000000000000000000000000001000000000000001000000000400000000008000100000000000000000000000000000000000000000000c80000000000000000000000000000000001000000000000000000000000000000000000000000400000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000'
              nonce: '0xe92c'
              senderTxHash: '0x557b98f94afd1270ba13c9f71c0b9ab862437ff155850a63d798156641b62368'
              signatures:
                - V: '0x7f5'
                  R: '0xc8817da92672f512af1573d50f998abd785013ba077760f7496550c0b98ea200'
                  S: '0x16d5a6a393488f002d63596f55d7b3c2425feff71df23cf44f90d48c88841529'
              status: '0x1'
              to: '0x5266b74a8063e08e603bfbfc1ede4d71b8245dcd'
              transactionHash: '0x3aed1cf24976a3f89944bb06825db8a1fb3df2741e16b1b1922d6d0db9357856'
              transactionIndex: '0x0'
              type: TxTypeFeeDelegatedSmartContractExecution
              typeInt: 49
              value: '0x0'
    KlayGetBlockTransactionCountByNumberReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getBlockTransactionCountByNumber
        params:
          type: array
          items:
            properties:
              BlockNumberOrTag:
                $ref: '#/components/schemas/BlockNumberOrTag'
          example:
            - '0xe8'
    KlayGetBlockWithConsensusInfoByHashReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getBlockWithConsensusInfoByHash
        params:
          type: array
          description: Hash of a block.
          items:
            $ref: '#/components/schemas/BlockHash'
          example:
            - '0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577'
    BlockWithConsensusInfo:
      type: object
      required:
        - blockScore
        - totalBlockScore
        - committee
        - committers
        - gasUsed
        - hash
        - number
        - parentHash
        - proposer
        - receiptsRoot
        - sigHash
        - size
        - stateRoot
        - timestamp
        - timestampFoS
        - transactions
        - transactionsRoot
        - baseFeePerGas
      properties:
        blockScore:
          type: string
          format: hex
          description: Former difficulty. Always 1 in the BFT consensus engine
        totalBlockScore:
          type: string
          format: hex
          description: Integer of the total blockScore of the chain until this block.
        committee:
          type: array
          items:
            type: string
          description: Array of addresses of committee members of this block. The committee is a subset of validators participated in the consensus protocol for this block.
        committers:
          type: array
          items:
            type: string
          description: Array of addresses of committer members of this block.
        gasUsed:
          type: string
          format: hex
          description: The total used gas by all transactions in this block.
        hash:
          type: string
          format: 32-byte DATA
          description: Hash of the block. null when it is pending block.
        number:
          type: string
          format: hex
          description: The block number. null when it is pending block.
        parentHash:
          type: string
          format: 32-byte DATA
          description: Hash of the parent block.
        proposer:
          type: string
          format: 20-byte DATA
          description: Address of the proposer.
        receiptsRoot:
          type: string
          format: 32-byte DATA
          description: The root of the receipts trie of the block.
        sigHash:
          type: string
          description: signature hash of block
        size:
          type: string
          format: hex
          description: Integer the size of this block in bytes.
        stateRoot:
          type: string
          format: 32-byte DATA
          description: The root of the final state trie of the block.
        timestamp:
          type: string
          format: hex
          description: The Unix timestamp for when the block was collated.
        timestampFoS:
          type: string
          format: hex
          description: The fraction of a second of the timestamp for when the block was collated.
        transactions:
          type: array
          items:
            type: object
          description: Array of transaction objects.
        transactionsRoot:
          type: string
          format: 32-byte DATA
          description: The root of the transaction trie of the block.
        baseFeePerGas:
          type: string
          format: hex
          description: The base fee per gas. It has a meaningful value when EthTxTypeCompatible and Magma hardforks are activated.
      example:
        blockScore: '0x1'
        committee:
          - '0x571e53df607be97431a5bbefca1dffe5aef56f4d'
          - '0x5cb1a7dccbd0dc446e3640898ede8820368554c8'
          - '0x99fb17d324fa0e07f23b49d09028ac0919414db6'
          - '0xb74ff9dea397fe9e231df545eb53fe2adf776cb2'
        committers:
          - '0x99fb17d324fa0e07f23b49d09028ac0919414db6'
          - '0x5cb1a7dccbd0dc446e3640898ede8820368554c8'
          - '0x571e53df607be97431a5bbefca1dffe5aef56f4d'
        extraData: '0xd883010101846b6c617988676f312e31322e35856c696e757800000000000000f90164f85494571e53df607be97431a5bbefca1dffe5aef56f4d945cb1a7dccbd0dc446e3640898ede8820368554c89499fb17d324fa0e07f23b49d09028ac0919414db694b74ff9dea397fe9e231df545eb53fe2adf776cb2b84151d4282c17c8120b540abbd61a0e090fe6916bbbd03f512d91f21a125ac49c206c4d4507e73658bd127c72ec984d6d633cc5e855688c7b95393ab842581aca3401f8c9b84155a6d22d344c4c948d46afc30e9dd94cfd1d8831b055a1bafce61bec941a7d5229615e20c1bb91da709b6dbed19b9e78fe0baec36288bb1eb0995162b211c71601b841875e354683c7b42c7fb330ade9f77bf4400567c0a0784cec37e9b42a64c279952f9f7e6a0a59bc5a1dfc8ab9dfe48acbb8fc541c8685d47a8a6f8ec7a1ae7c3a00b841783cf3e5fc3a23c8eeca37615b99ef1648a0fa287347136564488817ca7e81615f78849245d9daa645851f180ed7dd4c8ea874b05a090bbd80e122c00cbe95e401'
        gasUsed: '0x0'
        governanceData: 0x
        hash: '0x841276e1b90bd72ae10106be921ce1ba57447b45b6e40d9cdcedf434b1258636'
        logsBloom: '0x
        number: '0x6e0431'
        originProposer: '0x99fb17d324fa0e07f23b49d09028ac0919414db6'
        parentHash: '0x846f639da23ecddb08e4de21ade579271b3e7e8269e8b999f5279ba39e34d238'
        proposer: '0x99fb17d324fa0e07f23b49d09028ac0919414db6'
        receiptsRoot: '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'
        reward: '0xb2bd3178affccd9f9f5189457f1cad7d17a01c9d'
        round: 0
        sigHash: '0xfc1eb3094c465f0ba1a34e9b52aa3595a7e4d6a56df2c4f05f0f78522d869d17'
        size: '0x33b'
        stateRoot: '0xb011dd6dcfbc7ec95b82f8a2a5a070945a68e9ae203713c8313350751f1df556'
        timestamp: '0x5d814d00'
        timestampFoS: '0x26'
        totalBlockScore: '0x6e0432'
        transactions: []
        transactionsRoot: '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'
        voteData: 0x
    KlayGetBlockWithConsensusInfoByHashResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/BlockWithConsensusInfo'
    KlayGetBlockWithConsensusInfoByNumberReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getBlockWithConsensusInfoByNumber
        params:
          type: array
          items:
            $ref: '#/components/schemas/BlockNumberOrTag'
          example:
            - '0x6e0431'
    KlayGetBlockWithConsensusInfoByNumberResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/BlockWithConsensusInfo'
    KlayGetBlockWithConsensusInfoByNumberRangeReq:
      type: object
      properties:
        method:
          type: string
          default: klay_getBlockWithConsensusInfoByNumberRange
        params:
          type: array
          items:
            properties:
              BlockNumberOrHashOrTag:
                $ref: '#/components/schemas/BlockNumberOrHashOrTag'
              Range:
                type: number
                title: Range
    KlayGetBlockWithConsensusInfoByNumberRangeResp:
      type: object
      properties:
        result:
          type: object
          properties:
            blockscore:
              type: string
            committee:
              type: array
              items:
                type: string
            extraData:
              type: string
            gasUsed:
              type: string
            governanceData:
              type: string
            hash:
              type: string
            logsBloom:
              type: string
            number:
              type: string
            parentHash:
              type: string
            proposer:
              type: string
            receiptsRoot:
              type: string
            reward:
              type: string
            size:
              type: string
            stateRoot:
              type: string
            timestamp:
              type: string
            timestampFoS:
              type: string
            totalBlockScore:
              type: string
            transactions:
              type: array
              items:
                type: object
                properties:
                  blockHash:
                    type: string
                  blockNumber:
                    type: string
                  contractAddress:
                    type: string
                  from:
                    type: string
                  gas:
                    type: string
                  gasPrice:
                    type: string
                  gasUsed:
                    type: string
                  logs:
                    type: array
                    items:
                      type: object
                  logsBloom:
                    type: string
                  nonce:
                    type: string
                  senderTxHash:
                    type: string
                  signatures:
                    type: array
                    items:
                      type: object
                      properties:
                        V:
                          type: string
                        R:
                          type: string
                        S:
                          type: string
                  status:
                    type: string
                  to:
                    type: string
                  transactionHash:
                    type: string
                  transactionIndex:
                    type: string
                  type:
                    type: string
                  typeInt:
                    type: integer
                  value:
                    type: string
            transactionsRoot:
              type: string
            voteData:
              type: string
          description: Object - A block object with consensus information (a proposer and a list of committee members)
          example:
            blockscore: '0x1'
            committee:
              - '0x715dd3ce7a285f21111715a2ba5537414d40506b'
              - '0x71959675eeb7c7ec1e0c74f206a9c488d7f178d4'
            extraData: '0xd7820a01846b6c617988676f312e31312e32856c696e75780000000000000000f8b3ea94715dd3ce7a285f21111715a2ba5537414d40506b9471959675eeb7c7ec1e0c74f206a9c488d7f178d4b8418e55cfb464eed804671bbee503f2dcacae9349f23aa3c42fc43349f96ef08bb07c1039541a3b768af32384c8e29ec7e673356a6b0ea4c6d88604ae8abae4303201f843b841386a3fbd09cd3a7c82c0b8fdc9ae8c3e624be5f12553dde42bed456093e40c113aa36fb7015b578611e2cd2ee979e6017b15be7d3cc645f455b32e8607c85d7100'
            gasUsed: '0x5208'
            governanceData: 0x
            hash: '0x6ccef34eb59fab927705d344f080f449b576c0626e4aa3e20f569feb8df6e283'
            logsBloom: '0x
            number: '0x4a99'
            parentHash: '0x3b56b598828368d86b175a78ba21845125372851154840c6b1b318da910849c2'
            proposer: '0x715dd3ce7a285f21111715a2ba5537414d40506b'
            receiptsRoot: '0xe38e5532717f12f769b07ea016014bd39b74fb72def4de8442114cc2728609f2'
            reward: '0x59e6931f46b091f4ecbc39e8626fc0be7d3fcdeb'
            size: '0x314'
            stateRoot: '0xc65b3e3f1c32c33c095507d6d37e2a8a5589b178b5b03a1365295908ac92c40c'
            timestamp: '0x5d11f951'
            timestampFoS: '0x0'
            totalBlockScore: '0x4a9a'
            transactions:
              - blockHash: '0x6ccef34eb59fab927705d344f080f449b576c0626e4aa3e20f569feb8df6e283'
                blockNumber: '0x4a99'
                contractAddress: null
                from: '0x71959675eeb7c7ec1e0c74f206a9c488d7f178d4'
                gas: '0x493e0'
                gasPrice: '0x5d21dba00'
                gasUsed: '0x5208'
                logs: []
                logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
                nonce: '0x2'
                senderTxHash: '0xac418c96f7386a3343d149eeb29e48e28905525dda2e5afe55b0661f9ab01aca'
                signatures:
                  - V: '0x4e43'
                    R: '0xa857ef0676d7e65697cadeaf1654b2facd71d0b9f942d695f3972a1f7c34c25c'
                    S: '0x43fba9e5c2c16511f951e27957f1279ea3c1f913b27f9fbb2a8dcb5884e37e3d'
                status: '0x1'
                to: '0xef5cd886c7f8d85fbe8023291761341acbb4da01'
                transactionHash: '0xac418c96f7386a3343d149eeb29e48e28905525dda2e5afe55b0661f9ab01aca'
                transactionIndex: '0x0'
                type: TxTypeValueTransfer
                typeInt: 8
                value: '0xde0b6b3a7640000'
            transactionsRoot: '0xac418c96f7386a3343d149eeb29e48e28905525dda2e5afe55b0661f9ab01aca'
            voteData: 0x
    KlayGetCommitteeReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getCommittee
        params:
          type: array
          items:
            properties:
              BlockNumberOrTag:
                $ref: '#/components/schemas/BlockNumberOrTag'
          example:
            - '0x1b4'
    KlayGetCommitteeResp:
      type: object
      properties:
        result:
          type: array
          description: Addresses of all validators in the committee.
          items:
            type: string
            format: hex
            example: '0x207e38864b45a538733741dc1ff92eff9d1a6159'
    KlayGetCommitteeSizeReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getCommitteeSize
        params:
          type: array
          items:
            properties:
              BlockNumberOrTag:
                $ref: '#/components/schemas/BlockNumberOrTag'
          example:
            - '0x1b4'
    KlayGetCouncilReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getCouncil
        params:
          type: array
          items:
            properties:
              BlockNumberOrTag:
                $ref: '#/components/schemas/BlockNumberOrTag'
          example:
            - '0x1b4'
    KlayGetCouncilResp:
      type: object
      properties:
        result:
          description: Addresses of all validators of the council.
          type: array
          items:
            type: string
            format: hex
            description: Addresses of all validators of the council
            example: '0x207e38864b45a538733741dc1ff92eff9d1a6159'
    KlayGetCouncilSizeReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getCouncilSize
        params:
          type: array
          items:
            properties:
              BlockNumberOrTag:
                $ref: '#/components/schemas/BlockNumberOrTag'
          example:
            - '0x1b4'
    KlayGetHeaderByHashReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getHeaderByHash
        params:
          type: array
          description: Hash of a block.
          items:
            type: string
            title: HashOfBlock
            format: 32-byte DATA
            description: Hash of a block.
          example:
            - '0x1b4'
    KlayHeaderObject:
      title: KlayHeaderObject
      type: object
      description: The block header object.
      required:
        - parentHash
        - hash
        - transactionsRoot
        - stateRoot
        - receiptsRoot
        - reward
        - blockScore
        - extraData
        - gasUsed
        - timestamp
        - timestampFoS
        - governanceData
        - voteData
        - baseFeePerGas
      properties:
        number:
          type: string
          format: hex
          nullable: true
          description: The block number. null when its pending block.
        hash:
          type: string
          format: 32-byte DATA
          nullable: true
          description: Hash of the block. null when it is pending block.
        parentHash:
          type: string
          format: 32-byte DATA
          description: Hash of the parent block.
        logsBloom:
          type: string
          format: 256-byte DATA
          nullable: true
          description: The bloom filter for the logs of the block. null when it is pending block.
        transactionsRoot:
          type: string
          format: 32-byte DATA
          description: The root of the transaction trie of the block
        stateRoot:
          type: string
          format: 32-byte DATA
          description: The root of the final state trie of the block.
        receiptsRoot:
          type: string
          format: 32-byte DATA
          description: The root of the receipts trie of the block.
        reward:
          type: string
          format: 20-byte DATA
          description: The address of the beneficiary to whom the block rewards were given.
        blockScore:
          type: string
          format: hex
          description: Former difficulty. Always 1 in the BFT consensus engine
        extraData:
          type: string
          format: DATA
          description: The "extra data" field of this block.
        gasUsed:
          type: string
          format: hex
          description: The total used gas by all transactions in this block.
        timestamp:
          type: string
          format: hex
          description: The Unix timestamp for when the block was collated.
        timestampFoS:
          type: string
          format: hex
          description: The fraction of a second of the timestamp for when the block was collated.
        governanceData:
          type: string
          format: DATA
          description: RLP encoded governance configuration
        voteData:
          type: string
          format: DATA
          description: RLP encoded governance vote of the proposer
        baseFeePerGas:
          type: string
          format: hex
          description: The base fee per gas. It has a meaningful value when EthTxTypeCompatible and Magma hardforks are activated.
      example:
        baseFeePerGas: '0x5d21dba00'
        blockScore: '0x1'
        extraData: '0xda83010800846b6c617989676f312e31362e31338664617277696e0000000000f89ed5949712f943b296758aaae79944ec975884188d3a96b841ddfdf7e2cb0a93538f757f87f23a93ee35df703c781c6f15e31e4978ecdfb3501fc00924372b9a01df2bc452f2a924c242d83580183d131c47e49a25b78f625201f843b841b9b6034d5a8c5f5b057274cda4f427614cd1f448ee781f4c4322861d1361d09d47d6030f2b69a26cb426db984f54e71f8c112fbf882930ccd715d595e8d8307500'
        gasUsed: '0x0'
        governanceData: 0x
        hash: '0xe882d7a16f38126dc0c507f990b3fe18fa2d3a380002538581327abe96ca6edc'
        logsBloom: '0x
        number: '0x1e67'
        parentHash: '0x28b1c054346c3bd083741c757a750dcabf94b6d50c7f87158753544e96e73550'
        receiptsRoot: '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'
        reward: '0x4b2c736fd05c2e2da3ccbd001a395a444f16a861'
        stateRoot: '0xdf9885621c9e6e75912ca94d6987bcb1b54fef0e4a99cbec5e68f1ffc7468a78'
        timestamp: '0x62130beb'
        timestampFoS: '0x0'
        transactionsRoot: '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'
    KlayGetHeaderByHashResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/KlayHeaderObject'
    KlayGetHeaderByNumberReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getHeaderByNumber
        params:
          type: array
          items:
            properties:
              BlockNumberOrTag:
                $ref: '#/components/schemas/BlockNumberOrTag'
          example:
            - '0x1b4'
    KlayGetHeaderByNumberResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/KlayHeaderObject'
    KlayGetRewardsReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: klay_getRewards
        params:
          type: array
          default:
            - latest
          items:
            $ref: '#/components/schemas/BlockNumberOrTag'
    KlayGetRewardsResp:
      type: object
      properties:
        result:
          type: object
          required:
            - burntFee
            - kgf
            - kir
            - minted
            - proposer
            - rewards
            - stakers
            - totalFee
          properties:
            burntFee:
              type: integer
              format: int64
              description: the amount burnt
            kgf:
              type: integer
              format: int64
              description: the amount allocated to KGF
            kir:
              type: integer
              format: int64
              description: the amount allocated to KIR
            minted:
              type: number
              format: double
              description: the amount newly minted
              example: 9600000000000000000
            proposer:
              type: number
              format: double
              description: the amount allocated to the block proposer
              example: 9600000000000000000
            rewards:
              type: object
              description: mapping from reward recipient to amounts
              additionalProperties:
                type: number
                format: double
              example:
                '1.0278187497989767e+48': 9600000000000000000
            stakers:
              type: integer
              format: int64
              description: total amount allocated to stakers
            totalFee:
              type: integer
              format: int64
              description: total tx fee spent
    KlayGetStorageAtReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getStorageAt
        params:
          type: array
          items:
            properties:
              StorageAddress:
                type: string
                title: StorageAddress
                format: 20-byte DATA
                description: Address of the storage.
              Position:
                type: string
                title: Position
                format: hex
                description: Integer of the position in the storage.
              BlockNumberOrHashOrTag:
                $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - '0x295a70b2de5e3953354a6a8344e616ed314d7251'
            - '0x0'
            - latest
    SyncingObject:
      title: SyncingObject
      type: object
      required:
        - startingBlock
        - currentBlock
        - highestBlock
        - pulledStates
        - knownStates
      properties:
        startingBlock:
          type: string
          format: hex
          description: The block at which the import started (will only be reset, after the sync reached his head).
        currentBlock:
          type: string
          format: hex
          description: The current block, same as klay_blockNumber.
        highestBlock:
          type: string
          format: hex
          description: The estimated highest block.
        pulledStates:
          type: string
          format: hex
          description: The number of state entries processed until now. If the sync mode is not "fast", zero is returned.
        knownStates:
          type: string
          format: hex
          description: The number of known state entries that still need to be pulled. If the sync mode is not "fast", zero is returned.
      example:
        currentBlock: '0x3e31e'
        highestBlock: '0x827eef'
        knownStates: '0x0'
        pulledStates: '0x0'
        startingBlock: '0x0'
    KlaySyncingResp:
      type: object
      properties:
        result:
          oneOf:
            - $ref: '#/components/schemas/SyncingObject'
            - type: boolean
              example: false
    KlayCallObject:
      title: KlayCallObject
      type: object
      description: The transaction call object. See the next table for the object's properties.
      properties:
        from:
          type: string
          format: 20-byte DATA
          description: (optional) The address the transaction is sent from.
        to:
          type: string
          format: 20-byte DATA
          description: (optional when testing the deployment of a new contract) The address the transaction is directed to.
        gas:
          type: string
          format: hex
          description: (optional) Integer of the gas provided for the transaction execution. klay_call consumes zero gas, but this parameter may be needed by some executions.
        gasPrice:
          type: string
          format: hex
          description: (optional) Integer of the gasPrice used for each paid gas.
        value:
          type: string
          format: hex
          description: (optional) Integer of the value sent with this transaction.
        input:
          type: string
          format: DATA
          description: (optional) Hash of the method signature and encoded parameters. It replaces data field, but 'data` field is still supported for backward compatibility.
    KlayCallReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_call
        params:
          type: array
          items:
            anyOf:
              - allOf:
                  - title: CallObject
                  - $ref: '#/components/schemas/KlayCallObject'
              - $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - from: '0x3f71029af4e252b25b9ab999f77182f0cd3bc085'
              to: '0x87ac99835e67168d4f9a40580f8f5c33550ba88b'
              gas: '0x100000'
              gasPrice: '0x5d21dba00'
              value: '0x0'
              input: '0x8ada066e'
            - latest
    KlayCallResp:
      type: object
      properties:
        result:
          type: string
          format: DATA
          description: The return value of executed contract.
          example: '0x000000000000000000000000000000000000000000000000000000000000000a'
    KlayCreateAccessListReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_createAccessList
        params:
          type: array
          items:
            properties:
              CallObject:
                title: CallObject
                description: A transaction call object. Please see caver.rpc.klay.call parameters.
                $ref: '#/components/schemas/KlayCallObject'
              BlockParameter:
                title: blockParameter
                description: (optional) A block number, blockhash or the block tag string (latest or earliest). If omitted, latest will be used.
                $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - from: '0x3bc5885c2941c5cda454bdb4a8c88aa7f248e312'
              to: '0x00f5f5f3a25f142fafd0af24a754fafa340f32c7'
              gas: '0x3d0900'
              gasPrice: '0x3b9aca00'
              data: '0x20965255'
            - latest
    KlayCreateAccessListResp:
      type: object
      properties:
        result:
          type: object
          required:
            - accessList
            - gasUsed
          properties:
            accessList:
              type: array
              items:
                type: object
                required:
                  - oldestBlock
                  - reward
                  - baseFeePerGas
                  - gasUsedRatio
                properties:
                  oldestBlock:
                    type: string
                    description: Lowest number block of returned range.
                  reward:
                    description: A two-dimensional array of effective priority fees per gas at the requested block percentiles.
                    type: array
                    items:
                      type: array
                      items:
                        type: string
                  baseFeePerGas:
                    description: An array of block base fees per gas. This includes the next block after the newest of the returned range, because this value can be derived from the newest block. Zeroes are returned for pre-EIP-1559 blocks.
                    type: array
                    items:
                      type: string
                  gasUsedRatio:
                    description: An array of gasUsed/gasLimit in the block.
                    type: array
                    items:
                      type: string
                      format: hex
            gasUsed:
              type: string
              format: hex
          example:
            accessList: []
            gasUsed: '0x0'
    KlayEstimateComputationCostReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_estimateComputationCost
        params:
          type: array
          items:
            properties:
              CallObject:
                title: CallObject
                description: A transaction call object. Please see caver.rpc.klay.call parameters.
                $ref: '#/components/schemas/KlayCallObject'
              BlockNumberOrHashOrTag:
                title: blockParameter
                description: (optional) A block number, blockhash or the block tag string (latest or earliest). If omitted, latest will be used.
                $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - from: '0x73718c4980728857f3aa5148e9d1b471efa3a7dd'
              to: '0x069942a3ca0dabf495dba872533134205764bc9c'
              value: '0x0'
              input: '0x2a31efc7000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000003039'
            - latest
    KlayEstimateGasReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_estimateGas
        params:
          type: array
          items:
            allOf:
              - title: callObject
              - $ref: '#/components/schemas/KlayCallObject'
          example:
            - from: '0x3f71029af4e252b25b9ab999f77182f0cd3bc085'
              to: '0x87ac99835e67168d4f9a40580f8f5c33550ba88b'
              gas: '0x100000'
              gasPrice: '0x5d21dba00'
              value: '0x0'
              input: '0x8ada066e'
    KlayEstimateGasResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          description: The amount of gas used.
          example: '0x5208'
    KlayGetDecodedAnchoringTransactionByHashReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getDecodedAnchoringTransactionByHash
        params:
          type: array
          description: Hash of a transaction.
          items:
            type: string
            format: 32-byte DATA
            title: HashOfTransaction
            description: Hash of a transaction.
          example:
            - '0x499350bc5e2f6fee1ba78b4d40a7a1db0a64f3c091112e6798a02ed9a4140084'
    KlayGetDecodedAnchoringTransactionByHashResp:
      title: KlayGetDecodedAnchoringTransactionByHashResp
      type: object
      properties:
        result:
          type: object
          required:
            - BlockHash
            - BlockNumber
            - ParentHash
            - TxHash
            - StateRootHash
            - ReceiptHash
            - BlockCount
            - TxCount
          properties:
            BlockHash:
              type: string
              format: 32-byte DATA
              description: Hash of the child chain block that this anchoring transaction was performed.
            BlockNumber:
              type: number
              description: The child chain block number that this anchoring transaction was performed.
            ParentHash:
              type: string
              format: 32-byte DATA
              description: Hash of the parent block.
            TxHash:
              type: string
              format: 32-byte DATA
              description: The root of the transaction trie of the block.
            StateRootHash:
              type: string
              format: 32-byte DATA
              description: The root of the final state trie of the block.
            ReceiptHash:
              type: string
              format: 32-byte DATA
              description: The root of the receipts trie of the block.
            BlockCount:
              type: number
              description: The number of blocks generated during this anchoring period. In most cases, this number is equal to the child chain's SC_TX_PERIOD, with the exception of the case that this transaction was the first anchoring tx after turning on the anchoring.
            TxCount:
              type: number
              description: The number of transactions generated in the child chain during this anchoring period.
          example:
            BlockCount: 1
            BlockHash: '0xcf5f591836d70a1da8e6bb8e5b2c5739329ca0e535b91e239b332af2e1b7f1f4'
            BlockNumber: 1055
            ParentHash: '0x70f6115a5b597f29791d3b5e3f129df54778f69ae669842cc81ec8c432fee37c'
            ReceiptHash: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421'
            StateRootHash: '0x654773348f77a6788c76c93946340323c9b39399d0aa173f6b23fe082848d056'
            TxCount: 0
            TxHash: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421'
    KlayGetRawTransactionByBlockHashAndIndexReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getRawTransactionByBlockHashAndIndex
        params:
          type: array
          items:
            properties:
              BlockHash:
                title: BlockHash
                type: string
                format: hex
                description: Hex representation of a Keccak 256 hash
              Index:
                title: Index
                description: Hex representation of a uint
                type: string
                format: hex
          example:
            - '0x29b6cd965c7d9a53a6f068da259dce1d3810ba79fff8eebac5d4da14754e67e6'
            - '0x20965255'
    KlayGetRawTransactionByBlockHashAndIndexResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          description: Hex representation of some bytes
          title: dataWord
          example: 0x
    KlayGetRawTransactionByBlockNumberAndIndexReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getRawTransactionByBlockNumberAndIndex
        params:
          type: array
          items:
            properties:
              BlockNumberOrHashOrTag:
                $ref: '#/components/schemas/BlockNumberOrHashOrTag'
              TransactionIndex:
                type: string
                format: hex
                title: TransactionIndex
                description: The transaction index position.
          example:
            - '0x27'
            - '0x0'
    KlayGetRawTransactionByBlockNumberAndIndexResp:
      type: object
      properties:
        result:
          type: string
          description: Hex representation of some bytes
          example: '0x0'
    KlayGetRawTransactionByHashReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getRawTransactionByHash
        params:
          type: array
          items:
            title: hash
            type: string
            format: hex
          description: Hex representation of a Keccak 256 hash
          example:
            - '0x29b6cd965c7d9a53a6f068da259dce1d3810ba79fff8eebac5d4da14754e67e6'
    KlayGetRawTransactionByHashResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          title: dataWord
          description: Hex representation of some bytes
          example: 0x
    KlayGetTransactionByBlockHashAndIndexReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getTransactionByBlockHashAndIndex
        params:
          type: array
          items:
            properties:
              BlockHash:
                type: string
                format: 32-byte DATA
                title: BlockHash
                description: Hash of a block.
              TransactionIndex:
                type: string
                format: hex
                title: TransactionIndexPosition
                description: Integer of the transaction index position.
            example:
              - '0x451cafae98d61b7458b5cef54402830941432278184453e3ca490eb687317e68'
              - '0x0'
    Signature:
      title: Signature
      type: object
      required:
        - V
        - R
        - S
      properties:
        V:
          type: string
        R:
          type: string
        S:
          type: string
    TransactionObject:
      title: TransactionObject
      type: object
      description: Transaction object
      required:
        - blockHash
        - blockNumber
        - from
        - gas
        - gasPrice
        - hash
        - nonce
        - senderTxHash
        - signatures
        - to
        - transactionIndex
        - type
        - typeInt
        - value
      properties:
        blockHash:
          type: string
          format: 32-byte DATA
          description: Hash of the block where this transaction was in. null when it is pending.
        blockNumber:
          type: string
          format: hex
          description: Block number where this transaction was in. null when it is pending.
        codeFormat:
          type: string
          description: (optional) The code format of smart contract code.
        feePayer:
          type: string
          format: 20-byte DATA
          description: (optional) Address of the fee payer.
        feePayerSignatures:
          type: array
          items:
            $ref: '#/components/schemas/Signature'
          description: (optional) An array of fee payer's signature objects. A signature object contains three fields (V, R, and S). V contains ECDSA recovery id. R contains ECDSA signature r while S contains ECDSA signature s.
        feeRatio:
          type: string
          format: hex
          description: (optional) Fee ratio of the fee payer. If it is 30, 30% of the fee will be paid by the fee payer. 70% will be paid by the sender.
        from:
          type: string
          format: 20-byte DATA
          description: Address of the sender.
        gas:
          type: string
          format: hex
          description: Gas provided by the sender.
        gasPrice:
          type: string
          format: hex
          description: Gas price provided by the sender in peb.
        hash:
          type: string
          format: 32-byte DATA
          description: Hash of the transaction.
        humanReadable:
          type: boolean
          description: (optional) true if the address is humanReadable, false if the address is not humanReadable.
        key:
          type: string
          description: (optional) Key of the newly created account.
        input:
          type: string
          format: DATA
          description: (optional) The data sent along with the transaction.
        nonce:
          type: string
          format: hex
          description: The number of transactions made by the sender prior to this one.
        senderTxHash:
          type: string
          format: 32-byte DATA
          description: Hash of a transaction that is signed only by the sender. See SenderTxHash. This value is always the same as hash for non fee-delegated transactions.
        signatures:
          type: array
          items:
            $ref: '#/components/schemas/Signature'
          description: An array of signature objects. A signature object contains three fields (V, R, and S). V contains ECDSA recovery id. R contains ECDSA signature r while S contains ECDSA signature s
        to:
          type: string
          format: 20-byte DATA
          description: Address of the receiver. null when it is a contract creation transaction.
        transactionIndex:
          type: string
          format: hex
          description: Integer of the transactions index position in the block. null when it is pending.
        type:
          type: string
          description: A string representing the type of the transaction.
        typeInt:
          type: number
          description: An integer representing the type of the transaction.
        value:
          type: string
          format: hex
          description: Value transferred in peb.
      example:
        blockHash: '0x4d97cf1f686a925ed4f1ad42c635cedb54974fe23a2941c7825e1ed3163c0e41'
        blockNumber: '0x7008'
        feePayer: '0xa9d2cc2bb853163b6eadfb6f962d72f7e00bc2e6'
        feePayerSignatures:
          - V: '0x4e44'
            R: '0xa665e17d92e1c671c8b062cecb19790d49138a21854fc15c460c91035b1884e'
            S: '0x17165688acc01736f1221a39399e3aac7e1ece14731fcab31631e3e4a59b7441'
        from: '0xab0833d744a8943fe3c783f9cc70c13cbd70fcf4'
        gas: '0xdbba0'
        gasPrice: '0x5d21dba00'
        hash: '0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67'
        nonce: '0x26'
        senderTxHash: '0x18fe9e1007da7d20aad77778557fb8acc58c80054daba65124c8c843aadd3478'
        signatures:
          - V: '0x4e44'
            R: '0x1b6bb3d996d903d0528565d13e8d9d122b2220ed09c5baf384114193a6977027'
            S: '0x20c506ce9f1bdd42183c40c44f414a3930f339f856e8be3cfcdf5ca0852fd378'
        to: '0x15a9119104e1bf0ec6d408b3cc188685e4402a2c'
        transactionIndex: '0x0'
        type: TxTypeFeeDelegatedValueTransfer
        typeInt: 9
        value: '0x1'
    KlayGetTransactionByBlockHashAndIndexResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/TransactionObject'
    KlayGetTransactionByBlockNumberAndIndexReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getTransactionByBlockNumberAndIndex
        params:
          type: array
          items:
            properties:
              BlockNumberOrTag:
                $ref: '#/components/schemas/BlockNumberOrTag'
              TranssactionIndex:
                type: string
                format: hex
                title: TransactionIndex
                description: The transaction index position.
          example:
            - 118593751
            - '0x0'
    KlayGetTransactionByBlockNumberAndIndexResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/TransactionObject'
    KlayGetTransactionByHashReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getTransactionByHash
        params:
          type: array
          description: Hash of a transaction.
          items:
            type: string
            format: 32-byte DATA
            title: TransactionHash
            description: Hash of a transaction.
          example:
            - '0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67'
    KlayGetTransactionByHashResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/TransactionObject'
    KlayGetTransactionBySenderTxHashReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getTransactionBySenderTxHash
        params:
          type: array
          description: Hash of a transaction that is signed only by the sender.
          items:
            type: string
            format: 32-byte DATA
            title: TransactionHash
            description: Hash of a transaction that is signed only by the sender.
          example:
            - '0x18fe9e1007da7d20aad77778557fb8acc58c80054daba65124c8c843aadd3478'
    KlayGetTransactionBySenderTxHashResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/TransactionObject'
    KlayGetTransactionReceiptReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getTransactionReceipt
        params:
          type: array
          description: Hash of a transaction.
          items:
            type: string
            format: 32-byte DATA
            title: TransactionHash
            description: Hash of a transaction.
          example:
            - '0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67'
    LogObject:
      title: LogObject
      type: object
      required:
        - removed
        - logIndex
        - transactionIndex
        - transactionHash
        - blockHash
        - blockNumber
        - address
        - data
        - topics
      description: For filters created with klay_newFilter logs are objects with following properties
      properties:
        removed:
          type: boolean
          description: true when the log was removed, due to a chain reorganization. false if its a valid log.
        logIndex:
          type: string
          format: hex
          description: Integer of the log index position in the block. null when it is a pending log.
        transactionIndex:
          type: string
          format: hex
          description: Integer of the transactions index position log was created from. null when pending.
        transactionHash:
          type: string
          format: 32-byte DATA
          description: Hash of the transactions this log was created from. null when pending.
        blockHash:
          type: string
          format: 32-byte DATA
          description: Hash of the block where this log was in. null when pending.
        blockNumber:
          type: string
          format: hex
          description: The block number where this log was in. null when pending.
        address:
          type: string
          format: 20-byte DATA
          description: Address from which this log originated.
        data:
          type: string
          format: DATA
          description: Contains the non-indexed arguments of the log.
        topics:
          type: array
          items:
            type: string
            format: 32-byte DATA
          description: Array of 0 to 4 32-byte DATA of indexed log arguments. (In Solidity The first topic is the hash of the signature of the event (e.g., Deposit(address,bytes32,uint256)), except you declared the event with the anonymous specifier.).
    KlayArrayOfLog:
      title: KlayArrayOfLog
      type: array
      items:
        anyOf:
          - type: string
            format: 32-byte DATA
            title: BlockHash
            description: For filters created with klay_newBlockFilter, the return are block hashes (32-byte DATA), e.g., ["0x3454645634534..."].
          - type: string
            format: 32-byte DATA
            title: TransactionHash
            description: For filters created with klay_newPendingTransactionFilter, the return are transaction hashes (32-byte DATA), e.g., ["0x6345343454645..."].
          - $ref: '#/components/schemas/LogObject'
      description: Array of log objects, or an empty array if nothing has changed since last poll.
      example:
        - address: '0x87ac99835e67168d4f9a40580f8f5c33550ba88b'
          topics:
            - '0xfa9b2165fc71c1d6ffa03291c7f5d223ea363ec063d747eec9ce2d30d24855ef'
          data: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000d3564e57bb5c6f4d983a493a946534f8e1e8b481000000000000000000000000000000000000000000000000000000000000001341646472657373426f6f6b436f6e747261637400000000000000000000000000'
          blockNumber: '0xd3b5'
          transactionHash: '0x57ca8ff0a0d454d4c5418694c21bc4ef3de26cf7cd18dd404d6a7189a826bfe0'
          transactionIndex: '0x0'
          blockHash: '0x279251a907c6ab1fb723595511ff401432e7c2437d54189298f53a7d33ce3a60'
          logIndex: '0x0'
          removed: false
        - address: '0x87ac99835e67168d4f9a40580f8f5c33550ba88b'
          topics:
            - '0xfa3e1e272694072320aad73a3fadd8876c4bf8f40899c6c7ce2fda9f4e652cfa'
          data: '0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000300000000000000000000000041383b6ee0ea5108d6b139165a9c85351aacd39800000000000000000000000057f7439898e652fa9b5654022297588532e5e0370000000000000000000000005b5b7a718a4124eb746ae00b1ce6edcaa5ab55bc'
          blockNumber: '0xd3b5'
          transactionHash: '0x57ca8ff0a0d454d4c5418694c21bc4ef3de26cf7cd18dd404d6a7189a826bfe0'
          transactionIndex: '0x0'
          blockHash: '0x279251a907c6ab1fb723595511ff401432e7c2437d54189298f53a7d33ce3a60'
          logIndex: '0x1'
          removed: false
    TransactionReceipt:
      title: TransactionReceipt
      type: object
      required:
        - blockHash
        - blockNumber
        - contractAddress
        - from
        - gas
        - effectiveGasPrice
        - gasPrice
        - gasUsed
        - logs
        - logsBloom
        - nonce
        - senderTxHash
        - signature
        - status
        - to
        - transactionHash
        - transactionIndex
        - type
        - typeInt
        - value
      properties:
        blockHash:
          type: string
          format: 32-byte DATA
          description: Hash of the block where this transaction was in.
        blockNumber:
          type: string
          format: hex
          description: The block number where this transaction was in.
        codeFormat:
          type: string
          description: (optional) The code format of smart contract code.
        contractAddress:
          type: string
          format: DATA
          description: The contract address created, if the transaction was a contract creation, otherwise null.
        feePayer:
          type: string
          format: 20-byte DATA
          description: (optional) Address of the fee payer.
        feePayerSignatures:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/Signature'
            type: object
          description: (optional) An array of fee payer's signature objects. A signature object contains three fields (V, R, and S). V contains ECDSA recovery id. R contains ECDSA signature r while S contains ECDSA signature s.
        feeRatio:
          type: string
          format: hex
          description: (optional) Fee ratio of the fee payer. If it is 30, 30% of the fee will be paid by the fee payer. 70% will be paid by the sender.
        from:
          type: string
          format: 20-byte DATA
          description: Address of the sender.
        gas:
          type: string
          format: hex
          description: Gas provided by the sender.
        effectiveGasPrice:
          type: string
          format: hex
          description: The actual value per gas deducted from the senders account.
        gasPrice:
          type: string
          format: hex
          description: Gas price provided by the sender in peb.
        gasUsed:
          type: string
          format: hex
          description: The amount of gas used by this specific transaction alone.
        humanReadable:
          type: boolean
          description: (optional) true if the address is humanReadable, false if the address is not humanReadable.
        key:
          type: string
          description: (optional) Key of the newly created account.
        input:
          type: string
          format: DATA
          description: (optional) The data sent along with the transaction.
        logs:
          $ref: '#/components/schemas/KlayArrayOfLog'
          description: Array of log objects, which this transaction generated.
        logsBloom:
          type: string
          format: 256-byte DATA
          description: Bloom filter for light clients to quickly retrieve related logs.
        nonce:
          type: string
          format: hex
          description: The number of transactions made by the sender prior to this one.
        senderTxHash:
          type: string
          format: (optional) 32-byte DATA
          description: Hash of the tx without the fee payer's address and signature. This value is always the same as the value of transactionHash for non fee-delegated transactions.
        signature:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/Signature'
            type: object
          description: (optional) An array of fee payer's signature objects. A signature object contains three fields (V, R, and S). V contains ECDSA recovery id. R contains ECDSA signature r while S contains ECDSA signature s.
        status:
          type: string
          format: hex
          description: Either 1 (success) or 0 (failure).
        txError:
          type: string
          format: hex
          description: (optional) detailed error code if status is equal to zero.
        to:
          type: string
          format: 20-byte DATA
          description: Address of the receiver. null when it is a contract creation transaction.
        transactionHash:
          type: string
          format: 32-byte DATA
          description: Hash of the transaction.
        transactionIndex:
          type: string
          format: hex
          description: Integer of the transaction index position in the block.
        type:
          type: string
          description: A string representing the type of the transaction.
        typeInt:
          type: string
          format: hex
          description: An integer representing the type of the transaction.
        value:
          type: string
          format: hex
          description: Value transferred in peb.
      example:
        blockHash: '0x4d97cf1f686a925ed4f1ad42c635cedb54974fe23a2941c7825e1ed3163c0e41'
        blockNumber: '0x7008'
        contractAddress: null
        feePayer: '0xa9d2cc2bb853163b6eadfb6f962d72f7e00bc2e6'
        feePayerSignatures:
          - V: '0x4e44'
            R: '0xa665e17d92e1c671c8b062cecb19790d49138a21854fc15c460c91035b1884e'
            S: '0x17165688acc01736f1221a39399e3aac7e1ece14731fcab31631e3e4a59b7441'
        effectiveGasPrice: '0x5d21dba00'
        from: '0xab0833d744a8943fe3c783f9cc70c13cbd70fcf4'
        gas: '0xdbba0'
        gasPrice: '0x5d21dba00'
        gasUsed: '0x7918'
        logs: []
        logsBloom: '0x
        nonce: '0x26'
        senderTxHash: '0x18fe9e1007da7d20aad77778557fb8acc58c80054daba65124c8c843aadd3478'
        signatures:
          - V: '0x4e44'
            R: '0x1b6bb3d996d903d0528565d13e8d9d122b2220ed09c5baf384114193a6977027'
            S: '0x20c506ce9f1bdd42183c40c44f414a3930f339f856e8be3cfcdf5ca0852fd378'
        status: '0x1'
        to: '0x15a9119104e1bf0ec6d408b3cc188685e4402a2c'
        transactionHash: '0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67'
        transactionIndex: '0x0'
        type: TxTypeFeeDelegatedValueTransfer
        typeInt: 9
        value: '0x1'
    KlayGetTransactionReceiptResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/TransactionReceipt'
    schemas-KlayGetTransactionByHashReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getTransactionReceiptBySenderTxHash
        params:
          type: array
          description: Hash of a transaction before signing of feePayer(senderTransactionHash).
          items:
            type: string
            format: 32-byte DATA
            title: Hash
            description: Hash of a transaction before signing of feePayer(senderTransactionHash).
          example:
            - '0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67'
    schemas-TransactionObject:
      type: object
      required:
        - blockHash
        - blockNumber
        - contractAddress
        - feePayer
        - feePayerSignatures
        - from
        - gas
        - gasPrice
        - gasUsed
        - logs
        - logsBloom
        - nonce
        - senderTxHash
        - signatures
        - status
        - to
        - transactionHash
        - transactionIndex
        - type
        - typeInt
        - value
      properties:
        blockHash:
          type: string
          format: 32-byte DATA
          description: Hash of the block where this transaction was in.
        blockNumber:
          type: string
          format: hex
          description: The block number where this transaction was in.
        codeFormat:
          type: string
          description: (optional) The code format of smart contract code.
        contractAddress:
          type: string
          format: DATA
          description: The contract address created, if the transaction was a contract creation, otherwise null.
        feePayer:
          type: string
          format: 20-byte DATA
          description: Address of the fee payer.
        feePayerSignatures:
          type: array
          items:
            $ref: '#/components/schemas/Signature'
          description: An array of fee payer's signature objects. A signature object contains three fields (V, R, and S). V contains ECDSA recovery id. R contains ECDSA signature r while S contains ECDSA signature s.
        feeRatio:
          type: string
          format: hex
          description: (optional) Fee ratio of the fee payer. If it is 30, 30% of the fee will be paid by the fee payer. 70% will be paid by the sender.
        from:
          type: string
          format: 20-byte DATA
          description: Address of the sender.
        gas:
          type: string
          format: hex
          description: Gas provided by the sender.
        gasPrice:
          type: string
          format: hex
          description: Gas price provided by the sender in peb.
        gasUsed:
          type: string
          format: hex
          description: The amount of gas used by this specific transaction alone.
        humanReadable:
          type: boolean
          description: (optional) true if the address is humanReadable, false if the address is not humanReadable.
        key:
          type: string
          description: (optional) Key of the newly created account.
        input:
          type: string
          format: DATA
          description: (optional) The data sent along with the transaction.
        logs:
          type: array
          items:
            type: object
          description: Array of log objects, which this transaction generated.
        logsBloom:
          type: string
          format: 256-byte DATA
          description: Bloom filter for light clients to quickly retrieve related logs.
        nonce:
          type: string
          format: hex
          description: The number of transactions made by the sender prior to this one.
        senderTxHash:
          type: string
          format: (optional) 32-byte DATA
          description: Hash of the tx without the fee payer's address and signature. This value is always the same as the value of transactionHash for non fee-delegated transactions.
        signature:
          type: array
          items:
            $ref: '#/components/schemas/Signature'
          description: An array of signature objects. A signature object contains three fields (V, R, and S). V contains ECDSA recovery id. R contains ECDSA signature r while S contains ECDSA signature s.
        status:
          type: string
          format: hex
          description: Either 1 (success) or 0 (failure).
        txError:
          type: string
          format: hex
          description: (optional) detailed error code if status is equal to zero.
        to:
          type: string
          format: 20-byte DATA
          description: Address of the receiver. null when it is a contract creation transaction.
        transactionHash:
          type: string
          format: 32-byte DATA
          description: Hash of the transaction.
        transactionIndex:
          type: string
          format: hex
          description: Integer of the transaction index position in the block.
        type:
          type: string
          description: A string representing the type of the transaction.
        typeInt:
          type: number
          description: An integer representing the type of the transaction.
        value:
          type: string
          format: hex
          description: Value transferred in peb.
      example:
        blockHash: '0x4d97cf1f686a925ed4f1ad42c635cedb54974fe23a2941c7825e1ed3163c0e41'
        blockNumber: '0x7008'
        contractAddress: null
        feePayer: '0xa9d2cc2bb853163b6eadfb6f962d72f7e00bc2e6'
        feePayerSignatures:
          - V: '0x4e44'
            R: '0xa665e17d92e1c671c8b062cecb19790d49138a21854fc15c460c91035b1884e'
            S: '0x17165688acc01736f1221a39399e3aac7e1ece14731fcab31631e3e4a59b7441'
        from: '0xab0833d744a8943fe3c783f9cc70c13cbd70fcf4'
        gas: '0xdbba0'
        gasPrice: '0x5d21dba00'
        gasUsed: '0x7918'
        logs: []
        logsBloom: '0x
        nonce: '0x26'
        senderTxHash: '0x18fe9e1007da7d20aad77778557fb8acc58c80054daba65124c8c843aadd3478'
        signatures:
          - V: '0x4e44'
            R: '0x1b6bb3d996d903d0528565d13e8d9d122b2220ed09c5baf384114193a6977027'
            S: '0x20c506ce9f1bdd42183c40c44f414a3930f339f856e8be3cfcdf5ca0852fd378'
        status: '0x1'
        to: '0x15a9119104e1bf0ec6d408b3cc188685e4402a2c'
        transactionHash: '0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67'
        transactionIndex: '0x0'
        type: TxTypeFeeDelegatedValueTransfer
        typeInt: 9
        value: '0x1'
    schemas-KlayGetTransactionByHashResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/schemas-TransactionObject'
    KlayPendingTransactionsReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: klay_pendingTransactions
    components-schemas-TransactionObject:
      type: object
      required:
        - type
        - nonce
        - gasPrice
        - maxFeePerGas
        - maxPriorityFeePerGas
        - gas
        - value
        - v
        - r
        - s
        - chainId
        - accessList
        - hash
      properties:
        type:
          type: string
          format: hex
          description: An integer representing the type of the transaction.
        nonce:
          type: string
          format: hex
          description: The block number where this transaction was in.
        gasPrice:
          type: string
          format: hex
          description: Gas price provided by the sender in peb. null when it is not a legacy transaction.
        maxFeePerGas:
          type: string
          format: hex
          description: A maximum amount to pay for the transaction to execute. null when it is a legacy transaction.
        maxPriorityFeePerGas:
          type: string
          format: hex
          description: Gas tip cap for dynamic fee transaction in peb. null when it is a legacy transaction.
        gas:
          type: string
          format: hex
          description: Gas provided by the sender.
        value:
          type: string
          format: hex
          description: Integer of values sent with this transaction.
        v:
          type: string
          format: hex
          description: ECDSA recovery id.
        r:
          type: string
          format: 32-byte DATA
          description: ECDSA signature r.
        s:
          type: string
          format: 32-byte DATA
          description: ECDSA signature s.
        chainId:
          type: string
          format: hex
          description: Chain id set on the requested node.
        accessList:
          type: array
          items:
            type: string
          description: An array of accessList.
        hash:
          type: string
          format: 32-byte DATA
          description: Hash of the transaction.
    KlayPendingTransactionsResp:
      type: object
      properties:
        result:
          type: array
          description: An array of transactions.
          items:
            $ref: '#/components/schemas/components-schemas-TransactionObject'
          example:
            - blockHash: null
              blockNumber: null
              from: '0xca7a99380131e6c76cfa622396347107aeedca2d'
              gas: '0x5208'
              gasPrice: '0x5d21dba00'
              maxFeePerGas: '0x5d21dba00'
              maxPriorityFeePerGas: '0x5d21dba00'
              hash: '0xb5cd867ccc356b86634092919fb1acf4e315618d6c804df3ec3d30d66b6baba5'
              input: 0x
              nonce: '0xdb'
              to: '0x3e2ac308cd78ac2fe162f9522deb2b56d9da9499'
              transactionIndex: null
              value: '0x1'
              type: '0x2'
              accessList: []
              chainId: '0x2edaf'
              v: '0x1'
              r: '0x73992e7c3b9f6cd73176969efa8509d8e9ae0739e24b03d514508f8ef03f19ef'
              s: '0x7035dd8639e82ea3ba922ff02e1f21f4cff92d0de33050934f5c70908d61e8c3'
    SendArgs:
      type: object
      required:
        - nonce
        - to
      properties:
        accessList:
          type: array
          items:
            type: object
            required:
              - address
              - storageKeys
            properties:
              address:
                type: string
                format: hex
              storageKeys:
                type: array
                items:
                  type: string
                  format: hex
        chainId:
          type: string
          format: hex
        data:
          type: string
          format: hex
        from:
          type: string
          format: hex
        gas:
          type: string
          format: hex
        gasPrice:
          type: string
          format: hex
        input:
          type: string
          format: hex
        maxFeePerGas:
          type: string
          format: hex
        maxPriorityFeePerGas:
          type: string
          format: hex
        nonce:
          type: string
          format: hex
        to:
          type: string
          format: hex
        value:
          type: string
          format: hex
    KlayResendReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_resend
        params:
          type: array
          items:
            properties:
              SendArgs:
                $ref: '#/components/schemas/SendArgs'
              GasPrice:
                title: GasPrice
                description: Hex representation of the integer
                type: string
                format: hex
              GasLimit:
                title: GasLimit
                description: Hex representation of a uint64
                type: string
                format: hex
          example:
            - from: '0xca7a99380131e6c76cfa622396347107aeedca2d'
              to: '0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee'
              value: '0x1'
              gas: '0x9999'
              maxFeePerGas: '0x5d21dba00'
              maxPriorityPerGas: '0x5d21dba00'
            - '0x5d21dba99'
            - '0x5d21dba99'
    KlaySendRawTransactionReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_sendRawTransaction
        params:
          type: array
          description: The signed transaction data.
          items:
            type: string
            format: DATA
            title: SingedTransactionData
            description: The signed transaction data.
          example:
            - '0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67'
    TxTypeLegacyTransaction:
      title: TxTypeLegacyTransaction
      type: object
      required:
        - from
        - data
      description: TxTypeLegacyTransaction represents a type of transaction existed previously in Klaytn. This transaction type exists to support compatibility. For more information, see TxTypeLegacyTransaction.
      properties:
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        to:
          type: string
          format: 20-byte DATA
          description: (optional when creating a new contract) The address to which the transaction is directed.
        gas:
          type: string
          format: hex
          description: (optional, default 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.
        gasPrice:
          type: string
          format: hex
          description: (optional, default 25000000000 Peb) Integer of the gasPrice. The transaction fee is calculated by the multiplication of gas and gasPrice.
        value:
          type: string
          format: hex
          description: (optional) Integer of the value sent with this transaction.
        data:
          type: string
          format: DATA
          description: The compiled byte code of a contract to deploy or data (function indicator and parameter values) required to call a contract.
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
    TxTypeValueTransfer:
      title: TxTypeValueTransfer
      type: object
      required:
        - typeInt
        - from
        - to
        - value
      description: TxTypeValueTransfer is used when a user wants to send KLAY. For more information, see TxTypeValueTransfer.
      properties:
        typeInt:
          type: number
          format: integer
          description: The integer indicating TxTypeValueTransfer 8
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        to:
          type: string
          format: 20-byte DATA
          description: The address to which the transaction is directed.
        gas:
          type: string
          format: hex
          description: (optional, default 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.
        gasPrice:
          type: string
          format: hex
          description: (optional, default 25000000000 Peb) Integer of the gasPrice. The transaction fee is calculated by the multiplication of gas and gasPrice.
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        value:
          type: string
          format: hex
          description: Integer of the value sent with this transaction.
    SignatureArray:
      title: SignatureArray
      type: array
      items:
        $ref: '#/components/schemas/Signature'
      description: (optional - only for klay_sendTransactionAsFeePayer API) An array of signature objects. A signature object contains three fields (V, R, and S). V contains ECDSA recovery id. R contains ECDSA signature r while S contains ECDSA signature s.
    TxTypeFeeDelegatedValueTransfer:
      title: TxTypeFeeDelegatedValueTransfer
      type: object
      required:
        - typeInt
        - from
        - to
        - value
        - feePayer
      description: Fee delegating version of TxTypeValueTransfer. For more information, see TxTypeFeeDelegatedValueTransfer.
      properties:
        typeInt:
          type: number
          format: integer
          description: The integer indicating TxTypeFeeDelegatedValueTransfer 9
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        to:
          type: string
          format: 20-byte DATA
          description: The address to which the transaction is directed.
        gas:
          type: string
          format: hex
          description: (optional, default 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.
        gasPrice:
          type: string
          format: hex
          description: (optional, default 25000000000 Peb) Integer of the gasPrice. The transaction fee is calculated by the multiplication of gas and gasPrice.
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        value:
          type: string
          format: hex
          description: Integer of the value sent with this transaction.
        feePayer:
          type: string
          format: 20-byte DATA
          description: The address which pays the transaction fee.
        signatures:
          $ref: '#/components/schemas/SignatureArray'
    TxTypeFeeDelegatedValueTransferWithRatio:
      title: TxTypeFeeDelegatedValueTransferWithRatio
      type: object
      required:
        - typeInt
        - from
        - to
        - value
        - feePayer
        - feeRatio
      description: Partial fee delegating version of TxTypeValueTransfer. For more information, see TxTypeFeeDelegatedValueTransferWithRatio.
      properties:
        typeInt:
          type: number
          format: integer
          description: The integer indicating TxTypeFeeDelegatedValueTransferWithRatio 10
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        to:
          type: string
          format: 20-byte DATA
          description: The address to which the transaction is directed.
        gas:
          type: string
          format: hex
          description: (optional, default 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.
        gasPrice:
          type: string
          format: hex
          description: (optional, default 25000000000 Peb) Integer of the gasPrice used for each paid gas.
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        value:
          type: string
          format: hex
          description: Integer of the value sent with this transaction.
        feePayer:
          type: string
          format: 20-byte DATA
          description: The fee payer address of the transaction.
        feeRatio:
          type: number
          format: integer
          description: Fee ratio of the fee payer. If it is 30, 30% of the fee will be paid by the fee payer. 70% will be paid by the sender. The range of fee ratio is 1 ~ 99, if it is out of range, the transaction will not be accepted.
        signatures:
          $ref: '#/components/schemas/SignatureArray'
    TxTypeValueTransferMemo:
      title: TxTypeValueTransferMemo
      type: object
      required:
        - typeInt
        - from
        - to
        - value
        - input
      description: TxTypeValueTransferMemo is used when a user wants to send KLAY with a specific message. For more information, see TxTypeValueTransferMemo.
      properties:
        typeInt:
          type: number
          format: integer
          description: The integer indicating TxTypeValueTransferMemo 16
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        to:
          type: string
          format: 20-byte DATA
          description: The address to which the transaction is directed.
        gas:
          type: string
          format: hex
          description: (optional, default 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.
        gasPrice:
          type: string
          format: hex
          description: (optional, default 25000000000 Peb) Integer of the gasPrice. The transaction fee is calculated by the multiplication of gas and gasPrice.
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        value:
          type: string
          format: hex
          description: Integer of the value sent with this transaction.
        input:
          type: string
          format: DATA
          description: The data sent along with the transaction.
    TxTypeFeeDelegatedValueTransferMemo:
      title: TxTypeFeeDelegatedValueTransferMemo
      type: object
      required:
        - typeInt
        - from
        - to
        - value
        - input
        - feePayer
      description: Fee delegating version of TxTypeValueTransferMemo. For more information, see TxTypeFeeDelegatedValueTransferMemo.
      properties:
        typeInt:
          type: number
          format: integer
          description: The integer indicating TxTypeFeeDelegatedValueTransferMemo 17
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        to:
          type: string
          format: 20-byte DATA
          description: The address to which the transaction is directed.
        gas:
          type: string
          format: hex
          description: (optional, default 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.
        gasPrice:
          type: string
          format: hex
          description: (optional, default 25000000000 Peb) Integer of the gasPrice used for each paid gas.
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        value:
          type: string
          format: hex
          description: Integer of the value sent with this transaction.
        input:
          type: string
          format: DATA
          description: The data sent along with the transaction.
        feePayer:
          type: string
          format: 20-byte DATA
          description: The fee payer address of the transaction.
        signatures:
          $ref: '#/components/schemas/SignatureArray'
    TxTypeFeeDelegatedValueTransferMemoWithRatio:
      title: TxTypeFeeDelegatedValueTransferMemoWithRatio
      type: object
      required:
        - typeInt
        - from
        - to
        - value
        - input
        - feePayer
        - feeRatio
      description: Partial fee delegating version of TxTypeValueTransferMemo. For more information, see TxTypeFeeDelegatedValueTransferMemoWithRatio.
      properties:
        typeInt:
          type: number
          format: integer
          description: The integer indicating TxTypeFeeDelegatedValueTransferMemoWithRatio 18
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        to:
          type: string
          format: 20-byte DATA
          description: The address to which the transaction is directed.
        gas:
          type: string
          format: hex
          description: (optional, default 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.
        gasPrice:
          type: string
          format: hex
          description: (optional, default 25000000000 Peb) Integer of the gasPrice used for each paid gas.
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        value:
          type: string
          format: hex
          description: Integer of the value sent with this transaction.
        input:
          type: string
          format: DATA
          description: The data sent along with the transaction.
        feePayer:
          type: string
          format: 20-byte DATA
          description: The fee payer address of the transaction.
        feeRatio:
          type: string
          format: hex
          description: Fee ratio of the fee payer. If it is 30, 30% of the fee will be paid by the fee payer. 70% will be paid by the sender. The range of fee ratio is 1 ~ 99, if it is out of range, the transaction will not be accepted.
        signatures:
          $ref: '#/components/schemas/SignatureArray'
    TxTypeAccountUpdate:
      title: TxTypeAccountUpdate
      type: object
      required:
        - typeInt
        - from
        - key
      description: TxTypeAccountUpdate updates the key of the given account. For more information, see TxTypeAccountUpdate.
      properties:
        typeInt:
          type: number
          format: integer
          description: The integer indicating TxTypeAccountUpdate 32
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        gas:
          type: string
          format: hex
          description: (optional, default 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.
        gasPrice:
          type: string
          format: hex
          description: (optional, default 25000000000 Peb) Integer of the gasPrice used for each paid gas.
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        key:
          type: string
          format: DATA
          description: The new account key of the from account in RLP encoded format. For more information about the account key, see Account Key.
    TxTypeFeeDelegatedAccountUpdate:
      title: TxTypeFeeDelegatedAccountUpdate
      type: object
      required:
        - typeInt
        - from
        - key
        - feePayer
      description: Fee delegating version of TxTypeAccountUpdate. For more information, see TxTypeFeeDelegatedAccountUpdate.
      properties:
        typeInt:
          type: number
          format: integer
          description: The integer indicating TxTypeFeeDelegatedAccountUpdate 33
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        gas:
          type: string
          format: hex
          description: (optional, default 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.
        gasPrice:
          type: string
          format: hex
          description: (optional, default 25000000000 Peb) Integer of the gasPrice used for each paid gas.
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        key:
          type: string
          format: DATA
          description: The new account key of the from account in RLP encoded format. For more information about the account key, see Account Key.
        feePayer:
          type: string
          format: 20-byte DATA
          description: The fee payer address of the transaction.
        signatures:
          $ref: '#/components/schemas/SignatureArray'
    TxTypeFeeDelegatedAccountUpdateWithRatio:
      title: TxTypeFeeDelegatedAccountUpdateWithRatio
      type: object
      required:
        - typeInt
        - from
        - key
        - feePayer
        - feeRatio
      properties:
        typeInt:
          type: number
          description: 'The integer indicating TxTypeFeeDelegatedAccountUpdateWithRatio: 34'
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        gas:
          type: string
          format: hex
          description: '(optional, default: 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.'
        gasPrice:
          type: string
          format: hex
          description: '(optional, default: 25000000000 Peb) Integer of the gasPrice used for each paid gas.'
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        key:
          type: string
          format: DATA
          description: The new account key of the from account in RLP encoded format. For more information about the account key, see Account Key.
        feePayer:
          type: string
          format: 20-byte DATA
          description: The fee payer address of the transaction.
        feeRatio:
          type: string
          format: hex
          description: Fee ratio of the fee payer. If it is 30, 30% of the fee will be paid by the fee payer. 70% will be paid by the sender. The range of fee ratio is 1 ~ 99, if it is out of range, the transaction will not be accepted.
        signatures:
          $ref: '#/components/schemas/SignatureArray'
    TxTypeSmartContractDeploy:
      title: TxTypeSmartContractDeploy
      type: object
      required:
        - typeInt
        - from
        - to
        - value
        - input
        - humanReadable
        - codeFormat
      properties:
        typeInt:
          type: number
          description: 'The integer indicating TxTypeSmartContractDeploy: 40'
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        to:
          type: string
          format: 20-byte DATA
          description: The address to which the transaction is directed.
        gas:
          type: string
          format: hex
          description: '(optional, default: 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.'
        gasPrice:
          type: string
          format: hex
          description: '(optional, default: 25000000000 Peb) Integer of the gasPrice used for each paid gas.'
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        value:
          type: string
          format: hex
          description: Integer of the value sent with this transaction.
        input:
          type: string
          format: DATA
          description: The data sent along with the transaction.
        humanReadable:
          type: boolean
          description: true if the address is humanReadable, false if the address is not humanReadable. Currently, the value should be false. Human-readable addresses will be supported later.
        codeFormat:
          type: string
          format: hex
          description: The code format of smart contract code. The value 0 indicates EVM.
    TxTypeFeeDelegatedSmartContractDeploy:
      title: TxTypeFeeDelegatedSmartContractDeploy
      type: object
      required:
        - typeInt
        - from
        - to
        - value
        - input
        - humanReadable
        - codeFormat
        - feePayer
      properties:
        typeInt:
          type: number
          description: 'The integer indicating TxTypeFeeDelegatedSmartContractDeploy: 41'
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        to:
          type: string
          format: 20-byte DATA
          description: The address to which the transaction is directed.
        gas:
          type: string
          format: hex
          description: '(optional, default: 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.'
        gasPrice:
          type: string
          format: hex
          description: '(optional, default: 25000000000 Peb) Integer of the gasPrice used for each paid gas.'
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        value:
          type: string
          format: hex
          description: Integer of the value sent with this transaction.
        input:
          type: string
          format: DATA
          description: The data sent along with the transaction.
        humanReadable:
          type: boolean
          description: true if the address is humanReadable, false if the address is not humanReadable. Currently, the value should be false. Human-readable addresses will be supported later.
        codeFormat:
          type: string
          format: hex
          description: The code format of smart contract code. The value 0 indicates EVM.
        feePayer:
          type: string
          format: 20-byte DATA
          description: The fee payer address of the transaction.
        signatures:
          $ref: '#/components/schemas/SignatureArray'
    TxTypeFeeDelegatedSmartContractDeployWithRatio:
      title: TxTypeFeeDelegatedSmartContractDeployWithRatio
      type: object
      required:
        - typeInt
        - from
        - to
        - value
        - input
        - humanReadable
        - codeFormat
        - feePayer
        - feeRatio
      properties:
        typeInt:
          type: number
          description: 'The integer indicating TxTypeFeeDelegatedSmartContractDeployWithRatio: 42'
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        to:
          type: string
          format: 20-byte DATA
          description: The address to which the transaction is directed.
        gas:
          type: string
          format: hex
          description: '(optional, default: 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.'
        gasPrice:
          type: string
          format: hex
          description: '(optional, default: 25000000000 Peb) Integer of the gasPrice used for each paid gas.'
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        value:
          type: string
          format: hex
          description: Integer of the value sent with this transaction.
        input:
          type: string
          format: DATA
          description: The data sent along with the transaction.
        humanReadable:
          type: boolean
          description: true if the address is humanReadable, false if the address is not humanReadable. Currently, the value should be false. Human-readable addresses will be supported later.
        codeFormat:
          type: string
          format: hex
          description: The code format of smart contract code. The value 0 indicates EVM.
        feePayer:
          type: string
          format: 20-byte DATA
          description: The fee payer address of the transaction.
        signatures:
          $ref: '#/components/schemas/SignatureArray'
        feeRatio:
          type: string
          format: hex
          description: Fee ratio of the fee payer. If it is 30, 30% of the fee will be paid by the fee payer. 70% will be paid by the sender. The range of fee ratio is 1 ~ 99, if it is out of range, the transaction will not be accepted.
    TxTypeSmartContractExecution:
      title: TxTypeSmartContractExecution
      type: object
      required:
        - typeInt
        - from
        - to
        - value
        - input
      properties:
        typeInt:
          type: number
          description: 'The integer indicating TxTypeSmartContractExecution: 48'
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        to:
          type: string
          format: 20-byte DATA
          description: The address to which the transaction is directed.
        gas:
          type: string
          format: hex
          description: '(optional, default: 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.'
        gasPrice:
          type: string
          format: hex
          description: '(optional, default: 25000000000 Peb) Integer of the gasPrice used for each paid gas.'
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        value:
          type: string
          format: hex
          description: Integer of the value sent with this transaction.
        input:
          type: string
          format: DATA
          description: The data sent along with the transaction.
    TxTypeFeeDelegatedSmartContractExecution:
      title: TxTypeFeeDelegatedSmartContractExecution
      type: object
      required:
        - typeInt
        - from
        - to
        - value
        - input
        - feePayer
      properties:
        typeInt:
          type: number
          description: 'The integer indicating TxTypeFeeDelegatedSmartContractExecution: 49'
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        to:
          type: string
          format: 20-byte DATA
          description: The address to which the transaction is directed.
        gas:
          type: string
          format: hex
          description: '(optional, default: 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.'
        gasPrice:
          type: string
          format: hex
          description: '(optional, default: 25000000000 Peb) Integer of the gasPrice used for each paid gas.'
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        value:
          type: string
          format: hex
          description: Integer of the value sent with this transaction.
        input:
          type: string
          format: DATA
          description: The data sent along with the transaction.
        feePayer:
          type: string
          format: 20-byte DATA
          description: The fee payer address of the transaction.
        signatures:
          $ref: '#/components/schemas/SignatureArray'
    TxTypeFeeDelegatedSmartContractExecutionWithRatio:
      title: TxTypeFeeDelegatedSmartContractExecutionWithRatio
      type: object
      required:
        - typeInt
        - from
        - to
        - value
        - input
        - feePayer
        - feeRatio
      properties:
        typeInt:
          type: number
          description: 'The integer indicating TxTypeFeeDelegatedSmartContractExecutionWithRatio: 50'
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        to:
          type: string
          format: 20-byte DATA
          description: The address to which the transaction is directed.
        gas:
          type: string
          format: hex
          description: '(optional, default: 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.'
        gasPrice:
          type: string
          format: hex
          description: '(optional, default: 25000000000 Peb) Integer of the gasPrice used for each paid gas.'
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        value:
          type: string
          format: hex
          description: Integer of the value sent with this transaction.
        input:
          type: string
          format: DATA
          description: The data sent along with the transaction.
        feePayer:
          type: string
          format: 20-byte DATA
          description: The fee payer address of the transaction.
        feeRatio:
          type: string
          format: hex
          description: Fee ratio of the fee payer. If it is 30, 30% of the fee will be paid by the fee payer. 70% will be paid by the sender. The range of fee ratio is 1 ~ 99, if it is out of range, the transaction will not be accepted.
        signatures:
          $ref: '#/components/schemas/SignatureArray'
    TxTypeCancel:
      title: TxTypeCancel
      type: object
      required:
        - typeInt
        - from
      properties:
        typeInt:
          type: number
          description: 'The integer indicating TxTypeCancel: 56'
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        gas:
          type: string
          format: hex
          description: '(optional, default: 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.'
        gasPrice:
          type: string
          format: hex
          description: '(optional, default: 25000000000 Peb) Integer of the gasPrice used for each paid gas.'
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
    TxTypeFeeDelegatedCancel:
      title: TxTypeFeeDelegatedCancel
      type: object
      required:
        - typeInt
        - from
        - feePayer
      properties:
        typeInt:
          type: number
          description: 'The integer indicating TxTypeFeeDelegatedCancel: 57'
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        gas:
          type: string
          format: hex
          description: '(optional, default: 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.'
        gasPrice:
          type: string
          format: hex
          description: '(optional, default: 25000000000 Peb) Integer of the gasPrice used for each paid gas.'
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        feePayer:
          type: string
          format: 20-byte DATA
          description: The fee payer address of the transaction.
        signatures:
          $ref: '#/components/schemas/SignatureArray'
    TxTypeFeeDelegatedCancelWithRatio:
      title: TxTypeFeeDelegatedCancelWithRatio
      type: object
      required:
        - typeInt
        - from
        - feePayer
        - feeRatio
      properties:
        typeInt:
          type: number
          description: 'The integer indicating TxTypeFeeDelegatedCancelWithRatio: 58'
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        gas:
          type: string
          format: hex
          description: '(optional, default: 90000) Integer of the gas provided for the transaction execution. Unused gas will be refunded to the sender. If the specified gas is not enough to execute the transaction, the transaction is reverted.'
        gasPrice:
          type: string
          format: hex
          description: '(optional, default: 25000000000 Peb) Integer of the gasPrice used for each paid gas.'
        nonce:
          type: string
          format: hex
          description: (optional) Integer of a nonce.
        feePayer:
          type: string
          format: 20-byte DATA
          description: The fee payer address of the transaction.
        feeRatio:
          type: string
          format: hex
          description: Fee ratio of the fee payer. If it is 30, 30% of the fee will be paid by the fee payer. 70% will be paid by the sender. The range of fee ratio is 1 ~ 99, if it is out of range, the transaction will not be accepted.
        signatures:
          $ref: '#/components/schemas/SignatureArray'
    KlaytnTransactionTypes:
      type: object
      oneOf:
        - $ref: '#/components/schemas/TxTypeLegacyTransaction'
        - $ref: '#/components/schemas/TxTypeValueTransfer'
        - $ref: '#/components/schemas/TxTypeFeeDelegatedValueTransfer'
        - $ref: '#/components/schemas/TxTypeFeeDelegatedValueTransferWithRatio'
        - $ref: '#/components/schemas/TxTypeValueTransferMemo'
        - $ref: '#/components/schemas/TxTypeFeeDelegatedValueTransferMemo'
        - $ref: '#/components/schemas/TxTypeFeeDelegatedValueTransferMemoWithRatio'
        - $ref: '#/components/schemas/TxTypeAccountUpdate'
        - $ref: '#/components/schemas/TxTypeFeeDelegatedAccountUpdate'
        - $ref: '#/components/schemas/TxTypeFeeDelegatedAccountUpdateWithRatio'
        - $ref: '#/components/schemas/TxTypeSmartContractDeploy'
        - $ref: '#/components/schemas/TxTypeFeeDelegatedSmartContractDeploy'
        - $ref: '#/components/schemas/TxTypeFeeDelegatedSmartContractDeployWithRatio'
        - $ref: '#/components/schemas/TxTypeSmartContractExecution'
        - $ref: '#/components/schemas/TxTypeFeeDelegatedSmartContractExecution'
        - $ref: '#/components/schemas/TxTypeFeeDelegatedSmartContractExecutionWithRatio'
        - $ref: '#/components/schemas/TxTypeCancel'
        - $ref: '#/components/schemas/TxTypeFeeDelegatedCancel'
        - $ref: '#/components/schemas/TxTypeFeeDelegatedCancelWithRatio'
    KlaySendTransactionReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_sendTransaction
        params:
          type: array
          items:
            $ref: '#/components/schemas/KlaytnTransactionTypes'
          example:
            - from: '0xb60e8dd61c5d32be8058bb8eb970870f07233155'
              to: '0xd46e8dd67c5d32be8058bb8eb970870f07244567'
              gas: '0x76c0'
              gasPrice: '0x5d21dba00'
              value: '0x9184e72a'
              input: '0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675'
    KlaySendTransactionAsFeePayerReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_sendTransactionAsFeePayer
        params:
          type: array
          items:
            $ref: '#/components/schemas/KlaytnTransactionTypes'
          example:
            - typeInt: 18
              from: '0xcd01b2b44584fb143824c1ea0231bebaea826b9d'
              to: '0x44711E89b0c23845b5B2ed9D3716BA42b8a3e075'
              gas: '0x4a380'
              gasPrice: '0x5d21dba00'
              nonce: '0x2c'
              value: '0xf4'
              input: '0xb3f98adc0000000000000000000000000000000000000000000000000000000000000001'
              feePayer: '0xcd01b2b44584fb143824c1ea0231bebaea826b9d'
              feeRatio: 30
              signatures:
                - V: '0x4e43'
                  R: '0xd3ff5ca7bdd0120d79e8aa875593d05022fe74ce2b7a0594218d53c0fdca7fa9'
                  S: '0x2c100e69d2455afc9393e017514063da18b18db6f7e811d0aeaf6002515b58ef'
    KlaySignTransactionReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_signTransaction
        params:
          type: array
          items:
            $ref: '#/components/schemas/KlaytnTransactionTypes'
          example:
            - from: '0x77982323172e5b6182539d3522d5a33a944206d4'
              to: '0xcd6bfdb523a4d030890d28bf1eb6ef36307c9aaa'
              value: '0x10000'
              gas: '0x1000000'
              nonce: '0x2'
              gasprice: '0x25000000000'
    KlaySignTransactionResp:
      type: object
      properties:
        result:
          type: object
          properties:
            raw:
              type: string
              description: Signed raw transaction
            tx:
              type: object
              description: Transaction object including the sender's signature
          example:
            raw: '0xf86c0286025000000000840100000094cd6bfdb523a4d030890d28bf1eb6ef36307c9aaa8301000080820fe8a056d2ddd231c3c111687ab351d339240db18cd721e5aa33c601dd4fc3927fb4d1a03443443392517aa7da082aa0a00b9ee5e3e1ee007d22e57cd9ff55b5ddbf4a64'
            tx:
              nonce: '0x2'
              gasPrice: '0x5d21dba00'
              gas: '0x1000000'
              to: '0xcd6bfdb523a4d030890d28bf1eb6ef36307c9aaa'
              value: '0x10000'
              input: 0x
              v: '0xfe8'
              r: '0x56d2ddd231c3c111687ab351d339240db18cd721e5aa33c601dd4fc3927fb4d1'
              s: '0x3443443392517aa7da082aa0a00b9ee5e3e1ee007d22e57cd9ff55b5ddbf4a64'
              hash: '0xb53cc9128a19c3916c0de1914725b7337bba84666c2556d8682c72ca34c6874c'
    KlaySignTransactionAsFeePayerReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_signTransactionAsFeePayer
        params:
          type: array
          items:
            $ref: '#/components/schemas/KlaytnTransactionTypes'
          example:
            - from: '0x77982323172e5b6182539d3522d5a33a944206d4'
              to: '0xcd6bfdb523a4d030890d28bf1eb6ef36307c9aaa'
              value: '0x10000'
              gas: '0x1000000'
              nonce: '0x2'
              gasprice: '0x25000000000'
    KlaySignTransactionAsFeePayerResp:
      type: object
      properties:
        result:
          type: object
          properties:
            raw:
              type: string
              description: Signed raw transaction
            tx:
              type: object
              description: Transaction object including the fee payer's signature
          example:
            raw: '0xf86c0286025000000000840100000094cd6bfdb523a4d030890d28bf1eb6ef36307c9aaa8301000080820fe8a056d2ddd231c3c111687ab351d339240db18cd721e5aa33c601dd4fc3927fb4d1a03443443392517aa7da082aa0a00b9ee5e3e1ee007d22e57cd9ff55b5ddbf4a64'
            tx:
              nonce: '0x2'
              gasPrice: '0x5d21dba00'
              gas: '0x1000000'
              to: '0xcd6bfdb523a4d030890d28bf1eb6ef36307c9aaa'
              value: '0x10000'
              input: 0x
              v: '0xfe8'
              r: '0x56d2ddd231c3c111687ab351d339240db18cd721e5aa33c601dd4fc3927fb4d1'
              s: '0x3443443392517aa7da082aa0a00b9ee5e3e1ee007d22e57cd9ff55b5ddbf4a64'
              hash: '0xb53cc9128a19c3916c0de1914725b7337bba84666c2556d8682c72ca34c6874c'
    KlayGasPriceAtReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_gasPriceAt
        params:
          type: array
          items:
            properties:
              BlockNumberOrHex:
                oneOf:
                  - $ref: '#/components/schemas/IntegerBlockNumber'
                  - $ref: '#/components/schemas/HexadecimalBlockNumber'
          example:
            - '0x64'
    KlayGetChainConfigReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getChainConfig
        params:
          type: array
          items:
            $ref: '#/components/schemas/BlockNumberOrTag'
          example:
            - 100
    KlayGetChainConfigResp:
      type: object
      properties:
        result:
          type: object
          properties:
            chainId:
              type: integer
            deriveShaImpl:
              type: string
            ethTxTypeCompatibleBlock:
              type: integer
            governance:
              type: object
              properties:
                govParamContract:
                  type: string
                governanceMode:
                  type: string
                governingNode:
                  type: string
                kip71:
                  type: object
                  properties:
                    basefeedenominator:
                      type: integer
                    gastarget:
                      type: number
                    lowerboundbasefee:
                      type: number
                    maxblockgasusedforbasefee:
                      type: number
                    upperboundbasefee:
                      type: number
                reward:
                  type: object
                  properties:
                    deferredTxFee:
                      type: boolean
                    kip82ratio:
                      type: string
                    minimumStake:
                      type: integer
                    mintingAmount:
                      type: number
                    proposerUpdateInterval:
                      type: integer
                    ratio:
                      type: string
                    stakingUpdateInterval:
                      type: integer
                    useGiniCoeff:
                      type: boolean
            istanbul:
              type: object
              properties:
                epoch:
                  type: integer
                policy:
                  type: integer
                sub:
                  type: integer
            istanbulCompatibleBlock:
              type: integer
            koreCompatibleBlock:
              type: integer
            londonCompatibleBlock:
              type: integer
            magmaCompatibleBlock:
              type: integer
            unitPrice:
              type: number
          example:
            chainId: 1001
            istanbulCompatibleBlock: 75373312
            londonCompatibleBlock: 80295291
            ethTxTypeCompatibleBlock: 86513895
            magmaCompatibleBlock: 98347376
            koreCompatibleBlock: 111736800
            kip103CompatibleBlock: 119145600
            kip103ContractAddress: '0xd5ad6d61dd87edabe2332607c328f5cc96aecb95'
            istanbul:
              epoch: 604800
              policy: 2
              sub: 22
            unitPrice: 25000000000
            deriveShaImpl: 2
            governance:
              governingNode: '0x99fb17d324fa0e07f23b49d09028ac0919414db6'
              governanceMode: single
              govParamContract: '0x0000000000000000000000000000000000000000'
              reward:
                mintingAmount: 9600000000000000000
                ratio: 34/54/12
                kip82ratio: 20/80
                useGiniCoeff: true
                deferredTxFee: true
                stakingUpdateInterval: 86400
                proposerUpdateInterval: 3600
                minimumStake: 5000000
              kip71:
                lowerboundbasefee: 25000000000
                upperboundbasefee: 750000000000
                gastarget: 30000000
                maxblockgasusedforbasefee: 60000000
                basefeedenominator: 20
    KlayGetFilterChangesResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/KlayArrayOfLog'
    KlayGetFilterLogsResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/KlayArrayOfLog'
    FilterOptions:
      title: FilterOptions
      type: object
      properties:
        fromBlock:
          allOf:
            - title: fromBlock
              default: latest
              description: (optional, default "latest") Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter.
            - $ref: '#/components/schemas/BlockNumberOrTag'
        toBlock:
          allOf:
            - title: toBlock
              default: latest
              description: (optional, default "latest") Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter.
            - $ref: '#/components/schemas/BlockNumberOrTag'
        address:
          oneOf:
            - type: string
              format: 20-byte DATA
              title: Address
              description: Contract address
            - type: array
              title: ArrayOfAddress
              items:
                type: string
                format: 20-byte DATA
                description: Address
          description: (optional) Contract address or a list of addresses from which logs should originate.
        topics:
          type: array
          items:
            type: string
            format: 32-byte DATA
          description: (optional) Array of 32-byte DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with “or” options.
        blockHash:
          type: string
          format: 32-byte DATA
          description: (optional) A filter option that restricts the logs returned to the single block with the 32-byte hash blockHash. Using blockHash is equivalent to fromBlock = toBlock = the block number with hash blockHash. If blockHash is present in in the filter criteria, then neither fromBlock nor toBlock are allowed
    KlayGetLogsResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/KlayArrayOfLog'
    Topics:
      type: array
      description: (optional) Array of 32-byte DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with "or" options.
      items:
        type: string
        format: 32-byte DATA
    schemas-FilterOptions:
      title: FilterOptions
      type: object
      properties:
        fromBlock:
          allOf:
            - $ref: '#/components/schemas/BlockNumberOrTag'
            - title: BlockNumberOrTag
              description: |
                (optional, default: "latest") Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter.
        toBlock:
          allOf:
            - $ref: '#/components/schemas/BlockNumberOrTag'
            - title: BlockNumberOrTag
              description: |
                (optional, default: "latest") Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter.
        address:
          oneOf:
            - type: array
              items:
                anyOf:
                  - $ref: '#/components/schemas/Address'
            - $ref: '#/components/schemas/Address'
          description: (optional) Contract address or a list of addresses from which logs should originate.
        topics:
          $ref: '#/components/schemas/Topics'
    KlayNewFilterReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_newFilter
        params:
          type: array
          items:
            $ref: '#/components/schemas/schemas-FilterOptions'
          example:
            - fromBlock: earliest
              toBlock: latest
              address: '0x87ac99835e67168d4f9a40580f8f5c33550ba88b'
              topics:
                - '0xd596fdad182d29130ce218f4c1590c4b5ede105bee36690727baa6592bd2bfc8'
    KlayNewFilterResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          description: A filter id
          example: '0xd32fd16b6906e67f6e2b65dcf48fc272'
    BlockCount:
      title: BlockCount
      type: string
      format: Hexadecimal
      description: Number of blocks in the requested range in hexadecimal. Between 1 (0x1) and 1024 (0x400) blocks can be requested in a single query. Less than requested may be returned if not all blocks are available.
    RewardPercentiles:
      title: RewardPercentiles
      type: array
      items:
        type: number
        format: float
      description: An array of floating point values between 0 and 100.
    KlayFeeHistoryReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_feeHistory
        params:
          type: array
          items:
            properties:
              BlockCount:
                $ref: '#/components/schemas/BlockCount'
              BlockNumberOrTag:
                $ref: '#/components/schemas/BlockNumberOrTag'
              rewardPercentiles:
                $ref: '#/components/schemas/RewardPercentiles'
          example:
            - '0x10'
            - latest
            - - 0.1
              - 0.2
              - 0.3
    BaseFeePerGas:
      title: BaseFeePerGas
      type: array
      items:
        type: string
        format: Hexadecimal
      description: An array of block base fees per gas. This includes the next block after the newest of the returned range, because this value can be derived from the newest block.
    Reward:
      title: Reward
      type: array
      description: An array of effective priority fee per gas data points from a single block. All zeroes are returned if the block is empty.
      items:
        type: array
        items:
          type: string
          format: hex
    KlayFeeHistoryResp:
      type: object
      properties:
        result:
          type: object
          required:
            - oldestBlock
            - baseFeePerGas
            - gasUsedRatio
            - reward
          properties:
            oldestBlock:
              type: string
              format: Hexadecimal
              description: Lowest numbered block of the returned range in hexadecimal.
            baseFeePerGas:
              $ref: '#/components/schemas/BaseFeePerGas'
            gasUsedRatio:
              type: array
              items:
                type: number
                format: float
              description: An array of the ratios of gas used per block. These are calculated as the ratio of gasUsed and gasLimit.
            reward:
              $ref: '#/components/schemas/Reward'
          example:
            oldestBlock: '0xa5b'
            reward:
              - - '0x0'
                - '0x0'
                - '0x0'
              - - '0x5d21dba00'
                - '0x5d21dba00'
                - '0x5d21dba00'
            baseFeePerGas:
              - '0x0'
              - ...
              - '0x0'
            gasUsedRatio:
              - 0
              - ...
              - 0.0002963777000002964
    KlayGetStakingInfoReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_getStakingInfo
        params:
          type: array
          items:
            properties:
              BlockNumberOrTag:
                $ref: '#/components/schemas/BlockNumberOrTag'
          example:
            - latest
    KlayGetStakingInfoResp:
      type: object
      properties:
        result:
          type: object
          description: Staking information
          example:
            BlockNum: 57801600
            CouncilNodeAddrs:
              - '0x99fb17d324fa0e07f23b49d09028ac0919414db6'
              - '0x571e53df607be97431a5bbefca1dffe5aef56f4d'
              - '0xb74ff9dea397fe9e231df545eb53fe2adf776cb2'
              - '0x5cb1a7dccbd0dc446e3640898ede8820368554c8'
              - '0x776817c0ef3d06d794cf01ae9afa33d7397b9b40'
              - '0xc180ca565b34b5b63877674f5fe647e7da079022'
              - '0x03497f51c31fe8b402df0bde90fd5a85f87aa943'
            CouncilRewardAddrs:
              - '0xb2bd3178affccd9f9f5189457f1cad7d17a01c9d'
              - '0x6559a7b6248b342bc11fbcdf9343212bbc347edc'
              - '0x82829a60c6eac4e3e9d6ed00891c69e88537fd4d'
              - '0xa86fd667c6a340c53cc5d796ba84dbe1f29cb2f7'
              - '0x6e22cbe2b8bbd1df9f1d3c8ebae6d7ff5414a734'
              - '0x24e593fb29731e54905025c230727dc28d229f77'
              - '0x2b2a7a1d29a203f60e0a964fc64231265a49cd97'
            CouncilStakingAddrs:
              - '0x12fa1ab4c3e17c1c08c1b5a945c864c8e8bf707e'
              - '0xfd56604f1a20268ff7a0eab2ab48e25ee1e0f653'
              - '0x1e0f6aaa9baa6081dc4910a854eebf8854c262ab'
              - '0x5e6988415ebe0f6b088f5a676003ba60f572875a'
              - '0xbb44998c2af35b8faee694cffe216558056d747e'
              - '0x68cba498b7175cde9de08fc2e85ad3e9c8caefa8'
              - '0x98efb31eeccafe35d53a6926e2a54c0858d9eebc'
            CouncilStakingAmounts:
              - 5000000
              - 5000000
              - 5000000
              - 5000000
              - 5000000
              - 5000000
              - 5000000
            Gini: 0
            KIRAddr: '0x716f89d9bc333286c79db4ebb05516897c8d208a'
            PoCAddr: '0x2bcf9d3e4a846015e7e3152a614c684de16f37c6'
            UseGini: true
    KlayRecoverFromTransactionReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_recoverFromTransaction
        params:
          type: array
          items:
            properties:
              RLPEncodedTransaction:
                title: RLPEncodedTransaction
                description: RLP Encoded Transaction.
                type: string
                format: N-byte DATA
              BlockNumberOrTag:
                $ref: '#/components/schemas/BlockNumberOrTag'
          example:
            - '0x08f88608850ba43b7400827b0c94c40b6909eb7085590e1c26cb3becc25368e249e9880de0b6b3a764000094e15cd70a41dfb05e7214004d7d054801b2a2f06bf847f845820fe9a090421871e8fd77e08b6a72760006a15184a96cfc39c7486ea948d11fd830ae8aa05876248aa8dc0783d782e584e6f8d9bf977c698210a0eab3e754192d0954de65'
            - latest
    KlayRecoverFromMessageReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_recoverFromMessage
        params:
          type: array
          items:
            properties:
              Address:
                title: Address
                description: Address.
                type: string
                format: 20-byte DATA
              Message:
                title: Message
                description: A Message.
                type: string
                format: N-byte DATA
              Signature:
                type: string
                title: Signature
                description: The signature.
              BlockNumberOrTag:
                $ref: '#/components/schemas/BlockNumberOrTag'
          example:
            - '0xA2a8854b1802D8Cd5De631E690817c253d6a9153'
            - '0xdeadbeef'
            - '0x1e6338d6e4a8d688a25de78cf2a92efec9a92e52eb8425acaaee8c3957e68cdb3f91bdc483f0ed05a0da26eca3be4c566d087d90dc2ca293be23b2a9de0bcafc1c'
            - latest
    KlaySha3Req:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: klay_sha3
        params:
          type: array
          items:
            title: data
            type: string
            format: DATA
          description: The data to convert into a SHA3 hash.
          example:
            - '0x11223344'
    KlaySha3Resp:
      type: object
      properties:
        result:
          type: string
          format: 32-byte DATA
          example: '0x36712aa4d0dd2f64a9ae6ac09555133a157c74ddf7c079a70c33e8b4bf70dd73'
          description: The SHA3 result of the given data.
    KlayGetProofResp:
      type: object
      properties:
        result:
          type: object
          required:
            - balance
            - codeHash
            - nonce
            - storageHash
            - accountProof
            - storageProof
          description: Object - A account object
          properties:
            balance:
              type: string
              format: hex
              description: the balance of the account. See eth_getBalance
            codeHash:
              type: string
              format: 32-byte DATA
              description: hash of the code of the account. For a simple Account without code it will return
            nonce:
              type: string
              format: hex
              description: nonce of the account. See eth_getTransactionCount
            storageHash:
              type: string
              format: DATA
              description: SHA3 of the StorageRoot. All storage will deliver a MerkleProof starting with this rootHash.
            accountProof:
              type: array
              items:
                type: string
              description: Array of rlp-serialized MerkleTree-Nodes, starting with the stateRoot-Node, following the path of the SHA3 (address) as key.
            storageProof:
              type: array
              items:
                type: object
                required:
                  - key
                  - value
                  - proof
                properties:
                  key:
                    type: string
                    format: hex
                    description: the requested storage key
                  value:
                    type: string
                    format: hex
                    description: the storage value
                  proof:
                    type: array
                    items:
                      type: string
                    description: Array of rlp-serialized MerkleTree-Nodes, starting with the storageHash-Node, following the path of the SHA3 (key) as path.
              description: Array of storage-entries as requested. Each entry is an object with these properties
