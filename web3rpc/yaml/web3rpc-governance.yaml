openapi: 3.0.2
info:
  title: web3rpc
  version: 0.9.0
  contact:
    name: API support
    url: https://forum.klaytn.foundation/
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
x-tagGroups:
  - name: namespaces
    tags:
      - governance
servers:
  - url: http://localhost:8551
  - url: https://api.baobab.klaytn.net:8651
  - url: https://public-en-cypress.klaytn.net
paths:
  /governance/chainConfig:
    post:
      operationId: chainConfig
      summary: governance_chainConfig
      description: |
        The chainConfig property provides the latest chain configuration. This is equivalent to chainConfigAt() with an empty parameter.

        **NOTE:** In versions earlier than Klaytn v1.10.0, this API returned the initial chain configuration. However, due to its confusing name, it is updated since Klaytn v1.10.0. To query the initial chain configuration, use chainConfigAt(0) instead.

        **JSONRPC:** `governance_chainConfig`
      tags:
        - governance
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                  properties:
                    method:
                      type: string
                      default: governance_chainConfig
      responses:
        '200':
          description: Current chain configuration
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: object
                        description: Current chain configuration
                        example:
                          chainId: 1001
                          deriveShaImpl: 2
                          governance:
                            govParamContract: '0x0000000000000000000000000000000000000000'
                            governanceMode: ballot
                            governingNode: '0xe733cb4d279da696f30d470f8c04decb54fcb0d2'
                            kip71:
                              basefeedenominator: 20
                              gastarget: 30000000
                              lowerboundbasefee: 25000000000
                              maxblockgasusedforbasefee: 60000000
                              upperboundbasefee: 750000000000
                            reward:
                              deferredTxFee: true
                              kip82ratio: 20/80
                              minimumStake: 5000000
                              mintingAmount: 6400000000000000000
                              proposerUpdateInterval: 3600
                              ratio: 50/40/10
                              stakingUpdateInterval: 20
                              useGiniCoeff: false
                          istanbul:
                            epoch: 20
                            policy: 2
                            sub: 1
                          istanbulCompatibleBlock: 0
                          koreCompatibleBlock: 0
                          londonCompatibleBlock: 0
                          magmaCompatibleBlock: 0
                          unitPrice: 25000000000
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/governance/chainConfig' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "governance_chainConfig",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import org.web3j.protocol.klaytn.core.method.response.GovernanceGetChainConfigResponse;

            import java.io.IOException;

            public class GovernanceChainConfigExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void governanceChainConfigExample() throws IOException {
                    GovernanceGetChainConfigResponse response = w3.governanceGetChainConfig().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.governance
                .chainConfig({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            governance_response = w3.governance.chain_config()

            print(governance_response)
  /governance/getStakingInfo:
    post:
      operationId: getStakingInfo
      summary: governance_getStakingInfo
      description: |
        The getStakingInfo returns staking information at a specific block. The result includes the following information.
        - BlockNum: The block number at which the staking information is given.
        - CouncilNodeAddrs: The addresses of the consensus node.
        - CouncilRewardAddrs: The addresses to which the block reward of the associated nodes is sent.
        - CouncilStakingAddrs: The contract addresses in which the associated nodes deploy for staking.
        - CouncilStakingAmounts: The amount of KLAY which the associated nodes stake.
        - Gini: Gini coefficient.
        - KIRAddr: The contract address of KIR.
        - PoCAddr: The contract address of KGF. PoC is the previous name of KGF.
        - UseGini: The boolean value whether or not the Gini coefficient is used.
        Note that the order of all addresses and the staking amounts are matched.

        **JSONRPC:** `governance_getStakingInfo`
      tags:
        - governance
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                    - params
                  properties:
                    method:
                      type: string
                      default: governance_getStakingInfo
                    params:
                      type: array
                      items:
                        $ref: '#/components/schemas/BlockNumberOrTag'
                      description: Integer of a block number, or the string "earliest", "latest" or "pending", as in the default block parameter.
                      example:
                        - latest
      responses:
        '200':
          description: Staking information
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: object
                        description: Staking information
                        example:
                          BlockNum: 57801600
                          CouncilNodeAddrs:
                            - '0x99fb17d324fa0e07f23b49d09028ac0919414db6'
                            - '0x571e53df607be97431a5bbefca1dffe5aef56f4d'
                            - '0xb74ff9dea397fe9e231df545eb53fe2adf776cb2'
                            - '0x5cb1a7dccbd0dc446e3640898ede8820368554c8'
                            - '0x776817c0ef3d06d794cf01ae9afa33d7397b9b40'
                            - '0xc180ca565b34b5b63877674f5fe647e7da079022'
                            - '0x03497f51c31fe8b402df0bde90fd5a85f87aa943'
                          CouncilRewardAddrs:
                            - '0xb2bd3178affccd9f9f5189457f1cad7d17a01c9d'
                            - '0x6559a7b6248b342bc11fbcdf9343212bbc347edc'
                            - '0x82829a60c6eac4e3e9d6ed00891c69e88537fd4d'
                            - '0xa86fd667c6a340c53cc5d796ba84dbe1f29cb2f7'
                            - '0x6e22cbe2b8bbd1df9f1d3c8ebae6d7ff5414a734'
                            - '0x24e593fb29731e54905025c230727dc28d229f77'
                            - '0x2b2a7a1d29a203f60e0a964fc64231265a49cd97'
                          CouncilStakingAddrs:
                            - '0x12fa1ab4c3e17c1c08c1b5a945c864c8e8bf707e'
                            - '0xfd56604f1a20268ff7a0eab2ab48e25ee1e0f653'
                            - '0x1e0f6aaa9baa6081dc4910a854eebf8854c262ab'
                            - '0x5e6988415ebe0f6b088f5a676003ba60f572875a'
                            - '0xbb44998c2af35b8faee694cffe216558056d747e'
                            - '0x68cba498b7175cde9de08fc2e85ad3e9c8caefa8'
                            - '0x98efb31eeccafe35d53a6926e2a54c0858d9eebc'
                          CouncilStakingAmounts:
                            - 5000000
                            - 5000000
                            - 5000000
                            - 5000000
                            - 5000000
                            - 5000000
                            - 5000000
                          Gini: 0
                          KIRAddr: '0x716f89d9bc333286c79db4ebb05516897c8d208a'
                          PoCAddr: '0x2bcf9d3e4a846015e7e3152a614c684de16f37c6'
                          UseGini: true
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/governance/getStakingInfo' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "governance_getStakingInfo",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["latest"]
            }'
        - lang: java
          label: Java
          source: |

            //import org.web3j.protocol.klaytn.core.method.response.GovernanceGetStakingInfoResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class GovernanceGetStakingInfoExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void governanceGetStakingInfoExample() throws IOException {
                    String blockNum = "latest";

            //        GovernanceGetStakingInfoResponse response = w3.governanceGetStakingInfo(blockNum).send();
            //        response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockNumber = "latest";

              provider.governance
                .getStakingInfo(blockNumber, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockNumber = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            governance_response = w3.governance.get_staking_info(blockNumber)

            print(governance_response)
  /governance/idxCache:
    post:
      operationId: idxCache
      summary: governance_idxCache
      description: |
        The idxCache property returns an array of current idxCache in the memory cache. idxCache contains the block numbers where governance change happened. The cache can have up to 1000 block numbers in memory by default.

        **JSONRPC:** `governance_idxCache`
      tags:
        - governance
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                  properties:
                    method:
                      type: string
                      default: governance_idxCache
      responses:
        '200':
          description: Block numbers where governance change happened
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: array
                        description: Block numbers where governance change happened
                        items:
                          type: integer
                          format: uint64
                        example:
                          - 0
                          - 30
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/governance/idxCache' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "governance_idxCache",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |


            import org.web3j.protocol.klaytn.core.method.response.GovernanceIdxCacheResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class GovernanceIdxCacheExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void governanceIdxCacheExample() throws IOException {
                    GovernanceIdxCacheResponse response = w3.governanceIdxCache().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.governance
                .idxCache({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            governance_response = w3.governance.idx_cache()

            print(governance_response)
  /governance/idxCacheFromDb:
    post:
      operationId: idxCacheFromDb
      summary: governance_idxCacheFromDb
      description: |
        The idxCacheFromDb returns an array that contains all block numbers on which a governance change ever happened. The result of idxCacheFromDb is the same or longer than that of idxCache

        **JSONRPC:** `governance_idxCacheFromDb`
      tags:
        - governance
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                  properties:
                    method:
                      type: string
                      default: governance_idxCacheFromDb
      responses:
        '200':
          description: Every block numbers where governance change happened
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: array
                        description: Every block numbers where governance change happened
                        items:
                          type: integer
                          format: uint64
                        example:
                          - 0
                          - 30
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/governance/idxCacheFromDb' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "governance_idxCacheFromDb",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.GovernanceIdxCacheFromDbResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class GovernanceIdxCacheFromDbExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void governanceIdxCacheFromDbExample() throws IOException {
                    GovernanceIdxCacheFromDbResponse response = w3.governanceIdxCacheFromDb().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.governance
                .idxCacheFromDb({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            governance_response = w3.governance.idx_cache_from_db()

            print(governance_response)
  /governance/itemCacheFromDb:
    post:
      operationId: itemCacheFromDb
      summary: governance_itemCacheFromDb
      description: |
        The itemCacheFromDb returns the governance information stored in the given block. If no changes were stored in the given block, the function returns null.

        **JSONRPC:** `governance_itemCacheFromDb`
      tags:
        - governance
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                  properties:
                    method:
                      type: string
                      default: governance_itemCacheFromDb
                    params:
                      type: array
                      items:
                        type: integer
                        format: uint64
                      description: A block number to query the governance change made in the block.
                      example:
                        - 0
      responses:
        '200':
          description: Stored governance information at a given block
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: object
                        description: Stored governance information at a given block
                        example:
                          governance.governancemode: single
                          governance.governingnode: '0xe733cb4d279da696f30d470f8c04decb54fcb0d2'
                          governance.unitprice: 25000000000
                          istanbul.committeesize: 1
                          istanbul.epoch: 30
                          istanbul.policy: 2
                          reward.deferredtxfee: true
                          reward.minimumstake: '5000000'
                          reward.mintingamount: '6400000000000000000'
                          reward.proposerupdateinterval: 3600
                          reward.ratio: 50/40/10
                          reward.stakingupdateinterval: 20
                          reward.useginicoeff: false
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/governance/itemCacheFromDb' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "governance_itemCacheFromDb",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [0]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.GovernanceItemCacheFromDbResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class GovernanceItemCacheFromDbExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void governanceItemCacheFromDbExample() throws IOException {
                    int blockNum = 0;

                    GovernanceItemCacheFromDbResponse response = w3.governanceItemCacheFromDb(blockNum).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockNumber = 0;

              provider.governance
                .itemCacheFromDb(blockNumber, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockNumber = 0

            w3 = Web3(Web3.HTTPProvider(host))
            governance_response = w3.governance.item_cache_from_db(blockNumber)

            print(governance_response)
  /governance/itemsAt:
    post:
      operationId: itemsAt
      summary: governance_itemsAt
      description: |
        The itemsAt returns governance items at specific block.

        **WARNING:** governance_itemsAt API will be deprecated since Klaytn v1.11 (see klaytn#1783). Use governance_getParams instead.

        **NOTE:** In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.

        **NOTE:** The block number can be larger than the latest block number, in which case the API returns the tentative value based on the current chain state. The future governance parameters are subject to change via additional governance votes or GovParam contract state changes.

        **JSONRPC:** `governance_itemsAt`
      tags:
        - governance
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                    - params
                  properties:
                    method:
                      type: string
                      default: governance_itemsAt
                    params:
                      type: array
                      items:
                        $ref: '#/components/schemas/BlockNumberOrTag'
                      example:
                        - 0
      responses:
        '200':
          description: governance items
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: object
                        description: governance items
                        example:
                          governance.governancemode: single
                          governance.governingnode: '0x7bf29f69b3a120dae17bca6cf344cf23f2daf208'
                          governance.unitprice: 25000000000
                          istanbul.committeesize: 13
                          istanbul.epoch: 30
                          istanbul.policy: 2
                          kip71.basefeedenominator: 20
                          kip71.gastarget: 30000000
                          kip71.lowerboundbasefee: 25000000000
                          kip71.maxblockgasusedforbasefee: 60000000
                          kip71.upperboundbasefee: 750000000000
                          reward.deferredtxfee: true
                          reward.minimumstake: '5000000'
                          reward.mintingamount: '9600000000000000000'
                          reward.proposerupdateinterval: 30
                          reward.ratio: 34/54/12
                          reward.stakingupdateinterval: 60
                          reward.useginicoeff: true
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/governance/itemsAt' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "governance_itemsAt",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [89]
            }'
        - lang: java
          label: Java
          source: |

            //import org.web3j.protocol.klaytn.core.method.response.GovernanceItemsAtResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class GovernanceItemsAtExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void governanceItemsAtExample() throws IOException {
            //        int blockTag = 0;
            //
            //        GovernanceItemsAtResponse response = w3.governanceItemsAt(blockTag).send();
            //        response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockNumber = 89;

              provider.governance
                .itemsAt(blockNumber, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = 0

            w3 = Web3(Web3.HTTPProvider(host))
            governance_response = w3.governance.items_at(blockTag)

            print(governance_response)
  /governance/myVotes:
    post:
      operationId: myVotes
      summary: governance_myVotes
      description: |
        The myVotes property provides my vote information in the epoch. Each vote is stored in a block when the user's node generates a new block. After current epoch ends, this information is cleared.

        **JSONRPC:** `governance_myVotes`
      tags:
        - governance
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                  properties:
                    method:
                      type: string
                      default: governance_myVotes
      responses:
        '200':
          description: Node's Voting status in the epoch
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: array
                        items:
                          type: object
                          title: MyVoteList
                          required:
                            - BlockNum
                            - Casted
                            - Key
                            - Value
                          properties:
                            BlockNum:
                              type: number
                              description: The block number that this vote is stored
                            Casted:
                              type: boolean
                              description: If this vote is stored in a block or not
                            Key:
                              type: string
                              description: The content of the vote
                            Value:
                              type: string
                              description: The content of the vote
                        description: Node's Voting status in the epoch
                        example:
                          - BlockNum: 403
                            Casted: true
                            Key: governance.governancemode
                            Value: ballot
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/governance/myVotes' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "governance_myVotes",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.GovernanceMyVotesResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class GovernanceMyVotesExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void governanceMyVotesExample() throws IOException {
                    GovernanceMyVotesResponse response = w3.governanceMyVotes().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.governance
                .myVotes({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            governance_response = w3.governance.my_votes()

            print(governance_response)
  /governance/myVotingPower:
    post:
      operationId: myVotingPower
      summary: governance_myVotingPower
      description: |
        The myVotingPower property provides the voting power of the node. The voting power can be 1.0 ~ 2.0. In "none", "single" governance mode, totalVotingPower don't provide any information.

        **JSONRPC:** `governance_myVotingPower`
      tags:
        - governance
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                  properties:
                    method:
                      type: string
                      default: governance_myVotingPower
      responses:
        '200':
          description: Node's Voting Power or error message
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: number
                        description: Node's Voting Power or error message
                        example: 1.323
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/governance/myVotingPower' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "governance_myVotingPower",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            import java.io.IOException;

            import org.web3j.protocol.klaytn.core.method.response.GovernanceMyVotingPowerResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            public class GovernanceMyVotingPowerExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));  void governanceMyVotingPowerExample() throws IOException {
                GovernanceMyVotingPowerResponse response = w3.governanceMyVotingPower().send();
                response.getResult();
              }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.governance
                .myVotingPower({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            governance_response = w3.governance.my_voting_power()

            print(governance_response)
  /governance/nodeAddress:
    post:
      operationId: nodeAddress
      summary: governance_nodeAddress
      description: |
        The nodeAddress property provides the address of the node that a user is using. It is derived from the nodekey and used to sign consensus messages. And the value of "governingnode" has to be one of validator's node address.

        **JSONRPC:** `governance_nodeAddress`
      tags:
        - governance
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                  properties:
                    method:
                      type: string
                      default: governance_nodeAddress
      responses:
        '200':
          description: 20 BYTE address of a node
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: 20-byte DATA
                        description: 20 BYTE address of a node
                        example: '0xe733cb4d279da696f30d470f8c04decb54fcb0d2'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/governance/nodeAddress' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "governance_nodeAddress",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            //import org.web3j.protocol.klaytn.core.method.response.GovernanceNodeAddressResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class GovernanceNodeAddressExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void whenRequestValid_ThenCall200ResponseReturns() throws IOException {
            //        GovernanceNodeAddressResponse response = w3.governanceNodeAddress().send();
            //        response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.governance
                .nodeAddress({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            governance_response = w3.governance.node_address()

            print(governance_response)
  /governance/pendingChanges:
    post:
      operationId: pendingChanges
      summary: governance_pendingChanges
      description: |
        The pendingChanges returns the list of items that have received enough number of votes but not yet finalized. At the end of the current epoch, these changes will be finalized and the result will be in effect from the epoch after next epoch.

        **JSONRPC:** `governance_pendingChanges`
      tags:
        - governance
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                  properties:
                    method:
                      type: string
                      default: governance_pendingChanges
      responses:
        '200':
          description: Currently pending changes composed of keys and values
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: object
                        description: Currently pending changes composed of keys and values
                        example:
                          reward.minimumstake: '5000000'
                          reward.useginicoeff: false
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/governance/pendingChanges' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "governance_pendingChanges",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.GovernancePendingChangesResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class GovernancePendingChangesExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void governancePendingChangesExample() throws IOException {
                    GovernancePendingChangesResponse response = w3.governancePendingChanges().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.governance
                .pendingChanges({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            governance_response = w3.governance.pending_changes()

            print(governance_response)
  /governance/showTally:
    post:
      operationId: showTally
      summary: governance_showTally
      description: |
        The showTally property provides the current tally of governance votes. It shows the aggregated approval rate in percentage. When it goes over 50%, the vote passes.

        **JSONRPC:** `governance_showTally`
      tags:
        - governance
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                  properties:
                    method:
                      type: string
                      default: governance_showTally
      responses:
        '200':
          description: Each vote's value and approval rate in percentage
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: array
                        items:
                          type: object
                        description: Each vote's value and approval rate in percentage
                        example:
                          - ApprovalPercentage: 36.2
                            Key: unitprice
                            Value: 25000000000
                          - ApprovalPercentage: 72.5
                            Key: mintingamount
                            Value: '9600000000000000000'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/governance/showTally' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "governance_showTally",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.GovernanceShowTallyResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class GovernanceShowTallyExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void governanceShowTallyExample() throws IOException {
                    GovernanceShowTallyResponse response = w3.governanceShowTally().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.governance
                .showTally({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            governance_response = w3.governance.show_tally()

            print(governance_response)
  /governance/totalVotingPower:
    post:
      operationId: totalVotingPower
      summary: governance_totalVotingPower
      description: |
        The totalVotingPower property provides the sum of all voting power that CNs have. Each CN has 1.0 ~ 2.0 voting power. In "none", "single" governance mode, totalVotingPower don't provide any information.

        **JSONRPC:** `governance_totalVotingPower`
      tags:
        - governance
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                  properties:
                    method:
                      type: string
                      default: governance_totalVotingPower
      responses:
        '200':
          description: Total Voting Power or error message
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: number
                        description: Total Voting Power or error message
                        example: 32.452
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/governance/totalVotingPower' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "governance_totalVotingPower",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            import java.io.IOException;

            import org.web3j.protocol.klaytn.core.method.response.GovernanceTotalVotingPowerResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            public class GovernanceTotalVotingPowerExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
              void governanceTotalVotingPowerExample() throws IOException {
                GovernanceTotalVotingPowerResponse response = w3.governanceTotalVotingPower().send();
                response.getResult();
              }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.governance
                .totalVotingPower({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            governance_response = w3.governance.total_voting_power()

            print(governance_response)
  /governance/vote:
    post:
      operationId: vote
      summary: governance_vote
      description: |
        The vote method submits a new vote. If the node has the right to vote based on governance mode, the vote can be placed. If not, an error message will be returned and the vote will be ignored.

        **JSONRPC:** `governance_vote`
      tags:
        - governance
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                    - params
                  properties:
                    method:
                      type: string
                      default: governance_vote
                    params:
                      type: array
                      items:
                        anyOf:
                          - type: string
                            title: Key
                          - $ref: '#/components/schemas/Value'
                      example:
                        - governance.governancemode
                        - ballot
      responses:
        '200':
          description: Result of vote submission
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        description: Result of vote submission
                        example: Your vote was successfully placed.
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/governance/vote' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "governance_vote",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["governance.governancemode", "ballot"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.GovernanceVoteResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class GovernanceVoteExample {
                  private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void governanceVoteExample() throws IOException {
                    String key = "governance.governancemode";
                    String value = "ballot";

                    GovernanceVoteResponse response = w3.governanceVote(key, value).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const key = "governance.governancemode";
              const value = "ballot";

              provider.governance
                .vote(key, value, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            key = "governance.governancemode"
            value = "ballot"

            w3 = Web3(Web3.HTTPProvider(host))
            governance_response = w3.governance.vote(key, value)

            print(governance_response)
  /governance/votes:
    post:
      operationId: votes
      summary: governance_votes
      description: |
        The votes returns the votes from all nodes in the epoch. These votes are gathered from the header of each block.

        **JSONRPC:** `governance_votes`
      tags:
        - governance
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                  properties:
                    method:
                      type: string
                      default: governance_votes
      responses:
        '200':
          description: Return current votes composed of keys, values and node addresses
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: array
                        description: Current votes composed of keys, values and node addresses
                        items:
                          title: VoteList
                          type: object
                          required:
                            - key
                            - value
                            - validator
                          properties:
                            key:
                              type: string
                            validator:
                              type: string
                              format: hex
                            value:
                              oneOf:
                                - type: string
                                - type: boolean
                        example:
                          - key: reward.minimumstake
                            validator: '0xe733cb4d279da696f30d470f8c04decb54fcb0d2'
                            value: '5000000'
                          - key: reward.useginicoeff
                            validator: '0xa5bccb4d279419abe2d470f8c04dec0789ac2d54'
                            value: false
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/governance/votes' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "governance_votes",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.GovernanceVotesResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class GovernanceVotesExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void governanceVotesExample() throws IOException {
                    GovernanceVotesResponse response = w3.governanceVotes().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.governance
                .votes({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            governance_response = w3.governance.votes()

            print(governance_response)
components:
  schemas:
    JsonRpcRequest:
      type: object
      required:
        - method
        - id
        - jsonrpc
      properties:
        method:
          type: string
          description: Method name
        id:
          type: integer
          default: 1
          format: int64
          description: Request ID, Random or Auto incrementation
        jsonrpc:
          type: string
          default: '2.0'
          description: JSON-RPC Version (2.0)
        params:
          type: array
          items: {}
    ErrorMember:
      type: object
      title: ErrorMember
      required:
        - code
      properties:
        code:
          type: integer
          format: int64
          example: -32700
          description: |
            A Number that indicates the error type that occurred.
            This MUST be an integer.

            | code | message | description |
            |-----|-----|-------|
            | -32700   | Parse error   | invalid JSON was received by the server. An error occurred on the server while parsing the JSON text. |
            |-32602 | Invalid params | Invalid method parameter(s). |
        message:
          type: string
          example: Parse error
          description: |
            A String providing a short description of the error.
            The message SHOULD be limited to a concise single sentence.
        data:
          type: string
          description: |
            A Primitive or Structured value that contains additional information about the error.
            This may be omitted.
            The value of this member is defined by the Server (e.g. detailed error information, nested errors etc.).
    JsonRpcResponse:
      type: object
      required:
        - jsonrpc
        - id
      properties:
        jsonrpc:
          type: string
          default: '2.0'
        id:
          type: integer
          format: int64
        error:
          $ref: '#/components/schemas/ErrorMember'
        result: {}
    IntegerBlockNumber:
      title: IntegerBlockNumber
      description: the block number with type integer
      type: number
    HexadecimalBlockNumber:
      title: HexadecimalBlockNumber
      type: string
      format: hexadecimal
      description: the block number with type hexadecimal
    BlockTag:
      title: BlockTag
      type: string
      description: the block tag [latest, pending, earliest]
    BlockNumberOrTag:
      oneOf:
        - $ref: '#/components/schemas/IntegerBlockNumber'
        - $ref: '#/components/schemas/HexadecimalBlockNumber'
        - $ref: '#/components/schemas/BlockTag'
    Value:
      type: string
      description: |
        | Key | Description |
        |-----|-----|
        | "governance.governancemode" | STRING. One of the three governance modes. "none", "single", "ballot" |
        | "governance.governingnode" | ADDRESS. Designated governing node's address. It only works if the governance mode is "single" e.g.,"0xe733cb4d279da696f30d470f8c04decb54fcb0d2" |
        | "governance.unitprice" | NUMBER. Price of unit gas. e.g., 25000000000 |
        | "governance.addvalidator" | ADDRESS. Address of a new validator candidate. e.g., 0xe733cb4d279da696f30d470f8c04decb54fcb0d2 |
        | "governance.removevalidator" | ADDRESS. Address of a current validator which need to be removed. e.g., 0xe733cb4d279da696f30d470f8c04decb54fcb0d2 |
        | "governance.deriveshaimpl" | NUMBER. Policy to generate the transaction hash and receipt hash in a block header. See here for available options. e.g., 2 (DeriveShaConcat) |
        | "governance.govparamcontract" | ADDRESS. Address of the GovParam contract. e.g., 0xe733cb4d279da696f30d470f8c04decb54fcb0d2 |
        | "istanbul.epoch" | NUMBER. A period in which votes are gathered in blocks. When an epoch end, all votes which haven't been passed will be cleared. e.g., 86400 |
        | "istanbul.committeesize" | NUMBER. The number of validators in a committee.(sub in chain configuration) e.g., 7 |
        | "reward.mintingamount" | STRING. Amount of Peb minted when a block is generated. Double quotation marks are needed for a value. e.g., "9600000000000000000" |
        | "reward.ratio" | STRING. Distribution rate for a CN/KGF/KIR separated by "/". The sum of all values has to be 100. e.g., "50/40/10" meaning CN 50%, KGF 40%, KIR 10% |
        | "reward.kip82ratio" | STRING. Distribution ratio of the block proposer to stakers separated by "/". The sum of all values has to be "100". See KIP-82 for further details. e.g., "20/80" means that the proposer takes 20% while stakers take 80%. |
        | "reward.useginicoeff" | BOOL. Use the Gini coefficient or not. true, false |
        | "reward.deferredtxfee" | BOOL. The way of giving transaction fee to a proposer. If true, it means the tx fee will be summed up with block reward and distributed to the proposer, KIR and KGF. If not, all tx fee will be given to the proposer. true, false |
        | "reward.minimumstake" | STRING. Amount of Klay required to be a CN (Consensus Node). Double quotation marks are needed for a value. e.g., "5000000" |
        | "kip71.lowerboundbasefee" | NUMBER. The lowest possible base fee. See KIP-71 for further details. e.g., 25000000000 |
        | "kip71.upperboundbasefee" | NUMBER. The highest possible base fee. e.g., 750000000000 |
        | "kip71.gastarget" | NUMBER. The block gas that base fee wants to achieve. The base fee increases when parent block contains more than gas target, and decreases when parent block contains less than gas target. e.g., 30000000 |
        | "kip71.basefeedenominator" | NUMBER. Controls how fast base fee changes. e.g., 20 |
        | "kip71.maxblockgasusedforbasefee" | NUMBER. The maximum block gas perceived in base fee calculation. e.g., 60000000 |
