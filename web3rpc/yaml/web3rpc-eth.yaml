openapi: 3.0.2
info:
  title: web3rpc
  version: 0.9.0
  contact:
    name: API support
    url: https://forum.klaytn.foundation/
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
x-tagGroups:
  - name: namespaces
    tags:
      - eth
servers:
  - url: http://localhost:8551
  - url: https://api.baobab.klaytn.net:8651
  - url: https://public-en-cypress.klaytn.net
paths:
  /eth/block/blockNumber:
    post:
      operationId: blockNumber
      summary: '[Block] eth_blockNumber'
      description: |
        Returns the number of the most recent block.

        **JSONRPC:** `eth_blockNumber`
      tags:
        - eth
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: eth_blockNumber
      responses:
        '200':
          description: Returns the number of the most recent block.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: Integer of the current block number the client is on.
                        example: '0xc94'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |-
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/blockNumber' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_blockNumber",
              "id": 83,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.core.methods.response.EthBlockNumber;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthBlockNumberExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    void ethBlockNumberExample() throws IOException {
                    EthBlockNumber br = w3.ethBlockNumber().send();
                    br.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");

            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider
                .getBlockNumber({}, (err, data, response) => {
                  console.log(data);
                })
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.block_number()

            print(eth_response)
  /eth/block/getBlockByHash:
    post:
      summary: '[Block] eth_getBlockByHash'
      tags:
        - eth
      operationId: getBlockByHash
      description: |
        Returns information about a block by hash.

        Please check Caution-Block before using this API

        **JSONRPC:** `eth_getBlockByHash`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetBlockByHashReq'
      responses:
        '200':
          description: Returns information about a block by hash.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetBlockByHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getBlockByHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getBlockByHash",
              "id": 83,
              "jsonrpc": "2.0",
              "params": ["0xb8deae63002d2b6aa33247c8ef545383ee0fd2282ac9b49dbbb74114389ddb5c", true]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.core.methods.response.EthBlock;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class EthGetBlockByHashExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    
                void ethGetBlockByHashExample() throws IOException {
                    EthBlock br = w3.ethGetBlockByHash(
                        "0x21509a5aa2c03e9c99e3320cc7805c601b370c6a4529b29000fd8e2360d8c659",
                        true)
                    .send();
                    br.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const blockHash =
                "0xb8deae63002d2b6aa33247c8ef545383ee0fd2282ac9b49dbbb74114389ddb5c";
              const transactionObject = true;
              provider.eth
                .getBlockByHash(
                  blockHash,
                  transactionObject,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0xb8deae63002d2b6aa33247c8ef545383ee0fd2282ac9b49dbbb74114389ddb5c"
            transactionObject = True

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_block_by_hash(blockHash, transactionObject)

            print(eth_response)
  /eth/block/getBlockByNumber:
    post:
      operationId: getBlockByNumber
      summary: '[Block] eth_getBlockByNumber'
      description: |
        Returns information about a block by block number.

        Please check Caution-Block before using this API.

        **JSONRPC:** `eth_getBlockByNumber`
      tags:
        - eth
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetBlockByNumberReq'
      responses:
        '200':
          description: Returns information about a block by block number.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetBlockByNumberResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |-
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getBlockByNumber' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getBlockByNumber",
              "id": 83,
              "jsonrpc": "2.0",
              "params": ["0xd0054e", false]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.core.DefaultBlockParameter;
            import org.web3j.protocol.core.methods.response.EthBlock;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;
            import java.math.BigInteger;

            public class EthGetBlockByNumberExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    
                void ethGetBlockByNumberExample() throws IOException {
                    EthBlock er = w3.ethGetBlockByNumber(
                        DefaultBlockParameter.valueOf(new BigInteger("8f668", 16)),
                        false)
                    .send();
                    er.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const blockNumber = 1;
              const transactionObject = true;
              provider.eth
                .getBlockByNumber(
                  blockNumber,
                  transactionObject,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "0xd0054e"
            transactionObject = False

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_block_by_number(blockTag, transactionObject)

            print(eth_response)
  /eth/block/getBlockTransactionCountByHash:
    post:
      operationId: getBlockTransactionCountByHash
      summary: '[Block] eth_getBlockTransactionCountByHash'
      description: |
        Returns the number of transactions in a block from a block that matches the given hash.

        **JSONRPC:** `eth_getBlockTransactionCountByHash`
      tags:
        - eth
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetBlockTransactionCountByHashReq'
      responses:
        '200':
          description: Returns the number of transactions in a block from a block that matches the given hash.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: Integer of the number of transactions in this block.
                        example: '0x0'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getBlockTransactionCountByHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getBlockTransactionCountByHash",
              "id": 83,
              "jsonrpc": "2.0",
              "params": ["0x0c11803ab36110db993e7520908b9ba9336cca2f2dcc9b6130c481a3ccdc2621"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.core.methods.response.EthGetBlockTransactionCountByHash;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthGetBlockTransactionCountByHashExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void ethGetBlockTransactionCountByHashExample() throws IOException {
                    EthGetBlockTransactionCountByHash br = w3.ethGetBlockTransactionCountByHash(
                        "0x0c11803ab36110db993e7520908b9ba9336cca2f2dcc9b6130c481a3ccdc2621")
                    .send();
                    br.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const blockHash =
                "0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577";

              provider.eth
                .getBlockTransactionCountByHash(blockHash, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0x0c11803ab36110db993e7520908b9ba9336cca2f2dcc9b6130c481a3ccdc2621"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_block_transaction_count_by_hash(blockHash)

            print(eth_response)
  /eth/block/getBlockTransactionCountByNumber:
    post:
      summary: '[Block] eth_getBlockTransactionCountByNumber'
      tags:
        - eth
      operationId: getBlockTransactionCountByNumber
      description: |
        Returns the number of transactions in a block matching the given block number.

        **JSONRPC:** `eth_getBlockTransactionCountByNumber`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetBlockTransactionCountByNumberReq'
      responses:
        '200':
          description: Integer of the number of transactions in this block.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetBlockTransactionCountByNumberResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getBlockTransactionCountByNumber' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getBlockTransactionCountByNumber",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xe8"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.core.DefaultBlockParameter;
            import org.web3j.protocol.core.methods.response.EthGetBlockTransactionCountByNumber;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;
            import java.math.BigInteger;

            public class EthGetBlockTransactionCountByNumberExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    
                void ethGetBlockTransactionCountByNumberExample() throws IOException {
                    EthGetBlockTransactionCountByNumber r = w3.ethGetBlockTransactionCountByNumber(
                        DefaultBlockParameter.valueOf(BigInteger.valueOf(232))
                    ).send();
                    r.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockNumber = "0xe8";
              provider.eth
                .getBlockTransactionCountByNumber(
                  blockNumber,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockNumber = "0xe8"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_block_transaction_count_by_number(blockNumber)

            print(eth_response)
  /eth/block/getHeaderByHash:
    post:
      operationId: getHeaderByHash
      summary: '[Block] eth_getHeaderByHash'
      description: |
        Returns information about a header by hash.

        Please check Caution-Header before using this API.

        **JSONRPC:** `eth_getHeaderByHash`
      tags:
        - eth
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetHeaderByHashReq'
      responses:
        '200':
          description: Object - A header object, or null when no header was found. Otherwise, it returns an error.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetHeaderByHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getHeaderByHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getHeaderByHash",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xb8deae63002d2b6aa33247c8ef545383ee0fd2282ac9b49dbbb74114389ddb5c"]
            }'
        - lang: java
          label: Java
          source: |

            //import org.web3j.protocol.klaytn.core.method.response.EthGetHeaderByHashResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class EthGetHeaderByHashExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    
                void ethGetHeaderByHashExample() throws IOException {
            //        EthGetHeaderByHashResponse br = w3.ethGetHeaderByHash(
            //            "0x21509a5aa2c03e9c99e3320cc7805c601b370c6a4529b29000fd8e2360d8c659")
            //        .send();
            //        br.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockHash =
                "0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577";

              provider.eth
                .getHeaderByHash(blockHash, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0xb8deae63002d2b6aa33247c8ef545383ee0fd2282ac9b49dbbb74114389ddb5c"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_header_by_hash(blockHash)

            print(eth_response)
  /eth/block/getHeaderByNumber:
    post:
      summary: '[Block] eth_getHeaderByNumber'
      tags:
        - eth
      operationId: getHeaderByNumber
      description: |
        Returns information about a header by number.

        Please check the Caution-Header before using this API.

        **JSONRPC:** `eth_getHeaderByNumber`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetHeaderByNumberReq'
      responses:
        '200':
          description: Returns information about a header by number.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetHeaderByNumberResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getHeaderByNumber' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getHeaderByNumber",
              "id": 83,
              "jsonrpc": "2.0",
              "params":["0x1b4"]
            }'
        - lang: java
          label: Java
          source: |

            //import org.web3j.protocol.klaytn.core.method.response.EthGetHeaderByNumberResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class EthGetHeaderByNumberExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    
                void ethGetHeaderByNumberExample() throws IOException {
            //        EthGetHeaderByNumberResponse br = w3.ethGetHeaderByNumber("0x1b4").send();
            //        br.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const blockNumber = 1;

              provider.eth
                .getHeaderByNumber(blockNumber, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "0x1b4"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_header_by_number(blockTag)

            print(eth_response)
  /eth/block/getStorageAt:
    post:
      operationId: getStorageAt
      summary: '[Block] eth_getStorageAt'
      description: |
        Returns the value from a storage position at a given address

        **JSONRPC:** `eth_getStorageAt`
      tags:
        - eth
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/schemas-EthGetHeaderByHashReq'
      responses:
        '200':
          description: The value at this storage position.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/schemas-EthGetHeaderByHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getStorageAt' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getStorageAt",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "0x295a70b2de5e3953354a6a8344e616ed314d7251",
                "0x0",
                "latest"
              ]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.core.DefaultBlockParameter;
            import org.web3j.protocol.core.methods.response.EthGetStorageAt;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;
            import java.math.BigInteger;

            public class EthGetStorageAtExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    
                void ethGetStorageAtExample() throws IOException {
                    String address = "0x295a70b2de5e3953354a6a8344e616ed314d7251";
                    BigInteger position = BigInteger.valueOf(0);
                    DefaultBlockParameter block = DefaultBlockParameter.valueOf("latest");
                    EthGetStorageAt br = w3.ethGetStorageAt(address,position,block).send();
                    br.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const address = "0x295a70b2de5e3953354a6a8344e616ed314d7251";
              const quantity = "0x0";
              const blockNumberOrHashOrTag = "latest";

              provider.eth
                .getStorageAt(
                  address,
                  quantity,
                  blockNumberOrHashOrTag,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "0x295a70b2de5e3953354a6a8344e616ed314d7251"
            quantity = "0x0"
            blockTag = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_storage_at(address, quantity, blockTag)

            print(eth_response)
  /eth/block/getUncleByBlockHashAndIndex:
    post:
      summary: '[Block] eth_getUncleByBlockHashAndIndex'
      tags:
        - eth
      operationId: getUncleByBlockHashAndIndex
      description: |
        Returns information about a uncle of a block by hash and the uncle's index position. Since there are no uncles in Klaytn, it always returns null.

        **JSONRPC:** `eth_getUncleByBlockHashAndIndex`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetUncleByBlockHashAndIndexReq'
      responses:
        '200':
          description: Return null
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetUncleByBlockHashAndIndexResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getUncleByBlockHashAndIndex' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getUncleByBlockHashAndIndex",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "0xb8deae63002d2b6aa33247c8ef545383ee0fd2282ac9b49dbbb74114389ddb5c",
                "0x1"
              ]
            }'
        - lang: java
          label: Java
          source: |
            import org.web3j.protocol.core.methods.response.EthBlock;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;
            import java.math.BigInteger;

            public class EthGetUncleByBlockHashAndIndexExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void ethGetUncleByBlockHashAndIndexExample() throws IOException {
                    String blockHash = "0xc9dbfbab67e9a0508bcb3f95ae408023668cef431b805592781a821926715b8a";
                    BigInteger uncleIndex = BigInteger.valueOf(1);
                    EthBlock response = w3.ethGetUncleByBlockHashAndIndex(blockHash, uncleIndex).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockHash =
                "0xc9dbfbab67e9a0508bcb3f95ae408023668cef431b805592781a821926715b8a";
              const uncleIndex = "0x1";

              provider.eth
                .getUncleByBlockHashAndIndex(
                  blockHash,
                  uncleIndex,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0xb8deae63002d2b6aa33247c8ef545383ee0fd2282ac9b49dbbb74114389ddb5c"
            uncleIndex = "0x1"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_uncle_by_block_hash_and_index(blockHash, uncleIndex)

            print(eth_response)
  /eth/block/getUncleByBlockNumberAndIndex:
    post:
      summary: '[Block] eth_getUncleByBlockNumberAndIndex'
      tags:
        - eth
      operationId: getUncleByBlockNumberAndIndex
      description: |
        Returns information about a uncle of a block by number and the uncle's index position. As there are no uncles in Klaytn, it always returns null.

        **JSONRPC:** `eth_getUncleByBlockNumberAndIndex`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetUncleByBlockNumberAndIndexReq'
      responses:
        '200':
          description: Return value null.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetUncleByBlockNumberAndIndexResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getUncleByBlockNumberAndIndex' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getUncleByBlockNumberAndIndex",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xe8", "0x1"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.core.methods.response.EthBlock;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;
            import java.math.BigInteger;

            public class EthGetUncleByBlockNumberAndIndexExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void ethGetUncleByBlockNumberAndIndexExample() throws IOException {
                    EthBlock response = w3.ethGetUncleByBlockHashAndIndex(
                                    "0xc9dbfbab67e9a0508bcb3f95ae408023668cef431b805592781a821926715b8a",
                                    BigInteger.valueOf(1))
                            .send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockNumber = 119189116;
              const uncleIndex = "0x1";

              provider.eth
                .getUncleByBlockNumberAndIndex(
                  blockNumber,
                  uncleIndex,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "0xe8"
            uncleIndex = "0x1"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_uncle_by_block_number_and_index(blockTag, uncleIndex)

            print(eth_response)
  /eth/block/getUncleCountByBlockHash:
    post:
      summary: '[Block] eth_getUncleCountByBlockHash'
      tags:
        - eth
      operationId: getUncleCountByBlockHash
      description: |
        Returns the number of uncles in a block from a block matching the given block hash. Since there are no uncles in Klaytn, it returns 0x0. It returns null if there is no matching block.

        **JSONRPC:** `eth_getUncleCountByBlockHash`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetUncleCountByBlockHashReq'
      responses:
        '200':
          description: Integer of the number of transactions in this block. It returns null if there is no matching block.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetUncleCountByBlockHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getUncleCountByBlockHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getUncleCountByBlockHash",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "0xb8deae63002d2b6aa33247c8ef545383ee0fd2282ac9b49dbbb74114389ddb5c"
              ]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.core.methods.response.EthGetUncleCountByBlockHash;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class EthGetUncleCountByBlockHashExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    
                void ethGetUncleCountByBlockHashExample() throws IOException {
                    EthGetUncleCountByBlockHash response = w3.ethGetUncleCountByBlockHash(
                        "0xc9dbfbab67e9a0508bcb3f95ae408023668cef431b805592781a821926715b8a"
                    ).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockHash =
                "0xc9dbfbab67e9a0508bcb3f95ae408023668cef431b805592781a821926715b8a";

              provider.eth
                .getUncleCountByBlockHash(blockHash, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0xc9dbfbab67e9a0508bcb3f95ae408023668cef431b805592781a821926715b8a"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_uncle_count_by_block_hash(blockHash)

            print(eth_response)
  /eth/block/getUncleCountByBlockNumber:
    post:
      summary: '[Block] eth_getUncleCountByBlockNumber'
      tags:
        - eth
      operationId: getUncleCountByBlockNumber
      description: |
        Returns the number of uncles in a block from a block matching the given block number. Since there are no uncles in Klaytn, it returns 0x0. It returns null if there is no matching block.

        **JSONRPC:** `eth_getUncleCountByBlockNumber`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetUncleCountByBlockNumberReq'
      responses:
        '200':
          description: Integer of the number of transactions in this block. It returns null if there is no matching block.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetUncleCountByBlockNumberResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getUncleCountByBlockNumber' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getUncleCountByBlockNumber",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xe8"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.core.DefaultBlockParameter;
            import org.web3j.protocol.core.methods.response.EthGetUncleCountByBlockNumber;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;
            import java.math.BigInteger;

            public class EthGetUncleCountByBlockNumberExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    
                void ethGetUncleCountByBlockNumberExample() throws IOException {
                    EthGetUncleCountByBlockNumber response = w3.ethGetUncleCountByBlockNumber(
                        DefaultBlockParameter.valueOf(new BigInteger("e8", 16))
                    ).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const blockNumber = 119189116;

              provider.eth
                .getUncleCountByBlockNumber(blockNumber, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "0xe8"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_uncle_count_by_block_number(blockTag)

            print(eth_response)
  /eth/block/mining:
    post:
      summary: '[Block] eth_mining'
      tags:
        - eth
      operationId: mining
      description: |
        Returns true if client is actively mining new blocks.

        **NOTE:** Currently, every node is on mining mode by default to resend transactions. Please note that the actual "mining" is only performed by the Consensus Nodes (CNs).

        **JSONRPC:** `eth_mining`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthMiningReq'
      responses:
        '200':
          description: true if the client is mining, otherwise false.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthMiningResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |-
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/mining' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_mining",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.core.methods.response.EthMining;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class EthMiningExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    
                void ethMiningExample() throws IOException {
                    EthMining response = w3.ethMining().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.eth
                .mining({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.mining()

            print(eth_response)
  /eth/block/syncing:
    post:
      operationId: syncing
      summary: '[Block] eth_syncing'
      description: |
        Returns an object with data about the sync status or false.

        **JSONRPC:** `eth_syncing`
      tags:
        - eth
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: eth_syncing
      responses:
        '200':
          description: Returns an object with data about the sync status or false.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        oneOf:
                          - type: boolean
                            description: Returns false when not syncing.
                            example: false
                          - type: object
                            required:
                              - startingBlock
                              - currentBlock
                              - highestBlock
                              - pulledStates
                              - knownStates
                            properties:
                              startingBlock:
                                type: string
                                format: hex
                                description: The block at which the import started (will only be reset, after the sync reached his head).
                                example: '0x0'
                              currentBlock:
                                type: string
                                description: The current block, same as eth_blockNumber.
                                format: hex
                                example: '0x3e31e'
                              highestBlock:
                                type: string
                                format: hex
                                description: The estimated highest block.
                                example: '0x827eef'
                              pulledStates:
                                type: string
                                format: hex
                                description: The number of state entries processed until now. If the sync mode is not "fast", zero is returned.
                                example: '0x0'
                              knownStates:
                                type: string
                                format: hex
                                description: The number of known state entries that still need to be pulled. If the sync mode is not "fast", zero is returned.
                                example: '0x0'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/syncing' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_syncing",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.core.methods.response.EthSyncing;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class EthSycingExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    
                void ethSycingExample() throws IOException {
                    EthSyncing response = w3.ethSyncing().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.eth
                .syncing({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.syncing()

            print(eth_response)
  /eth/block/getBlockReceipt:
    post:
      operationId: getBlockReceipts
      summary: '[Block] eth_getBlockReceipts'
      description: |
        Returns receipts included in a block identified by block hash.

        **JSONRPC:** `eth_getBlockReceipts`
      tags:
        - eth
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetBlockReceiptsReq'
      responses:
        '200':
          description: Receipts included in a block. If the target block contains no transaction, an empty array [] is returned.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetBlockReceiptsResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getBlockReceipts' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getBlockReceipts",
              "id": 73,
              "jsonrpc": "2.0",
              "params": ["0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577"]
            }'
        - lang: java
          label: Java
          source: |


            import org.web3j.protocol.klaytn.core.method.response.KlayGetBlockReceiptsResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthGetBlockReceiptsExampleGetBlockReceiptsExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void EthGetBlockReceiptsExample() throws IOException {
                    String blockHash = "0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577";
                    KlayGetBlockReceiptsResponse response = w3.ethGetBlockReceipts(blockHash).send();
                    response.getResult();
                }

            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");

            (async () => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockHash =
                "0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577";

              // The full list of JSON-RPC is available at:
              // https://docs.klaytn.foundation/content/dapp/json-rpc/api-references
              const data = await provider.eth.getBlockReceipts(blockHash);
              console.log("Block receipts", data);
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0xba647d41423faeebe8a7c64737d284fc2eba6f0388a3e1ebf6243db509ec1577"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_block_receipts(blockHash)

            print(eth_response)
  /eth/transaction/call:
    post:
      summary: '[Transaction] eth_call'
      tags:
        - eth
      operationId: call
      description: |
        Executes a new message call immediately, without creating a transaction on the block chain. The eth_call method can be used to query internal contract state, to execute validations coded into a contract or even to test what the effect of a transaction would be without running it live.

        **JSONRPC:** `eth_call`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayCallReq'
      responses:
        '200':
          description: The returned data of the call
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayCallResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/call' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_call",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [{"from": "0xca7a99380131e6c76cfa622396347107aeedca2d", "to": "0xbE3892d33620bE5aca8c75D39e7401871194d290", "input": "0x2e64cec1"}, "latest", {"0xbE3892d33620bE5aca8c75D39e7401871194d290": {"code":"0x6080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632e64cec114604e5780636057361d146076575b600080fd5b348015605957600080fd5b50606060a0565b6040518082815260200191505060405180910390f35b348015608157600080fd5b50609e6004803603810190808035906020019092919050505060a9565b005b60008054905090565b80600081905550505600a165627a7a723058207783dba41884f73679e167576362b7277f88458815141651f48ca38c25b498f80029"}}]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import org.web3j.protocol.core.DefaultBlockParameter;
            import org.web3j.protocol.core.methods.request.Transaction;
            import org.web3j.protocol.core.methods.response.EthCall;

            import java.io.IOException;

            public class EthCallExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void ethCallExample() throws IOException {
                    EthCall cr = w3.ethCall(
                                    Transaction.createEthCallTransaction(
                                            "0xca7a99380131e6c76cfa622396347107aeedca2d",
                                            "0xbE3892d33620bE5aca8c75D39e7401871194d290",
                                            "0x2e64cec1"),
                                    DefaultBlockParameter.valueOf("latest"))
                            .send();
                    cr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const callObject = {
                from: "0xca7a99380131e6c76cfa622396347107aeedca2d",
                to: "0xbE3892d33620bE5aca8c75D39e7401871194d290",
                input: "0x2e64cec1",
              };
              const blockTag = "latest";
              const stateOverrideSet = {
                "0xbE3892d33620bE5aca8c75D39e7401871194d290": {
                  code: "0x6080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632e64cec114604e5780636057361d146076575b600080fd5b348015605957600080fd5b50606060a0565b6040518082815260200191505060405180910390f35b348015608157600080fd5b50609e6004803603810190808035906020019092919050505060a9565b005b60008054905090565b80600081905550505600a165627a7a723058207783dba41884f73679e167576362b7277f88458815141651f48ca38c25b498f80029",
                },
              };

              provider.eth
                .call(
                  callObject,
                  blockTag,
                  { stateOverrideSet },
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            call_object = {
                "from": "0xca7a99380131e6c76cfa622396347107aeedca2d",
                "to": "0xbE3892d33620bE5aca8c75D39e7401871194d290",
                "input": "0x2e64cec1"
            }
            block_tag = 'latest'
            state_override_set = {
                "0xbE3892d33620bE5aca8c75D39e7401871194d290":
                    {
                        "code": "0x6080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632e64cec114604e5780636057361d146076575b600080fd5b348015605957600080fd5b50606060a0565b6040518082815260200191505060405180910390f35b348015608157600080fd5b50609e6004803603810190808035906020019092919050505060a9565b005b60008054905090565b80600081905550505600a165627a7a723058207783dba41884f73679e167576362b7277f88458815141651f48ca38c25b498f80029"
                    }
            }

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.call(call_object, block_tag, state_override_set)

            print(eth_response)
  /eth/transaction/createAccessList:
    post:
      summary: '[Transaction] eth_createAccessList'
      tags:
        - eth
      operationId: createAccessList
      description: |
        CreateAccessList creates a EIP-2930 type AccessList for the given transaction. Reexec and BlockNrOrHash can be specified to create the accessList on top of a certain state.

        **JSONRPC:** `eth_createAccessList`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthCreateAccessListReq'
      responses:
        '200':
          description: Return accessList
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthCreateAccessListResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/createAccessList' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_createAccessList",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [{
                "from": "0x3bc5885c2941c5cda454bdb4a8c88aa7f248e312",
                "data": "0x20965255",
                "gasPrice": "0x3b9aca00",
                "gas": "0x3d0900",
                "to": "0x00f5f5f3a25f142fafd0af24a754fafa340f32c7"
              }]
            }'
        - lang: java
          label: Java
          source: |

            //import org.web3j.protocol.klaytn.core.method.response.EthCreateAccessListResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import org.web3j.protocol.core.methods.request.Transaction;

            import java.io.IOException;
            import java.math.BigInteger;

            public class EthCreateAccessListExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    
                void ethCreateAccessListExample() throws IOException {
                    Transaction args = Transaction.createFunctionCallTransaction("0x3bc5885c2941c5cda454bdb4a8c88aa7f248e312",null
                            ,new BigInteger("3b9aca00",16)
                            ,new BigInteger("3d0900",16)
                            ,"0x00f5f5f3a25f142fafd0af24a754fafa340f32c7"
                            ,"0x20965255");
                    String blockNumberOrHash = "latest";
            //        EthCreateAccessListResponse response = w3.ethCreateAccessList(args,blockNumberOrHash).send();
            //        response.getResult();
                }
                
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const blockNumberOrHash = "latest";
              provider.eth
                .createAccessList(
                  transactionArgs,
                  blockNumberOrHash,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            transactionArgs = {
                "from": "0x3bc5885c2941c5cda454bdb4a8c88aa7f248e312",
                "data": "0x20965255",
                "gasPrice": "0x3b9aca00",
                "gas": "0x3d0900",
                "to": "0x00f5f5f3a25f142fafd0af24a754fafa340f32c7"
            }

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.create_access_list(transactionArgs)

            print(eth_response)
  /eth/transaction/estimateGas:
    post:
      summary: '[Transaction] eth_estimateGas'
      tags:
        - eth
      operationId: estimateGas
      description: |
        Generates and returns an estimate of how much gas is necessary to allow the transaction to complete. The transaction will not be added to the blockchain. Note that the estimate may be significantly more than the amount of gas actually used by the transaction, for a variety of reasons including EVM mechanics and node performance.

        **JSONRPC:** `eth_estimateGas`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthEstimateGasReq'
      responses:
        '200':
          description: Return the amount of gas used.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthEstimateGasResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/estimateGas' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_estimateGas",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                {
                  "from": "0x51239f87c33e95e3bdb72e31d06b5306bcec81cc",
                  "to": "0x87ac99835e67168d4f9a40580f8f5c33550ba88b",
                  "gas": "0x100000",
                  "gasPrice": "0x5d21dba00",
                  "value": "0x0",
                  "input": "0x8ada066e"
                }
              ]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import org.web3j.protocol.core.methods.request.Transaction;
            import org.web3j.protocol.core.methods.response.EthEstimateGas;
            import java.io.IOException;

            public class EthEstimateGasExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void ethEstimateGasExample() throws IOException {
                    EthEstimateGas cr = w3.ethEstimateGas(
                        Transaction.createEthCallTransaction(
                            "0xd9c9cd5f6779558b6e0ed4e6acf6b1947e7fa1f3",
                            "0xebe8efa441b9302a0d7eaecc277c09d20d684540",
                            "0xd459fc46000000000000000000000000000000000000000000000000000000000046c650dbb5e8cb2bac4d2ed0b1e6475d37361157738801c494ca482f96527eb48f9eec488c2eba92d31baeccfb6968fad5c21a3df93181b43b4cf253b4d572b64172ef000000000000000000000000000000000000000000000000000000000000008c00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000002b85c0c828d7a98633b4e1b65eac0c017502da909420aeade9a280675013df36bdc71cffdf420cef3d24ba4b3f9b980bfbb26bd5e2dcf7795b3519a3fd22ffbb2000000000000000000000000000000000000000000000000000000000000000238fb6606dc2b5e42d00c653372c153da8560de77bd9afaba94b4ab6e4aa11d565d858c761320dbf23a94018d843772349bd9d92301b0ca9ca983a22d86a70628"))
                    .send();
                    cr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const callObject = {
                from: "0x51239f87c33e95e3bdb72e31d06b5306bcec81cc",
                to: "0x87ac99835e67168d4f9a40580f8f5c33550ba88b",
                gas: "0x100000",
                gasPrice: "0x5d21dba00",
                value: "0x0",
                input: "0x8ada066e",
              };
              provider.eth
                .estimateGas(callObject, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            callObject = {
                "from": "0x51239f87c33e95e3bdb72e31d06b5306bcec81cc",
                "to": "0x87ac99835e67168d4f9a40580f8f5c33550ba88b",
                "gas": "0x100000",
                "gasPrice": "0x5d21dba00",
                "value": "0x0",
                "input": "0x8ada066e"
            }

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.estimate_gas(callObject)

            print(eth_response)
  /eth/transaction/fillTransaction:
    post:
      summary: '[Transaction] eth_fillTransaction'
      tags:
        - eth
      operationId: fillTransaction
      description: |
        Fills the defaults (nonce, gas, gasPrice or 1559 fields) on a given unsigned transaction, and returns it to the caller for further processing (signing + broadcast).

        **JSONRPC:** `eth_fillTransaction`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthFillTransactionReq'
      responses:
        '200':
          description: Return a rawTransaction string and a transaction object.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthFillTransactionResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/fillTransaction' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_fillTransaction",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                {
                  "from": "0x51239f87c33e95e3bdb72e31d06b5306bcec81cc",
                  "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                  "value": "0x1",
                  "gas": "0x9999",
                  "maxFeePerGas": "0xbb43b7400"
                }
              ]
            }'
        - lang: java
          label: Java
          source: |

            //import org.web3j.protocol.klaytn.core.method.response.EthFillTransactionResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import org.web3j.protocol.core.methods.request.Transaction;
            import org.web3j.utils.Numeric;

            import java.io.IOException;

            public class EthFillTransactionExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void ethFillTransactionExample() throws IOException {
            //        EthFillTransactionResponse cr = w3.ethFillTransaction(
            //            new Transaction(
            //                "0xca7a99380131e6c76cfa622396347107aeedca2d",
            //                null,
            //                null,
            //                Numeric.decodeQuantity("0x9999"),
            //                "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
            //                Numeric.decodeQuantity("0x1"),
            //                null,
            //                null,
            //                null,
            //                Numeric.decodeQuantity("0xba43b7400")))
            //        .send();
            //        cr.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const transactionArgs = {
                from: "0x51239f87c33e95e3bdb72e31d06b5306bcec81cc",
                to: "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                value: "0x1",
                gas: "0x9999",
                maxFeePerGas: "0xbb43b7400",
              };

              provider.eth
                .fillTransaction(transactionArgs, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            transactionArgs = {
                "from": "0x51239f87c33e95e3bdb72e31d06b5306bcec81cc",
                "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                "value": "0x1",
                "gas": "0x9999",
                "maxFeePerGas": "0xbb43b7400"
            }

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.fill_transaction(transactionArgs)

            print(eth_response)
  /eth/transaction/getRawTransactionByBlockHashAndIndex:
    post:
      operationId: getRawTransactionByBlockHashAndIndex
      summary: '[Transaction] eth_getRawTransactionByBlockHashAndIndex'
      description: |
        GetRawTransactionByBlockHashAndIndex returns the bytes of the transaction for the given block hash and index.

        **JSONRPC:** `eth_getRawTransactionByBlockHashAndIndex`
      tags:
        - eth
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetRawTransactionByBlockHashAndIndexReq'
      responses:
        '200':
          description: Returns the bytes of the transaction for the given block hash and index.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetRawTransactionByBlockHashAndIndexResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getRawTransactionByBlockHashAndIndex' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getRawTransactionByBlockHashAndIndex",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x4c4cbf242a80183d2ea2daf047c578d5fc89c0b14c4262606c8b6bb0b36715be","0x0"]
            }'
        - lang: java
          label: Java
          source: |

            //import org.web3j.protocol.klaytn.core.method.response.EthGetRawTransactionByBlockHashAndIndexResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthGetRawTransactionByBlockHashAndIndexExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void ethGetRawTransactionByBlockHashAndIndexExample() throws IOException {
            //        EthGetRawTransactionByBlockHashAndIndexResponse er = w3.ethGetRawTransactionByBlockHashAndIndex(
            //            "0x4c4cbf242a80183d2ea2daf047c578d5fc89c0b14c4262606c8b6bb0b36715be",
            //            "0x0")
            //        .send();
            //        er.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockHash =
                "0x4c4cbf242a80183d2ea2daf047c578d5fc89c0b14c4262606c8b6bb0b36715be";
              const index = "0x0";

              provider.eth
                .getRawTransactionByBlockHashAndIndex(
                  blockHash,
                  index,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0x4c4cbf242a80183d2ea2daf047c578d5fc89c0b14c4262606c8b6bb0b36715be"
            index = "0x0"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_raw_transaction_by_block_hash_and_index(blockHash, index)

            print(eth_response)
  /eth/transaction/getRawTransactionByBlockNumberAndIndex:
    post:
      operationId: getRawTransactionByBlockNumberAndIndex
      summary: '[Transaction] eth_getRawTransactionByBlockNumberAndIndex'
      tags:
        - eth
      description: |
        GetRawTransactionByBlockNumberAndIndex returns the bytes of the transaction for the given block number and index.

        **JSONRPC:** `eth_getRawTransactionByBlockNumberAndIndex`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetRawTransactionByBlockNumberAndIndexReq'
      responses:
        '200':
          description: Returns the bytes of the transaction for the given block number and index.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetRawTransactionByBlockNumberAndIndexResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getRawTransactionByBlockNumberAndIndex' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getRawTransactionByBlockNumberAndIndex",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [118593751, "0x0"]
            }'
        - lang: java
          label: Java
          source: |

            //import org.web3j.protocol.klaytn.core.method.response.EthGetRawTransactionByBlockNumberAndIndexResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthGetRawTransactionByBlockNumberAndIndexExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void ethGetRawTransactionByBlockNumberAndIndexExample() throws IOException {
            //        EthGetRawTransactionByBlockNumberAndIndexResponse er = w3.ethGetRawTransactionByBlockNumberAndIndex(
            //            118593751,
            //            "0x0")
            //        .send();
            //        er.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockNumber = 118593751;
              const index = "0x0";

              provider.eth
                .getRawTransactionByBlockNumberAndIndex(
                  blockNumber,
                  index,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockNumber = 118593751
            index = "0x0"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_raw_transaction_by_block_number_and_index(blockNumber, index)

            print(eth_response)
  /eth/transaction/getRawTransactionByHash:
    post:
      operationId: getRawTransactionByHash
      summary: '[Transaction] eth_getRawTransactionByHash'
      description: |
        GetRawTransactionByHash returns the bytes of the transaction for the given hash.

        **JSONRPC:** `eth_getRawTransactionByHash`
      tags:
        - eth
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetRawTransactionByHashReq'
      responses:
        '200':
          description: Returns the bytes of the transaction for the given hash.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetRawTransactionByHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getRawTransactionByHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getRawTransactionByHash",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x5bbcde52084defa9d1c7068a811363cc27a25c80d7e495180964673aa5f47687"]
            }'
        - lang: java
          label: Java
          source: |

            //import org.web3j.protocol.klaytn.core.method.response.EthGetRawTransactionByHashResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthGetRawTransactionByHashExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void ethGetRawTransactionByHashExample() throws IOException {
            //        EthGetRawTransactionByHashResponse er = w3.ethGetRawTransactionByHash(
            //            "0x5bbcde52084defa9d1c7068a811363cc27a25c80d7e495180964673aa5f47687")
            //        .send();
            //        er.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const transactionHash =
                "0x5bbcde52084defa9d1c7068a811363cc27a25c80d7e495180964673aa5f47687";

              provider.eth
                .getRawTransactionByHash(transactionHash, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            transactionHash = "0x29b6cd965c7d9a53a6f068da259dce1d3810ba79fff8eebac5d4da14754e67e6"

            w3 = Web3(Web3.HTTPProvider(host))
            klay_response = w3.klay.get_raw_transaction_by_hash(transactionHash)

            print(klay_response)
  /eth/transaction/getTransactionByBlockHashAndIndex:
    post:
      summary: '[Transaction] eth_getTransactionByBlockHashAndIndex'
      tags:
        - eth
      operationId: getTransactionByBlockHashAndIndex
      description: |
        Returns information about a transaction by block hash and transaction index position.

        Please check the Caution-Transaction before using this API.

        **JSONRPC:** `eth_getTransactionByBlockHashAndIndex`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetTransactionByBlockHashAndIndexReq'
      responses:
        '200':
          description: Returns information about a transaction by block hash and transaction index position.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetTransactionByBlockHashAndIndexResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getTransactionByBlockHashAndIndex' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getTransactionByBlockHashAndIndex",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x451cafae98d61b7458b5cef54402830941432278184453e3ca490eb687317e68", "0x0"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.core.methods.response.EthTransaction;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;
            import java.math.BigInteger;

            public class EthGetTransactionByBlockHashAndIndexExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void ethGetTransactionByBlockHashAndIndexExample() throws IOException {
                    EthTransaction response = w3.ethGetTransactionByBlockHashAndIndex(
                                    "0x451cafae98d61b7458b5cef54402830941432278184453e3ca490eb687317e68",
                                    BigInteger.valueOf(0))
                            .send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const blockHash =
                "0xc9dbfbab67e9a0508bcb3f95ae408023668cef431b805592781a821926715b8a";
              const index = "0x0";
              provider.eth
                .getTransactionByBlockHashAndIndex(
                  blockHash,
                  index,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0x451cafae98d61b7458b5cef54402830941432278184453e3ca490eb687317e68"
            transactionIndexPosition = "0x0"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_transaction_by_block_hash_and_index(blockHash, transactionIndexPosition)

            print(eth_response)
  /eth/transaction/getTransactionByBlockNumberAndIndex:
    post:
      summary: '[Transaction] eth_getTransactionByBlockNumberAndIndex'
      tags:
        - eth
      operationId: getTransactionByBlockNumberAndIndex
      description: |
        Returns information about a transaction by block number and transaction index position

        Please check the Caution-Transaction before using this API.

        **JSONRPC:** `eth_getTransactionByBlockNumberAndIndex`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetTransactionByBlockNumberAndIndexReq'
      responses:
        '200':
          description: Returns information about a transaction by block number and transaction index position.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetTransactionByBlockNumberAndIndexResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getTransactionByBlockNumberAndIndex' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getTransactionByBlockNumberAndIndex",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x27", "0x0"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.core.DefaultBlockParameter;
            import org.web3j.protocol.core.methods.response.EthTransaction;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;
            import java.math.BigInteger;

            public class EthGetTransactionByBlockNumberAndIndexExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    void ethGetTransactionByBlockNumberAndIndexExample() throws IOException {
                    EthTransaction response = w3
                        .ethGetTransactionByBlockNumberAndIndex(
                            DefaultBlockParameter.valueOf(new BigInteger("27", 16)), 
                            new BigInteger("0", 16))
                        .send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const blockNumber = 118593751;
              const index = "0x0";
              provider.eth
                .getTransactionByBlockNumberAndIndex(
                  blockNumber,
                  index,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockTag = "0x27"
            transactionIndex = "0x0"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_transaction_by_block_number_and_index(blockTag, transactionIndex)

            print(eth_response)
  /eth/transaction/getTransactionByHash:
    post:
      summary: '[Transaction] eth_getTransactionByHash'
      tags:
        - eth
      operationId: getTransactionByHash
      description: |
        Returns the information about a transaction requested by transaction hash.

        Please check the Caution-Transaction before using this API.

        **JSONRPC:** `eth_getTransactionByHash`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetTransactionByHashReq'
      responses:
        '200':
          description: Object - A transaction object, or null when no transaction was found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetTransactionByHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getTransactionByHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getTransactionByHash",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.core.methods.response.EthTransaction;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class EthGetTransactionByHashExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void ethGetTransactionByHashExample() throws IOException {
                    String blockHash = "0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b";
                    EthTransaction response = w3.ethGetTransactionByHash(blockHash).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const transactionHash =
                "0xc6acc62baaa57483da8d5e08aaed1907d82f0e25bd553ce3745ef1bc7b7f4476";
              provider.eth
                .getTransactionByHash(transactionHash, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_transaction_by_hash(blockHash)

            print(eth_response)
  /eth/transaction/getTransactionReceipt:
    post:
      summary: '[Transaction] eth_getTransactionReceipt'
      tags:
        - eth
      operationId: getTransactionReceipt
      description: |
        Returns the receipt of a transaction by transaction hash.

        *NOTE:* The receipt is not available for pending transactions.

        Please check the Caution-TransactionReceipt before using this API.

        **JSONRPC:** `eth_getTransactionReceipt`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/schemas-EthGetTransactionByHashReq'
      responses:
        '200':
          description: Object - A transaction receipt object, or null when no receipt was found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/schemas-EthGetTransactionByHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getTransactionReceipt' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getTransactionReceipt",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.core.methods.response.EthGetTransactionReceipt;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthGetTransactionReceiptExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    void ethGetTransactionReceiptExample() throws IOException {
                    String transactionHash = "0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67";
                    EthGetTransactionReceipt response = w3.ethGetTransactionReceipt(transactionHash).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const transactionHash =
                "0xc6acc62baaa57483da8d5e08aaed1907d82f0e25bd553ce3745ef1bc7b7f4476";

              provider.eth
                .getTransactionReceipt(transactionHash, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_transaction_receipt(blockHash)

            print(eth_response)
  /eth/transaction/pendingTransactions:
    post:
      operationId: pendingTransactions
      summary: '[Transaction] eth_pendingTransactions'
      tags:
        - eth
      description: |
        Returns the transactions that are in the transaction pool and have a from address that is one of the accounts this node manages.

        **JSONRPC:** `eth_pendingTransactions`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/ethPendingTransactionsReq'
      responses:
        '200':
          description: Return an array of transactions. For the returned transaction object.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/ethPendingTransactionsResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/pendingTransactions' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_pendingTransactions",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            //import org.web3j.protocol.klaytn.core.method.response.EthPendingTransactionsResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthPendingTransactionsExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    void ethPendingTransactionsExample() throws IOException {
            //        EthPendingTransactionsResponse response = w3.ethPendingTransactions().send();
            //        response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.eth
                .pendingTransactions({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.pending_transactions()

            print(eth_response)
  /eth/transaction/resend:
    post:
      operationId: resend
      summary: '[Transaction] eth_resend'
      description: |
        Resend accepts an existing transaction and a new gas price and limit. It will remove the given transaction from the pool and reinsert it with the new gas price and limit.

        **JSONRPC:** `eth_resend`
      tags:
        - eth
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthResendReq'
      responses:
        '200':
          description: Resend accepts an existing transaction and a new gas price and limit.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: Hex representation of a Keccak 256 hash
                        example: '0xced304149857009d8767c54b7e624f700c39afe8b93d61b970902d95ac6271d1'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/resend' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_resend",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [{"from": "0x65b47be3457ff26f2911cf89fd079cef0475a2e6","to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee","value": "0x1","gas": "0x9999","maxFeePerGas": "0x5d21dba00","maxPriorityFeePerGas": "0x5d21dba00","nonce": "0x10"}, "0xba43b7500", "0xe8d4a50fff"]
            }'
        - lang: java
          label: Java
          source: |
            import java.io.IOException;
            import java.math.BigInteger;

            //import org.web3j.protocol.klaytn.core.method.response.EthResendResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import org.web3j.protocol.core.methods.request.Transaction;

            public class EthResendExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
              void ethResendExample() throws IOException {
                String gasPrice = "0xba43b7500";
                String gasLimit = "0xe8d4a50fff";
                Transaction sendArgs = new Transaction(
                  "0x65b47be3457ff26f2911cf89fd079cef0475a2e6",
                  new BigInteger("d" , 16),
                  null ,
                  new BigInteger("9999" , 16),
                  "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                  new BigInteger("1",16),
                  null , 
                  null ,
                  new BigInteger("5d21dba00" , 16),
                  new BigInteger("5d21dba00" , 16));
            //    EthResendResponse response = w3.ethResend(sendArgs, gasPrice, gasLimit).send();
            //    response.getResult();
              }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const sendArgs = {
                from: "0x65b47be3457ff26f2911cf89fd079cef0475a2e6",
                to: "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                value: "0x1",
                gas: "0x9999",
                maxFeePerGas: "0x5d21dba00",
                maxPriorityFeePerGas: "0x5d21dba00",
                nonce: "0xd",
              };
              const gasPrice = "0xba43b7500";
              const gasLimit = "0xe8d4a50fff";

              provider.eth.resend(
                sendArgs,
                gasPrice,
                gasLimit,
                {},
                (err, data, response) => {
                  console.log(data);
                },
              );
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            sendArgs = {
                "from": "0x65b47be3457ff26f2911cf89fd079cef0475a2e6",
                "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                "value": "0x1",
                "gas": "0x9999",
                "maxFeePerGas": "0x5d21dba00",
                "maxPriorityFeePerGas": "0x5d21dba00",
                "nonce": "0xd"
            }
            gasPrice = "0xba43b7500"
            gasLimit = "0xe8d4a50fff"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.resend(sendArgs, gasPrice, gasLimit)

            print(eth_response)
  /eth/transaction/sendRawTransaction:
    post:
      summary: '[Transaction] eth_sendRawTransaction'
      tags:
        - eth
      operationId: sendRawTransaction
      description: |
        Creates a new message call transaction or a contract creation for signed transactions.

        **JSONRPC:** `eth_sendRawTransaction`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                  properties:
                    method:
                      type: string
                      default: eth_sendRawTransaction
                    params:
                      type: array
                      description: The signed transaction data.
                      items:
                        type: string
                        format: DATA
                        title: signedTransactionData
                      example:
                        - '0xf86d03850ba43b7400829999948c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee87038d7ea4c68000808207f5a02c39a457ec76803901627392cbfb2107793bf4326e1f1100dc58d8a1216559bca07ce3a3517fce359c1fb6f5b1c1564dd9bb42d0d70a20ae9f4af95d46050ce55e'
      responses:
        '200':
          description: Return the transaction hash or the zero hash if the transaction is not yet available.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: 32-byte DATA
                        description: The transaction hash or the zero hash if the transaction is not yet available.
                        example: '0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/sendRawTransaction' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_sendRawTransaction",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [ "0xf86d03850ba43b7400829999948c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee87038d7ea4c68000808207f5a02c39a457ec76803901627392cbfb2107793bf4326e1f1100dc58d8a1216559bca07ce3a3517fce359c1fb6f5b1c1564dd9bb42d0d70a20ae9f4af95d46050ce55e" ]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.core.methods.response.EthSendTransaction;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthSendRawTransactionExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void ethSendRawTransactionExample() throws IOException {
                    String singedTransactionData = "0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67";
                    EthSendTransaction response = w3.ethSendRawTransaction(singedTransactionData).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const singedTransactionData =
                "0xaca5d9a1ed8b86b1ef61431b2bedfc99a66eaefc3a7e1cffdf9ff53653956a67";

              provider.eth
                .sendRawTransaction(singedTransactionData, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            signedTransactionData = "0xf86d03850ba43b7400829999948c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee87038d7ea4c68000808207f5a02c39a457ec76803901627392cbfb2107793bf4326e1f1100dc58d8a1216559bca07ce3a3517fce359c1fb6f5b1c1564dd9bb42d0d70a20ae9f4af95d46050ce55e"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.send_raw_transaction(signedTransactionData)

            print(eth_response)
  /eth/transaction/sendTransaction:
    post:
      summary: '[Transaction] eth_sendTransaction'
      tags:
        - eth
      operationId: sendTransaction
      description: |
        Constructs a transaction with given parameters, signs the transaction with a sender's private key and propagates the transaction to Klaytn network.

        `eth_sendTransaction` will be failed to baobab/cypress network because it is signed in the EN node, which means that the EN must have the key that you want to sign with.
        Steps to test `eth_sendTransaction`.
          - Step 1: Setup a local EN node
          - Step 2: <a href="#tag/personal/operation/newAccount" target="_blank">Create an account</a> into the EN node
          - Step 3: <a href="#tag/personal/operation/unlockAccount" target="_blank">Unlock the account</a> for using in signing

        **JSONRPC:** `eth_sendTransaction`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlaySendTransactionReq'
      responses:
        '200':
          description: Return the transaction hash or the zero hash if the transaction is not yet available.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlaySendTransactionResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/sendTransaction' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_sendTransaction",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [{"from": "0xca7a99380131e6c76cfa622396347107aeedca2d", "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee", "value": "0x1", "gas": "0x9999", "maxFeePerGas": "0x5d21dba00", "maxPriorityFeePerGas": "0x5d21dba00"}]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.core.methods.request.Transaction;
            import org.web3j.protocol.core.methods.response.EthSendTransaction;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;
            import java.math.BigInteger;

            public class EthSendTransactionExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void ethSendTransactionExample() throws IOException {
                    // TransactionArgs tx = new TransactionArgs();
                    // tx.setFrom("0x487f2dfef230c2120b8cc55c5087b103146536ec");
                    // tx.setTo("0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee");
                    // tx.setValue("0x1");
                    // tx.setGas("0x9999");
                    // tx.setMaxFeePerGas("0x5d21dba00");
                    // tx.setMaxPriorityFeePerGas("0x5d21dba00");
                    Transaction tx = new Transaction(
                        "0x413ba0e5f6f00664598b5c80042b1308f4ff1408",
                        null,
                        null,
                        new BigInteger("9999",16),
                        "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                        new BigInteger("1",16),
                        null,
                        null,
                        new BigInteger("5d21dba00",16),
                        new BigInteger("5d21dba00",16));
                    EthSendTransaction transactionResponse = w3.ethSendTransaction(tx).send();
                    transactionResponse.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const transactionObject = {
                from: "0x487f2dfef230c2120b8cc55c5087b103146536ec",
                to: "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                value: "0x1",
                gas: "0x9999",
                maxFeePerGas: "0x5d21dba00",
                maxPriorityFeePerGas: "0x5d21dba00",
              };

              provider.eth
                .sendTransaction(transactionObject, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            transactionObject = {
                "from": "0x487f2dfef230c2120b8cc55c5087b103146536ec",
                "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                "value": "0x1",
                "gas": "0x9999",
                "maxFeePerGas": "0x5d21dba00",
                "maxPriorityFeePerGas": "0x5d21dba00"
            }

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.send_transaction(transactionObject)

            print(eth_response)
  /eth/transaction/signTransaction:
    post:
      summary: '[Transaction] eth_signTransaction'
      tags:
        - eth
      operationId: signTransaction
      description: |
        Signs a transaction that can be submitted to the network at a later time using with eth_sendRawTransaction.

        `eth_signTransaction` will be failed to baobab/cypress network because it is signed in the EN node, which means that the EN must have the key that you want to sign with.
        Steps to test `eth_signTransaction`.
          - Step 1: Setup a local EN node
          - Step 2: <a href="#tag/personal/operation/newAccount" target="_blank">Create an account</a> into the EN node
          - Step 3: <a href="#tag/personal/operation/unlockAccount" target="_blank">Unlock the account</a> for using in signing

        **JSONRPC:** `eth_signTransaction`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthSignTransactionReq'
      responses:
        '200':
          description: Return the signed transaction object.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthSignTransactionResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/signTransaction' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_signTransaction",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [{"from": "0xca7a99380131e6c76cfa622396347107aeedca2d", "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee", "value": "0x1", "gas": "0x9999", "maxFeePerGas": "0x5d21dba00", "maxPriorityFeePerGas": "0x5d21dba00","nonce": "0x1"}]
            }'
        - lang: java
          label: Java
          source: |

            //import org.web3j.protocol.klaytn.core.method.response.EthSignTransactionResponse;
            //import org.web3j.protocol.klaytn.core.method.response.TransactionArgs;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class EthSignTransactionExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void ethSignTransactionExample() throws IOException {
            //        TransactionArgs tx = new TransactionArgs();
            //        tx.setFrom("0x487f2dfef230c2120b8cc55c5087b103146536ec");
            //        tx.setTo("0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee");
            //        tx.setValue("0x1");
            //        tx.setGas("0x9999");
            //        tx.setMaxFeePerGas("0x5d21dba00");
            //        tx.setMaxPriorityFeePerGas("0x5d21dba00");
            //        tx.setNonce("0x1");
            //        EthSignTransactionResponse transactionResponse = w3.ethSignTransaction(tx).send();
            //        transactionResponse.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const transactionObject = {
                from: "0x487f2dfef230c2120b8cc55c5087b103146536ec",
                to: "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                value: "0x1",
                gas: "0x9999",
                maxFeePerGas: "0x5d21dba00",
                maxPriorityFeePerGas: "0x5d21dba00",
                nonce: "0x1",
              };

              provider.eth
                .signTransaction(transactionObject, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            transactionObject = {
                "from": "0x487f2dfef230c2120b8cc55c5087b103146536ec",
                "to": "0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee",
                "value": "0x1",
                "gas": "0x9999",
                "maxFeePerGas": "0x5d21dba00",
                "maxPriorityFeePerGas": "0x5d21dba00",
                "nonce": "0x1"
            }

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.sign_transaction(transactionObject)

            print(eth_response)
  /eth/config/chainID:
    post:
      summary: '[Configuration] eth_chainId'
      tags:
        - eth
      operationId: chainId
      description: |
        Return current chainId set on the requested node.

        **JSONRPC:** `eth_chainId`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: eth_chainId
      responses:
        '200':
          description: Return current chainId set on the requested node.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthChainIdResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/chainId' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_chainId",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.core.methods.response.EthChainId;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class EthChainIdExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    
                void ethChainIdExample() throws IOException {
                    EthChainId br = w3.ethChainId().send();
                    br.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.eth
                .chainId({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.chain_id()

            print(eth_response)
  /eth/config/coinbase:
    post:
      summary: '[Configuration] eth_coinbase'
      tags:
        - eth
      operationId: coinbase
      description: |
        Returns the client coinbase address.

        **JSONRPC:** `eth_coinbase`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/CoinbaseReq'
      responses:
        '200':
          description: Returns the client coinbase address.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/CoinbaseResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |-
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/coinbase' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_coinbase",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.core.methods.response.EthCoinbase;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class EthCoinbaseExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    
                void ethCoinbaseExample() throws IOException {
                    EthCoinbase br = w3.ethCoinbase().send();
                    br.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.eth
                .coinbase({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.coinbase()

            print(eth_response)
  /eth/config/etherbase:
    post:
      summary: '[Configuration] eth_etherbase'
      tags:
        - eth
      operationId: etherbase
      description: |
        Returns the client etherbase address.

        **JSONRPC:** `eth_etherbase`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthEtherbaseReq'
      responses:
        '200':
          description: Returns the current etherbase address.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthEtherbaseResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/etherbase' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_etherbase",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthEtherbaseExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    
                void ethEtherbaseExample() throws IOException {
            //        EthEtherbaseResponse response = w3.ethEtherbase().send();
            //        response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.eth
                .etherbase({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.etherbase()

            print(eth_response)
  /eth/config/gasPrice:
    post:
      summary: '[Configuration] eth_gasPrice'
      tags:
        - eth
      operationId: gasPrice
      description: |
        Returns the current price per gas in peb.

        **NOTE:** This API has different behavior from Ethereum's and returns a gas price of Klaytn instead of suggesting a gas price as in Ethereum.

        **JSONRPC:** `eth_gasPrice`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: eth_gasPrice
      responses:
        '200':
          description: Returns the current price per gas in peb.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGasPriceResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/gasPrice' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_gasPrice",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.core.methods.response.EthGasPrice;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthGasPriceExample {

                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void ethGasPriceExample() throws IOException {
                    EthGasPrice br = w3.ethGasPrice().send();
                    br.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.eth
                .gasPrice({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.gas_price()

            print(eth_response)
  /eth/protocolVersion:
    post:
      operationId: protocolVersion
      summary: '[Configuration] eth_protocolVersion'
      description: |
        Returns the Eth protocol version of the node. The current version (as of v1.9.0) of Cypress/Baobab is istanbul/65.

        **JSONRPC:** `eth_protocolVersion`
      tags:
        - eth
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: eth_protocolVersion
      responses:
        '200':
          description: Returns the Eth protocol version of the node.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: The Eth protocol version of the node.
                        example: '0xAE9F7BCC00'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/protocolVersion' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_protocolVersion",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            package opensdk.sdk.apis.eth.configuration;

            import java.io.IOException;

            import org.web3j.protocol.core.methods.response.EthProtocolVersion;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            public class EthProtocolVersionExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));  
                void ethProtocolVersionExample() throws IOException {
                EthProtocolVersion response = w3.ethProtocolVersion().send();
                response.getResult();
              }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.eth
                .protocolVersion({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.protocol_version()

            print(eth_response)
  /eth/gas/feeHistory:
    post:
      summary: '[Gas] eth_feeHistory'
      tags:
        - eth
      operationId: feeHistory
      description: |
        Returns base fee per gas and transaction effective priority fee per gas history for the requested block range if available.

        **JSONRPC:** `eth_feeHistory`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthFeeHistoryReq'
      responses:
        '200':
          description: Returns base fee per gas and transaction effective priority fee per gas history
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthFeeHistoryResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/feeHistory' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_feeHistory",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x10", "latest", [0.1, 0.2, 0.3]]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.core.DefaultBlockParameter;
            import org.web3j.protocol.core.methods.response.EthFeeHistory;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;
            import java.util.List;

            public class EthFeeHistoryExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    
                void ethFeeHistoryExample() throws IOException {
                    EthFeeHistory br = w3.ethFeeHistory(
                        16,
                        DefaultBlockParameter.valueOf("latest"),
                        List.of(0.1, 0.2, 0.3))
                    .send();
                    br.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockCount = "0x10";
              const lastBlock = "latest";
              const rewardPercentiles = [0.1, 0.2, 0.3];

              provider.eth
                .feeHistory(
                  blockCount,
                  lastBlock,
                  rewardPercentiles,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockCount = "0x10"
            lastBlock = "latest"
            rewardPercentiles = [0.1, 0.2, 0.3]

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.fee_history(blockCount, lastBlock, rewardPercentiles)

            print(eth_response)
  /eth/gas/maxPriorityFeePerGas:
    post:
      summary: '[Gas] eth_maxPriorityFeePerGas'
      tags:
        - eth
      operationId: maxPriorityFeePerGas
      description: |
        Returns a suggestion for a gas tip cap for dynamic fee transaction in peb.

        **NOTE:** This API has different behavior from Ethereum's and returns a gas price of Klaytn instead of suggesting a gas price as in Ethereum.

        **JSONRPC:** `eth_maxPriorityFeePerGas`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthMaxPriorityFeePerGasReq'
      responses:
        '200':
          description: Integer of the current gas price in peb.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthMaxPriorityFeePerGasResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |-
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/maxPriorityFeePerGas' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_maxPriorityFeePerGas",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.core.methods.response.EthMaxPriorityFeePerGas;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthMaxPriorityFeePerGasExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    
                void ethMaxPriorityFeePerGasExample() throws IOException {
                    EthMaxPriorityFeePerGas response = w3.ethMaxPriorityFeePerGas().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.eth
                .maxPriorityFeePerGas({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.max_priority_fee_per_gas()

            print(eth_response)
  /eth/filter/getFilterChanges:
    post:
      operationId: getFilterChanges
      summary: '[Filter] eth_getFilterChanges'
      description: |
        Polling method for a filter, which returns an array of logs which occurred since last poll.

        **JSONRPC:** `eth_getFilterChanges`
      tags:
        - eth
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: eth_getFilterChanges
                    params:
                      type: array
                      items:
                        type: string
                        format: hex
                      description: The filter id
                      example:
                        - '0x16'
      responses:
        '200':
          description: Array - Array of log objects, or an empty array if nothing has changed since last poll.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetFilterChangesResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getFilterChanges' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getFilterChanges",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xd32fd16b6906e67f6e2b65dcf48fc272"]
            }'
        - lang: java
          label: Java
          source: |
            import java.io.IOException;
            import java.math.BigInteger;


            import org.web3j.protocol.core.methods.response.EthLog;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            public class EthGetFilterChangesExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void ethGetFilterChangesExample() throws IOException {
                    EthLog response = w3.ethGetFilterChanges(BigInteger.valueOf(10)).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const id = "0x52421f131ef49ef6b7a8926b8e0a65e";

              provider.eth
                .getFilterChanges(id, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            quantity = "0x11b5f0ef802c98569efa8459cf063ed5"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_filter_changes(quantity)

            print(eth_response)
  /eth/filter/getFilterLogs:
    post:
      summary: '[Filter] eth_getFilterLogs'
      tags:
        - eth
      operationId: getFilterLogs
      description: |
        Returns an array of all logs matching filter with given id, which has been obtained using eth_newFilter. Note that filter ids returned by other filter creation functions, such as eth_newBlockFilter or eth_newPendingTransactionFilter , cannot be used with this function.

        The execution of this API can be limited by two node configurations to manage resources of Klaytn node safely.

        - The number of maximum returned results in a single query (Default: 10,000).

        - The execution duration limit of a single query (Default: 10 seconds).

        **JSONRPC:** `eth_getFilterLogs`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayGetFilterLogsReq'
      responses:
        '200':
          description: Returns an array of all logs matching filter with given id, which has been obtained using eth_newFilter.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayGetFilterLogsResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getFilterLogs' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getFilterLogs",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xd32fd16b6906e67f6e2b65dcf48fc272"]
            }'
        - lang: java
          label: Java
          source: |
            import org.web3j.protocol.core.methods.response.EthLog;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;
            import java.math.BigInteger;

            public class EthGetFilterLogsExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void ethGetFilterLogsExample() throws IOException {
                    EthLog response = w3.ethGetFilterLogs(BigInteger.valueOf(10)).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const id = "0xca6c12a3ecd1b44bb77f7b6536b7ce65";

              provider.eth
                .getFilterLogs(id, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            quantity = "0x11b5f0ef802c98569efa8459cf063ed5"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_filter_logs(quantity)

            print(eth_response)
  /eth/filter/getLogs:
    post:
      operationId: getLogs
      summary: '[Filter] eth_getLogs'
      description: |
        Returns an array of all logs matching a given filter object.

        The execution of this API can be limited by two node configurations to manage resources of Klaytn node safely.

        - The number of maximum returned results in a single query (Default: 10,000).

        - The execution duration limit of a single query (Default: 10 seconds).

        **JSONRPC:** `eth_getLogs`
      tags:
        - eth
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: eth_getLogs
                    params:
                      type: array
                      items:
                        $ref: '#/components/schemas/FilterOptions'
                      description: The filter options.
                      example:
                        - fromBlock: '0x1'
                          toBlock: latest
                          address: '0x87ac99835e67168d4f9a40580f8f5c33550ba88b'
      responses:
        '200':
          description: Returns an array of all logs matching a given filter object.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetLogsResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getLogs' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getLogs",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [{"fromBlock":"0x1","toBlock":"latest","address":"0x87ac99835e67168d4f9a40580f8f5c33550ba88b"}]
            }'
        - lang: java
          label: Java
          source: |
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import org.web3j.protocol.core.DefaultBlockParameter;
            import org.web3j.protocol.core.methods.request.EthFilter;
            import org.web3j.protocol.core.methods.response.EthLog;

            import java.io.IOException;

            public class EthGetLogsExample {
                  private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    
                  void ethGetLogsExample() throws IOException {
                    EthFilter filterOption = new EthFilter(
                        DefaultBlockParameter.valueOf("latest"),
                        DefaultBlockParameter.valueOf("latest"),
                        "0x87ac99835e67168d4f9a40580f8f5c33550ba88b");
                    EthLog response = w3.ethGetLogs(filterOption).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const filterOptions = {
                fromBlock: "latest",
                toBlock: "latest",
                address: "0x87ac99835e67168d4f9a40580f8f5c33550ba88b",
              };
              provider.eth
                .getLogs(filterOptions, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            filterOptions = {
                "fromBlock": "latest",
                "toBlock": "latest",
                "address": "0x87ac99835e67168d4f9a40580f8f5c33550ba88b"
            }

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_logs(filterOptions)

            print(eth_response)
  /eth/filter/newBlockFilter:
    post:
      operationId: newBlockFilter
      summary: '[Filter] eth_newBlockFilter'
      description: |
        Creates a filter in the node, to notify when a new block arrives. To check if the state has changed, call eth_getFilterChanges.

        **JSONRPC:** `eth_newBlockFilter`
      tags:
        - eth
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: eth_newBlockFilter
      responses:
        '200':
          description: A filter id.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: A filter id.
                        example: '0xc2f2e8168a7e38b5d979d0f7084130ee'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/newBlockFilter' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_newBlockFilter",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            import org.web3j.protocol.core.methods.response.EthFilter;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthNewBlockFilterExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    
                void ethNewBlockFilterExample() throws IOException {
                    EthFilter response = w3.ethNewBlockFilter().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.eth
                .newBlockFilter({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.new_block_filter()

            print(eth_response)
  /eth/filter/newFilter:
    post:
      operationId: newFilter
      summary: '[Filter] eth_newFilter'
      description: |
        Creates a filter object, based on filter options, to notify when the state changes (logs).
        - To check if the state has changed, call eth_getFilterChanges.
        - To obtain all logs matching the filter created by eth_newFilter, call eth_getFilterLogs.

        **A note on specifying topic filters:** Topics are order-dependent. A transaction with a log with topics [A, B] will be matched by the following topic filters:
        - [] "anything"
        - [A] "A in first position (and anything after)"
        - [null, B] "anything in first position AND B in second position (and anything after)"
        - [A, B] "A in first position AND B in second position (and anything after)"
        - [[A, B], [A, B]] "(A OR B) in first position AND (A OR B) in second position (and anything after)"

        **NOTE**: In versions earlier than Klaytn v1.7.0, only integer block number, the string "earliest" and "latest" are available.

        **JSONRPC:** `eth_newFilter`
      tags:
        - eth
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthNewFilterReq'
      responses:
        '200':
          description: Returns a filter id
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthNewFilterResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/newFilter' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_newFilter",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                {
                  "fromBlock":"earliest",
                  "toBlock":"latest",
                  "address":"0x87ac99835e67168d4f9a40580f8f5c33550ba88b",
                  "topics":[
                    "0xd596fdad182d29130ce218f4c1590c4b5ede105bee36690727baa6592bd2bfc8"
                  ]
                }
              ]
            }'
        - lang: java
          label: Java
          source: |
            import org.web3j.protocol.core.DefaultBlockParameter;
            import org.web3j.protocol.core.methods.request.EthFilter;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthNewFilterExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void whenRequestValid_ThenCall200ResponseReturns() throws IOException {
                    EthFilter filterOption = new EthFilter(DefaultBlockParameter.valueOf("earliest"),DefaultBlockParameter.valueOf("latest")
                            ,"0x87ac99835e67168d4f9a40580f8f5c33550ba88b");
                    filterOption.addOptionalTopics("0xd596fdad182d29130ce218f4c1590c4b5ede105bee36690727baa6592bd2bfc8");
                    org.web3j.protocol.core.methods.response.EthFilter response = w3.ethNewFilter(filterOption).send();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const fromBlock = "earliest";
              const toBlock = "latest";
              const address = "0x87ac99835e67168d4f9a40580f8f5c33550ba88b";
              const topics = [
                "0xd596fdad182d29130ce218f4c1590c4b5ede105bee36690727baa6592bd2bfc8",
              ];
              provider.eth.newFilter(
                { fromBlock, toBlock, address, topics },
                {},
                (err, data, response) => {
                  console.log(data);
                },
              );
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            filterOptions = {
                "fromBlock": "earliest",
                "toBlock": "latest",
                "address": "0x87ac99835e67168d4f9a40580f8f5c33550ba88b",
                "topics": ["0xd596fdad182d29130ce218f4c1590c4b5ede105bee36690727baa6592bd2bfc8"]
            }

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.new_filter(filterOptions)

            print(eth_response)
  /eth/filter/newPendingTransactionFilter:
    post:
      operationId: newPendingTransactionFilter
      summary: '[Filter] eth_newPendingTransactionFilter'
      description: |
        Creates a filter in the node, to notify when a new block arrives. To check if the state has changed, call eth_getFilterChanges.

        **JSONRPC:** `eth_newPendingTransactionFilter`
      tags:
        - eth
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: eth_newPendingTransactionFilter
      responses:
        '200':
          description: Returns a filter id.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        description: A filter id.
                        example: '0x90cec22a723fcc725fb2462733c2880f'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/newPendingTransactionFilter' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_newPendingTransactionFilter",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            import org.web3j.protocol.core.methods.response.EthFilter;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class EthNewPendingTransactionFilterExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    
                void ethNewPendingTransactionFilterExample() throws IOException {
                    EthFilter response = w3.ethNewPendingTransactionFilter().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.eth
                .newPendingTransactionFilter({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.new_pending_transaction_filter()

            print(eth_response)
  /eth/filter/subscribe:
    post:
      operationId: subscribe
      summary: '[Filter] eth_subscribe'
      description: |
        Creates a new subscription to specific events by using either RPC Pub/Sub over WebSockets or filters over HTTP. It allows clients to wait for events instead of polling for them.

        The node will return a subscription id for each subscription created. For each event that matches the subscription, a notification with relevant data is sent together with the subscription id. If a connection is closed, all subscriptions created over the connection are removed.

        **JSONRPC:** `eth_subscribe`
      tags:
        - eth
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: eth_subscribe
                    params:
                      type: array
                      items:
                        title: NotificationType
                        type: string
                        enum:
                          - newHeads
                          - logs
                      description: 'A notification type: "newHeads" or "logs"'
                      example:
                        - newHeads
      responses:
        '200':
          description: Return a subscription id when a subscription is created.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        format: hex
                        example: '0x48bb6cb35d6ccab6eb2b4799f794c312'
                        description: A subscription id when a subscription is created. For each event that matches the subscription, a notification with relevant data will be delivered as well.
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/subscribe' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_subscribe",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["newHeads"]
            }'
  /eth/filter/uninstallFilter:
    post:
      summary: '[Filter] eth_uninstallFilter'
      tags:
        - eth
      operationId: uninstallFilter
      description: |
        Uninstalls a filter with given id. Should always be called when watch is no longer needed. Additionally, filters timeout when they are not requested with eth_getFilterChanges for a period of time.

        **JSONRPC:** `eth_uninstallFilter`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlayUninstallFilterReq'
      responses:
        '200':
          description: Returns true if the filter was successfully uninstalled, otherwise false.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlayUninstallFilterResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/uninstallFilter' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_uninstallFilter",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xb"]
            }'
        - lang: java
          label: Java
          source: |
            import org.web3j.protocol.core.methods.response.EthUninstallFilter;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;
            import java.math.BigInteger;

            public class EthUninstallFilterExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    void ethUninstallFilterExample() throws IOException {
                    EthUninstallFilter response = w3.ethUninstallFilter(
                        BigInteger.valueOf(11))
                    .send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const filterId = "0xb";

              provider.eth
                .uninstallFilter(filterId, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            filterId = "0xb"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.uninstall_filter(filterId)

            print(eth_response)
  /eth/filter/unsubscribe:
    post:
      operationId: unsubscribe
      summary: '[Filter] eth_unsubscribe'
      description: |
        Cancels the subscription with a specific subscription id by using either RPC Pub/Sub over WebSockets or filters over HTTP. Only the connection that created a subscription can unsubscribe from it.

        **JSONRPC:** `eth_unsubscribe`
      tags:
        - eth
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: eth_unsubscribe
                    params:
                      type: array
                      items:
                        title: SubscriptionId
                        type: string
                        format: hex
                        description: A subscription id.
                      example:
                        - '0xab8ac7a4045025d0c2807d63060eea6d'
      responses:
        '200':
          description: Return true if the subscription was successfully canceled, otherwise false.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: boolean
                        description: true if the subscription was successfully canceled, otherwise false.
                        example: true
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/unsubscribe' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_unsubscribe",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xab8ac7a4045025d0c2807d63060eea6d"]
            }'
  /eth/getProof:
    post:
      summary: '[Others] eth_getProof'
      tags:
        - eth
      operationId: getProof
      description: |
        Returns the account and storage values of the specified account including the Merkle-proof. This call can be used to verify that the data you are pulling from is not tampered with.

        **JSONRPC:** `eth_getProof`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: eth_getProof
                    params:
                      type: array
                      items:
                        anyOf:
                          - title: Address
                            type: string
                            format: 20-byte DATA
                            description: Address of the account
                          - title: Keys
                            description: Array of storage-keys which should be proofed and included
                            type: string
                            format: 32-byte DATA
                          - $ref: '#/components/schemas/BlockNumberOrTag'
                      example:
                        - '0xe5cB067E90D5Cd1F8052B83562Ae670bA4A211a8'
                        - - '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421'
                        - latest
      responses:
        '200':
          description: A account object
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetProofResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getProof' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getProof",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "0xe5cB067E90D5Cd1F8052B83562Ae670bA4A211a8",
                ["0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"],
                "latest"
              ]
            }'
        - lang: java
          label: Java
          source: |

            //import org.web3j.protocol.klaytn.core.method.response.EthGetProofResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;
            import java.util.Arrays;

            public class EthGetProofExample {
                  private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void ethGetProofExample() throws IOException {
            //        EthGetProofResponse response = w3
            //            .ethGetProof(
            //                "0xe5cB067E90D5Cd1F8052B83562Ae670bA4A211a8",
            //                Arrays.asList("0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"),
            //                "latest")
            //            .send();
            //        response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const account = "0xe5cB067E90D5Cd1F8052B83562Ae670bA4A211a8";
              const keys = [
                "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
              ];
              const blockNumber = "latest";
              provider.eth
                .getProof(account, keys, blockNumber, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            account = "0xe5cB067E90D5Cd1F8052B83562Ae670bA4A211a8"
            keys = ["0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"]
            blockNumber = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.get_proof(account, keys, blockNumber)

            print(eth_response)
  /eth/miscellaneous/getHashrate:
    post:
      summary: '[Miscellaneous] eth_getHashrate'
      tags:
        - eth
      operationId: getHashrate
      description: |
        Returns the number of hashes per second that the node is mining with.
        Please note that it always return 0x0 because there is no PoW mechanism in Klaytn.

        **JSONRPC:** `eth_getHashrate`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetHashrateReq'
      responses:
        '200':
          description: The number of hashes per second.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetHashrateResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |-
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getHashrate' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getHashrate",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
  /eth/miscellaneous/getWork:
    post:
      summary: '[Miscellaneous] eth_getWork'
      tags:
        - eth
      operationId: getWork
      description: |
        Returns the hash of the current block, the seedHash, and the boundary condition to be met ("target").

        Please note that it always return `errNoMiningWork` because there is no PoW mechanism in Klaytn.

        **JSONRPC:** `eth_getWork`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthGetWorkReq'
      responses:
        '200':
          description: List of current block header pow-hash, the seed hash used for the DAG, the boundary condition ("target"), 2^256 / difficulty.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthGetWorkResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |-
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/getWork' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_getWork",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
  /eth/miscellaneous/hashrate:
    post:
      summary: '[Miscellaneous] eth_hashrate'
      tags:
        - eth
      operationId: hashrate
      description: |
        Returns the number of hashes per second that the node is mining with.
        Please note that it always return 0x0 because there is no PoW mechanism in Klaytn.

        **JSONRPC:** `eth_hashrate`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthHashRateReq'
      responses:
        '200':
          description: The number of hashes per second.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthHashRateResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |-
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/hashrate' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_hashrate",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.core.methods.response.EthHashrate;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthHashrateExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    
                void ethHashrateExample() throws IOException {
                    EthHashrate response = w3.ethHashrate().send();
                    response.getResult();
                }
                
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.eth
                .hashrate({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.hashrate()

            print(eth_response)
  /eth/miscellaneous/submitHashrate:
    post:
      summary: '[Miscellaneous] eth_submitHashrate'
      tags:
        - eth
      operationId: submitHashrate
      description: |
        Used for submitting mining hashrate.

        Please note that it always return false because there is no PoW mechanism in Klaytn.

        **JSONRPC:** `eth_submitHashrate`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/EthSubmitHashrateReq'
      responses:
        '200':
          description: Returns true if submitting went through succesfully and false otherwise.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/EthSubmitHashrateResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/submitHashrate' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_submitHashrate",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x5", "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.core.methods.response.EthSubmitHashrate;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class EthSubmitHashrateExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void ethSubmitHashrateExample() throws IOException {
                    String hashRate ="0x5";
                    String id  = "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef";
                    EthSubmitHashrate response = w3.ethSubmitHashrate(hashRate , id).send();
                    response.getResult();
                }
                
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const hashrate = "0x5";
              const id =
                "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef";

              provider.eth
                .submitHashrate(hashrate, id, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            hashrate = "0x5"
            hashrateId = "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.submit_hashrate(hashrate, hashrateId)

            print(eth_response)
  /eth/miscellaneous/submitWork:
    post:
      summary: '[Miscellaneous] eth_submitWork'
      tags:
        - eth
      operationId: submitWork
      description: |
        Used for submitting a proof-of-work solution.

        Please note that it always return false because there is no PoW mechanism in Klaytn.

        **JSONRPC:** `eth_submitWork`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/KlaySubmitWorkReq'
      responses:
        '200':
          description: Returns true if the provided solution is valid, otherwise false.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/KlaySubmitWorkResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/eth/submitWork' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "eth_submitWork",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x0000000000000001", "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef", "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.core.methods.response.EthSubmitWork;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class EthSubmitWorkExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));    
                void ethSubmitWorkExample() throws IOException {
                    EthSubmitWork response = w3.ethSubmitWork(
                        "0x0000000000000001", 
                        "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef", 
                        "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef")
                    .send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const nonce = "0x0000000000000001";
              const powHash =
                "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef";
              const mixDigest =
                "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef";

              provider.eth
                .submitWork(nonce, powHash, mixDigest, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            nonce = "0x0000000000000001"
            powHash = "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
            mixDigest = "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"

            w3 = Web3(Web3.HTTPProvider(host))
            eth_response = w3.eth.submit_work(nonce, powHash, mixDigest)

            print(eth_response)
components:
  schemas:
    JsonRpcRequest:
      type: object
      required:
        - method
        - id
        - jsonrpc
      properties:
        method:
          type: string
          description: Method name
        id:
          type: integer
          default: 1
          format: int64
          description: Request ID, Random or Auto incrementation
        jsonrpc:
          type: string
          default: '2.0'
          description: JSON-RPC Version (2.0)
        params:
          type: array
          items: {}
    ErrorMember:
      type: object
      title: ErrorMember
      required:
        - code
      properties:
        code:
          type: integer
          format: int64
          example: -32700
          description: |
            A Number that indicates the error type that occurred.
            This MUST be an integer.

            | code | message | description |
            |-----|-----|-------|
            | -32700   | Parse error   | invalid JSON was received by the server. An error occurred on the server while parsing the JSON text. |
            |-32602 | Invalid params | Invalid method parameter(s). |
        message:
          type: string
          example: Parse error
          description: |
            A String providing a short description of the error.
            The message SHOULD be limited to a concise single sentence.
        data:
          type: string
          description: |
            A Primitive or Structured value that contains additional information about the error.
            This may be omitted.
            The value of this member is defined by the Server (e.g. detailed error information, nested errors etc.).
    JsonRpcResponse:
      type: object
      required:
        - jsonrpc
        - id
      properties:
        jsonrpc:
          type: string
          default: '2.0'
        id:
          type: integer
          format: int64
        error:
          $ref: '#/components/schemas/ErrorMember'
        result: {}
    KlayGetBlockByHashReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_getBlockByHash
        params:
          type: array
          items:
            properties:
              BlockHash:
                title: BlockHash
                description: Hash of a block.
                type: string
                format: 32-byte DATA
              IsTransactionObjects:
                title: IsTransactionObjects
                description: If true, it returns the full transaction objects, if false only the hashes of the transactions.
                type: boolean
          example:
            - '0xb8deae63002d2b6aa33247c8ef545383ee0fd2282ac9b49dbbb74114389ddb5c'
            - true
    EthBlockObject:
      type: object
      required:
        - baseFeePerGas
        - difficulty
        - extraData
        - gasLimit
        - gasUsed
        - hash
        - logsBloom
        - miner
        - mixHash
        - nonce
        - number
        - parentHash
        - receiptsRoot
        - sha3Uncles
        - size
        - stateRoot
        - timestamp
        - totalDifficulty
        - transactionsRoot
      properties:
        baseFeePerGas:
          type: string
          format: hex
          description: The base fee per gas.
        difficulty:
          type: string
          format: hex
          description: The integer of the difficulty for this block
        extraData:
          type: string
          format: DATA
          description: The "extra data" field of this block.
        gasLimit:
          type: string
          format: hex
          description: The maximum gas allowed in this block.
        gasUsed:
          type: string
          format: hex
          description: The total used gas by all transactions in this block.
        hash:
          type: string
          format: 32-byte DATA
          description: Hash of the block. null when it is a pending block.
        logsBloom:
          type: string
          format: 256-byte DATA
          description: The bloom filter for the logs of the block. null when it is a pending block.
        miner:
          type: string
          format: 20-byte DATA
          description: The address of the beneficiary to whom the mining rewards were given.
        mixHash:
          type: string
          format: 32-byte DATA
          description: The hash which proves combined with the nonce that a sufficient amount of computation has been carried out on this block.
        nonce:
          type: string
          format: 8-byte DATA
          description: The hash of the generated proof-of-work.
        number:
          type: string
          format: hex
          description: The block number. null when it is a pending block.
        parentHash:
          type: string
          format: 32-byte DATA
          description: Hash of the parent block.
        receiptsRoot:
          type: string
          format: 32-byte DATA
          description: The root of the receipts trie of the block.
        sha3Uncles:
          type: string
          format: 32-byte DATA
          description: The SHA3 of the uncles data in the block.
        size:
          type: string
          format: hex
          description: Integer of the size of this block in bytes.
        stateRoot:
          type: string
          format: 32-byte DATA
          description: The root of the final state trie of the block.
        timestamp:
          type: string
          format: hex
          description: The Unix timestamp for when the block was collated.
        totalDifficulty:
          type: string
          format: hex
          description: The total blockScore of the chain until this block
        transactionsRoot:
          type: string
          format: 32-byte DATA
          description: The root of the transaction trie of the block.
        transactions:
          type: array
          items:
            oneOf:
              - type: string
                title: TransactionHash
                format: 32-byte DATA
              - type: object
                title: TransactionObject
          description: Array of transaction objects, or 32-byte transaction hashes depending on the last given parameter.
        uncles:
          type: array
          description: Array of uncle hashes.
          items:
            type: string
            format: 32-byte DATA
      example:
        baseFeePerGas: '0x5d21dba00'
        difficulty: '0x1'
        extraData: '0xd8820505846b6c617988676f312e31312e328664617277696e00000000000000f89ed594e733cb4d279da696f30d470f8c04decb54fcb0d2b841f1f600d136f93a5a2d9c12a7a9f6d7ba80a047c3910a2bbc01e38bcce25e48ed2004d21f134df5efaf1f8cbb9a26e1548e57628ab258c935490c11a7cd65324701f843b841444b3efc40071b6eec2c4d2630b483710b8fc7a601432431b0161f489102d1ca02f2ef93153d0be3843aa563d34cee1716163f58711843442aedd94a56303c0400'
        gasLimit: '0xe8d4a50fff'
        gasUsed: '0x0'
        governanceData: 0x
        hash: '0xb8deae63002d2b6aa33247c8ef545383ee0fd2282ac9b49dbbb74114389ddb5c'
        logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
        miner: '0x0000000000000000000000000000000000000000'
        mixHash: '0x63746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365'
        nonce: '0x0000000000000000'
        number: '0x1'
        parentHash: '0x73255a60e9491b5715f9bfcb7fa1143296810f629836d4cefbd1921d9173d63d'
        receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421'
        reward: '0x0000000000000000000000000000000000000000'
        size: '0x2d7'
        stateRoot: '0xedb87f4b0f905a655c80d1768eb22b1eff2405098c4748b8364c869611e02a2b'
        timestamp: '0x5c99cbd8'
        totalDifficulty: '0x2'
        transactions: []
        transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421'
        uncles: []
    KlayGetBlockByHashResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/EthBlockObject'
    IntegerBlockNumber:
      title: IntegerBlockNumber
      description: the block number with type integer
      type: number
    HexadecimalBlockNumber:
      title: HexadecimalBlockNumber
      type: string
      format: hexadecimal
      description: the block number with type hexadecimal
    BlockTag:
      title: BlockTag
      type: string
      description: the block tag [latest, pending, earliest]
    BlockNumberOrTag:
      oneOf:
        - $ref: '#/components/schemas/IntegerBlockNumber'
        - $ref: '#/components/schemas/HexadecimalBlockNumber'
        - $ref: '#/components/schemas/BlockTag'
    EthGetBlockByNumberReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: eth_getBlockByNumber
        params:
          type: array
          items:
            properties:
              BlockNumberOrTag:
                $ref: '#/components/schemas/BlockNumberOrTag'
              IsTransactionObjects:
                type: boolean
                title: IsTransactionObjects
                description: If true it returns the full transaction objects, if false only the hashes of the transactions.
          example:
            - '0xd0054e'
            - false
    EthGetBlockByNumberResp:
      type: object
      properties:
        result:
          type: object
          nullable: true
          required:
            - baseFeePerGas
            - difficulty
            - extraData
            - gasLimit
            - gasUsed
            - hash
            - logsBloom
            - miner
            - mixHash
            - nonce
            - number
            - parentHash
            - receiptsRoot
            - sha3Uncles
            - size
            - stateRoot
            - timestamp
            - totalDifficulty
            - transactionsRoot
            - transactions
            - uncles
          properties:
            baseFeePerGas:
              type: string
              format: hex
              description: The base fee per gas.
            difficulty:
              type: string
              format: hex
              description: The integer of the difficulty for this block
            extraData:
              type: string
              format: DATA
              description: The "extra data" field of this block.
            gasLimit:
              type: string
              format: hex
              description: The maximum gas allowed in this block.
            gasUsed:
              type: string
              format: hex
              description: The total used gas by all transactions in this block.
            hash:
              type: string
              format: 32-byte DATA
              nullable: true
              description: Hash of the block. null when it is a pending block.
            logsBloom:
              type: string
              format: 256-byte DATA
              nullable: true
              description: The bloom filter for the logs of the block. null when it is a pending block.
            miner:
              type: string
              format: 20-byte DATA
              description: The address of the beneficiary to whom the mining rewards were given.
            mixHash:
              type: string
              format: 32-byte DATA
              description: The hash which proves combined with the nonce that a sufficient amount of computation has been carried out on this block.
            nonce:
              type: string
              format: 8-byte DATA
              description: The hash of the generated proof-of-work.
            number:
              type: string
              format: hex
              nullable: true
              description: The block number. null when it is a pending block.
            parentHash:
              type: string
              format: 32-byte DATA
              description: Hash of the parent block.
            receiptsRoot:
              type: string
              format: 32-byte DATA
              description: The root of the receipts trie of the block.
            sha3Uncles:
              type: string
              format: 32-byte DATA
              description: The SHA3 of the uncles data in the block.
            size:
              type: string
              format: hex
              description: Integer of the size of this block in bytes.
            stateRoot:
              type: string
              format: 32-byte DATA
              description: The root of the final state trie of the block.
            timestamp:
              type: string
              format: hex
              description: The Unix timestamp for when the block was collated.
            totalDifficulty:
              type: string
              format: hex
              description: The total blockScore of the chain until this block
            transactionsRoot:
              type: string
              format: 32-byte DATA
              description: The root of the transaction trie of the block.
            transactions:
              type: array
              description: Array of transaction objects, or 32-byte transaction hashes depending on the last given parameter.
              items:
                anyOf:
                  - type: string
                    format: 32-byte DATA
                  - type: object
                    title: TransactionObject
            uncles:
              type: array
              items:
                type: string
              description: Array of uncle hashes.
          example:
            baseFeePerGas: '0x5d21dba00'
            difficulty: '0x1'
            extraData: 0x
            gasLimit: '0xe8d4a50fff'
            gasUsed: '0x44437'
            hash: '0x456a7cbb6fada11a0ca8cec24510d89da1c52898f1087528752ae6e13973fbc5'
            logsBloom: '0x0000100000000094000000400000080000000040000000000000000000000002000000000000000000000000004001000000200000000000000008000220000000080400000800000000000a000000000000000000000000000010000000000000002000000408000000000000000010000080101002000000000010000000100000010000200800000400000080000000000000000000000002000000102000024000080200000000000082000000000000000000000000010000000000000000100012000000000000011000000000002000201000000008000000002000000010002800000000001400000000000000000000000100000000200000000000'
            miner: '0x1ad91ee08f21be3de0ba2ba6918e714da6b45836'
            mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000'
            nonce: '0x0000000000000000'
            number: '0xd0054e'
            parentHash: '0x2b88fdb3821669357a0b8367115e30145135c44bb8f62641d4e7765a7f555d17'
            receiptsRoot: '0xc36bc44d0b52dee954be9bbd519bddc0bf6e991af2ed6f6ba506f89f10cdb9a7'
            sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347'
            size: '0x64c'
            stateRoot: '0x123a0da1c621236e64f9b486a9a9712ec6ce07d6690acab5a18b716d17cdc29f'
            timestamp: '0x6194f184'
            totalDifficulty: '0xd0054f'
            transactions:
              - '0x5b3492f8199ee2a551d991b7d00bd48967ca5e5c1c15d6e1ee9fda97e3126e9a'
              - '0x8e1870262f2ba0452458280ad6ad5d54e5288623e415692c822979b7608c7297'
              - '0x98053d20b01c9e56964a57084fb91ccc01b242adfb09c23534162dcbbcc094c2'
            transactionsRoot: '0x29b9880f57c0e79d0be5aa4fcc6b4cfcbed3e51478ad8f44533acce012df8cf1'
            uncles: []
    KlayGetBlockTransactionCountByHashReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_getBlockTransactionCountByHash
        params:
          type: array
          description: Hash of a block.
          items:
            title: blockHash
            type: string
            format: 32-byte DATA
          example:
            - '0x0c11803ab36110db993e7520908b9ba9336cca2f2dcc9b6130c481a3ccdc2621'
    EthGetBlockTransactionCountByNumberReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_getBlockTransactionCountByNumber
        params:
          type: array
          items:
            $ref: '#/components/schemas/BlockNumberOrTag'
          example:
            - '0xe8'
    EthGetBlockTransactionCountByNumberResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          description: Integer of the number of transactions in this block.
    EthGetHeaderByHashReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: eth_getHeaderByHash
        params:
          type: array
          items:
            type: string
            format: 32-byte DATA
            title: blockHash
          description: Hash of a block.
          example:
            - '0x1b4'
    EthHeaderObject:
      title: EthHeaderObject
      type: object
      required:
        - baseFeePerGas
        - difficulty
        - extraData
        - gasLimit
        - gasUsed
        - hash
        - logsBloom
        - miner
        - mixHash
        - nonce
        - number
        - parentHash
        - receiptsRoot
        - sha3Uncles
        - size
        - stateRoot
        - timestamp
        - totalDifficulty
        - transactionsRoot
      properties:
        baseFeePerGas:
          type: string
          format: hex
          description: The base fee per gas.
        difficulty:
          type: string
          format: hex
          description: The integer of the difficulty for this block.
        extraData:
          type: string
          format: DATA
          description: The "extra data" field of this block.
        gasLimit:
          type: string
          format: hex
          description: The maximum gas allowed in this block.
        gasUsed:
          type: string
          format: hex
          description: The total used gas by all transactions in this block.
        hash:
          type: string
          format: 32-byte DATA
          description: Hash of the block. null when it is a pending block.
        logsBloom:
          type: string
          format: 256-byte DATA
          description: The bloom filter for the logs of the block.
        miner:
          type: string
          format: 20-byte DATA
          description: The address of the beneficiary to whom the mining rewards were given.
        mixHash:
          type: string
          format: 32-byte DATA
          description: The hash which proves combined with the nonce that a sufficient amount of computation has been carried out on this block.
        nonce:
          type: string
          format: 8-byte DATA
          description: The hash of the generated proof-of-work.
        number:
          type: string
          format: hex
          description: The block number. null when it is a pending block.
        parentHash:
          type: string
          format: 32-byte DATA
          description: Hash of the parent block.
        receiptsRoot:
          type: string
          format: 32-byte DATA
          description: The root of the receipts trie of the block.
        sha3Uncles:
          type: string
          format: 32-byte DATA
          description: The SHA3 of the uncles data in the block.
        size:
          type: string
          format: hex
          description: Integer of the size of this block in bytes.
        stateRoot:
          type: string
          format: 32-byte DATA
          description: The root of the final state trie of the block.
        timestamp:
          type: string
          format: hex
          description: The Unix timestamp for when the block was collated.
        totalDifficulty:
          type: string
          format: hex
          description: The total blockScore of the chain until this block.
        transactionsRoot:
          type: string
          format: 32-byte DATA
          description: The root of the transaction trie of the block.
      example:
        baseFeePerGas: '0x5d21dba00'
        difficulty: '0x1'
        extraData: '0xd8820505846b6c617988676f312e31312e328664617277696e00000000000000f89ed594e733cb4d279da696f30d470f8c04decb54fcb0d2b841f1f600d136f93a5a2d9c12a7a9f6d7ba80a047c3910a2bbc01e38bcce25e48ed2004d21f134df5efaf1f8cbb9a26e1548e57628ab258c935490c11a7cd65324701f843b841444b3efc40071b6eec2c4d2630b483710b8fc7a601432431b0161f489102d1ca02f2ef93153d0be3843aa563d34cee1716163f58711843442aedd94a56303c0400'
        gasLimit: '0xe8d4a50fff'
        gasUsed: '0x0'
        governanceData: 0x
        hash: '0xb8deae63002d2b6aa33247c8ef545383ee0fd2282ac9b49dbbb74114389ddb5c'
        logsBloom: '0x
        miner: '0x0000000000000000000000000000000000000000'
        mixHash: '0x63746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365'
        nonce: '0x0000000000000000'
        number: '0x1'
        parentHash: '0x73255a60e9491b5715f9bfcb7fa1143296810f629836d4cefbd1921d9173d63d'
        receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421'
        reward: '0x0000000000000000000000000000000000000000'
        size: '0x2d7'
        stateRoot: '0xedb87f4b0f905a655c80d1768eb22b1eff2405098c4748b8364c869611e02a2b'
        timestamp: '0x5c99cbd8'
        totalDifficulty: '0x2'
        transactions: []
        transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421'
        uncles: []
    EthGetHeaderByHashResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/EthHeaderObject'
    EthGetHeaderByNumberReq:
      type: object
      properties:
        method:
          type: string
          default: eth_getHeaderByNumber
        params:
          type: array
          description: Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter.
          items:
            properties:
              blockNumberOrTag:
                $ref: '#/components/schemas/BlockNumberOrTag'
                example:
                  - '0x1b4'
    EthGetHeaderByNumberResp:
      title: EthGetHeaderByNumberResp
      type: object
      properties:
        result:
          $ref: '#/components/schemas/EthHeaderObject'
    BlockHash:
      title: BlockHash
      type: string
      format: 32-byte DATA
      description: the block hash
    BlockNumberOrHashOrTag:
      oneOf:
        - $ref: '#/components/schemas/IntegerBlockNumber'
        - $ref: '#/components/schemas/HexadecimalBlockNumber'
        - $ref: '#/components/schemas/BlockTag'
        - $ref: '#/components/schemas/BlockHash'
    schemas-EthGetHeaderByHashReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: eth_getStorageAt
        params:
          type: array
          items:
            properties:
              Address:
                type: string
                title: Address
                description: Address of the storage.
                format: 20-byte DATA
              Quantity:
                type: string
                title: Quantity
                description: Integer of the position in the storage.
                format: hex
              BlockNumberOrHashOrTag:
                $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - '0x295a70b2de5e3953354a6a8344e616ed314d7251'
            - '0x0'
            - latest
    schemas-EthGetHeaderByHashResp:
      type: object
      properties:
        result:
          type: string
          format: DATA
          description: The value at this storage position.
          example: '0x00000000000000000000000000000000000000000000000000000000000004d2'
    EthGetUncleByBlockHashAndIndexReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_getUncleByBlockHashAndIndex
        params:
          type: array
          items:
            properties:
              BlockHash:
                title: BlockHash
                description: Hash of a block.
                type: string
                format: 32-byte DATA
              UncleIndex:
                title: UncleIndex
                description: The uncle's index position.
                type: string
                format: hex
          example:
            - '0xb8deae63002d2b6aa33247c8ef545383ee0fd2282ac9b49dbbb74114389ddb5c'
            - '0x1'
    EthGetUncleByBlockHashAndIndexResp:
      type: object
      properties:
        result:
          type: string
          nullable: true
          default: null
    EthGetUncleByBlockNumberAndIndexReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_getUncleByBlockNumberAndIndex
        params:
          type: array
          items:
            properties:
              BlockNumberOrTag:
                $ref: '#/components/schemas/BlockNumberOrTag'
              UncleIndex:
                title: UncleIndex
                description: The uncle's index position.
                type: string
                format: hex
          example:
            - '0xe8'
            - '0x1'
    EthGetUncleByBlockNumberAndIndexResp:
      type: object
      properties:
        result:
          type: string
          nullable: true
          default: null
    EthGetUncleCountByBlockHashReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_getUncleCountByBlockHash
        params:
          type: array
          description: Hash of a block.
          items:
            title: BlockHash
            type: string
            format: 32-byte DATA
          example:
            - '0xb8deae63002d2b6aa33247c8ef545383ee0fd2282ac9b49dbbb74114389ddb5c'
    EthGetUncleCountByBlockHashResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          nullable: true
          description: Integer of the number of transactions in this block. It returns null if there is no matching block.
          example: '0x0'
    EthGetUncleCountByBlockNumberReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_getUncleCountByBlockNumber
        params:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/BlockNumberOrTag'
          example:
            - '0xe8'
    EthGetUncleCountByBlockNumberResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          description: Integer of the number of transactions in this block. It returns null if there is no matching block.
          example: '0x0'
    EthMiningReq:
      type: object
      properties:
        method:
          type: string
          default: eth_mining
    EthMiningResp:
      type: object
      properties:
        result:
          type: boolean
          description: true if the client is mining, otherwise false.
          example: true
    KlayGetBlockReceiptsReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: eth_getBlockReceipts
        params:
          type: array
          description: Hash of a block
          items:
            type: string
            title: HashOfBlock
            format: 32-byte DATA
            description: Hash of a block.
          example:
            - '0xdc762ed0274496e2a42278e2648d910d82468687b5415bb5eb058a96a0b93c30'
    KlayGetBlockReceiptsResp:
      type: object
      properties:
        result:
          type: array
          items:
            type: object
            description: A Block Receipts
          example:
            - blockHash: '0xbbf314246e4b3578790ee48ada42111bc67708a4539373ccc2feb5d88833d839'
              blockNumber: '0x83db764'
              contractAddress: null
              effectiveGasPrice: '0x5d21dba00'
              feePayer: '0x5e6b99bca5a21818d40d12c56194674989146fc8'
              feePayerSignatures:
                - V: '0x7f5'
                  R: '0xfd3bf3bb2ee88b4a3399c0a87d21d1bd6f87f1510da495dad7d106774d882a95'
                  S: '0x17f88f413d72e15a0352b594bb138f5150c0eb68b673a56852f25d0d3a01f161'
              from: '0x95b4cef2d1d6a0b22b339306cea3aff74548cf83'
              gas: '0x61a80'
              gasPrice: '0xba43b7400'
              gasUsed: '0x23b6e'
              input: '0x202ee0ed000000000000000000000000000000000000000000000000000000000000e92d000000000000000000000000000000000000000000000000000000172f6e3700'
              logs:
                - address: '0x5266b74a8063e08e603bfbfc1ede4d71b8245dcd'
                  topics:
                    - '0x0109fc6f55cf40689f02fbaad7af7fe7bbac8a3d2186600afc7d3e10cac60271'
                    - '0x000000000000000000000000000000000000000000000000000000000000e92d'
                    - '0x00000000000000000000000095b4cef2d1d6a0b22b339306cea3aff74548cf83'
                  data: '0x0000000000000000000000000000000000000000000000000000000065518cbe'
                  blockNumber: '0x83db764'
                  transactionHash: '0x3aed1cf24976a3f89944bb06825db8a1fb3df2741e16b1b1922d6d0db9357856'
                  transactionIndex: '0x0'
                  blockHash: '0xbbf314246e4b3578790ee48ada42111bc67708a4539373ccc2feb5d88833d839'
                  logIndex: '0x0'
                  removed: false
                - address: '0x5266b74a8063e08e603bfbfc1ede4d71b8245dcd'
                  topics:
                    - '0x92e98423f8adac6e64d0608e519fd1cefb861498385c6dee70d58fc926ddc68c'
                    - '0x000000000000000000000000000000000000000000000000000000172f6e3700'
                    - '0x000000000000000000000000000000000000000000000000000000000000e92d'
                    - '0x00000000000000000000000095b4cef2d1d6a0b22b339306cea3aff74548cf83'
                  data: 0x
                  blockNumber: '0x83db764'
                  transactionHash: '0x3aed1cf24976a3f89944bb06825db8a1fb3df2741e16b1b1922d6d0db9357856'
                  transactionIndex: '0x0'
                  blockHash: '0xbbf314246e4b3578790ee48ada42111bc67708a4539373ccc2feb5d88833d839'
                  logIndex: '0x1'
                  removed: false
                - address: '0x5266b74a8063e08e603bfbfc1ede4d71b8245dcd'
                  topics:
                    - '0x0559884fd3a460db3073b7fc896cc77986f16e378210ded43186175bf646fc5f'
                    - '0x000000000000000000000000000000000000000000000000000000172f6e3700'
                    - '0x000000000000000000000000000000000000000000000000000000000000e92d'
                  data: '0x0000000000000000000000000000000000000000000000000000000065518cbe'
                  blockNumber: '0x83db764'
                  transactionHash: '0x3aed1cf24976a3f89944bb06825db8a1fb3df2741e16b1b1922d6d0db9357856'
                  transactionIndex: '0x0'
                  blockHash: '0xbbf314246e4b3578790ee48ada42111bc67708a4539373ccc2feb5d88833d839'
                  logIndex: '0x2'
                  removed: false
              logsBloom: '0x00000000000000000020000000000000400000000000000000000000000000000000000000000000040000000020000000000000000200000000000000000000000000000000000000000000002000000000000001000000000100000000000000000000000000001000000000000001000000000400000000008000100000000000000000000000000000000000000000000c80000000000000000000000000000000001000000000000000000000000000000000000000000400000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000'
              nonce: '0xe92c'
              senderTxHash: '0x557b98f94afd1270ba13c9f71c0b9ab862437ff155850a63d798156641b62368'
              signatures:
                - V: '0x7f5'
                  R: '0xc8817da92672f512af1573d50f998abd785013ba077760f7496550c0b98ea200'
                  S: '0x16d5a6a393488f002d63596f55d7b3c2425feff71df23cf44f90d48c88841529'
              status: '0x1'
              to: '0x5266b74a8063e08e603bfbfc1ede4d71b8245dcd'
              transactionHash: '0x3aed1cf24976a3f89944bb06825db8a1fb3df2741e16b1b1922d6d0db9357856'
              transactionIndex: '0x0'
              type: TxTypeFeeDelegatedSmartContractExecution
              typeInt: 49
              value: '0x0'
    EthCallObject:
      title: EthCallObject
      type: object
      description: The transaction call object. See the next table for the object's properties.
      properties:
        from:
          type: string
          format: 20-byte DATA
          description: (optional) Address the transaction is simulated to have been sent from. The 0x00..0 address is used if no address is specified.
        to:
          type: string
          format: 20-byte DATA
          description: (optional) Address the transaction is sent to.
        gas:
          type: string
          format: hex
          description: (optional) Maximum gas allowance for the code execution to avoid infinite loops. Defaults to 2^63 or whatever value the node operator specified via --rpc.gascap.
        gasPrice:
          type: string
          format: hex
          description: (optional) Number of peb to simulate paying for each unit of gas during execution. Defaults to 0 peb.
        value:
          type: string
          format: hex
          description: (optional) Amount of peb to simulate sending along with the transaction. Defaults to 0.
        input:
          type: string
          format: DATA
          description: (optional) Hash of the method signature and encoded parameter. It replaces data field, but 'data` field is still supported for backward compatibility.
    StateOverrideSet:
      type: object
      description: The state override set is an optional address-to-state mapping, where each entry specifies some state to be ephemerally overridden prior to executing the call.
      properties:
        balance:
          type: integer
          format: int64
          description: (optional) Fake balance to set for the account before executing the call.
        nonce:
          type: integer
          format: int64
          description: (optional) Fake nonce to set for the account before executing the call.
        code:
          type: string
          format: DATA
          description: (optional) Fake EVM bytecode to inject into the account before executing the call.
        state:
          type: object
          description: (optional) Fake key-value mapping to override all slots in the account storage before executing the call.
        stateDiff:
          type: object
          description: (optional) Fake key-value mapping to override individual slots in the account storage before executing the call.
    KlayCallReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_call
        params:
          type: array
          items:
            properties:
              EthCallObject:
                $ref: '#/components/schemas/EthCallObject'
              BlockNumberOrTag:
                $ref: '#/components/schemas/BlockNumberOrTag'
              StateOverrideSet:
                $ref: '#/components/schemas/StateOverrideSet'
          example:
            - from: '0xca7a99380131e6c76cfa622396347107aeedca2d'
              to: '0xbE3892d33620bE5aca8c75D39e7401871194d290'
              input: '0x2e64cec1'
            - latest
            - '0xbE3892d33620bE5aca8c75D39e7401871194d290':
                code: '0x6080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632e64cec114604e5780636057361d146076575b600080fd5b348015605957600080fd5b50606060a0565b6040518082815260200191505060405180910390f35b348015608157600080fd5b50609e6004803603810190808035906020019092919050505060a9565b005b60008054905090565b80600081905550505600a165627a7a723058207783dba41884f73679e167576362b7277f88458815141651f48ca38c25b498f80029'
    KlayCallResp:
      type: object
      properties:
        result:
          type: string
          example: '0x0000000000000000000000000000000000000000000000000000000000000000'
    EthTransactionArgs:
      type: object
      title: TransactionArgs
      required:
        - accessList
        - chainId
        - data
        - from
        - gas
        - gasPrice
        - input
        - maxFeePerGas
        - maxPriorityFeePerGas
        - nonce
        - to
        - value
      properties:
        accessList:
          type: array
          items:
            type: object
            properties:
              address:
                type: string
              storageKeys:
                type: array
                items:
                  type: string
                  description: Hex representation of a Keccak 256 hash
        chainId:
          type: string
        data:
          type: string
        from:
          type: string
        gas:
          type: string
        gasPrice:
          type: string
        input:
          type: string
        maxFeePerGas:
          type: string
        maxPriorityFeePerGas:
          type: string
        nonce:
          type: string
        to:
          type: string
        value:
          type: string
    EthCreateAccessListReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_createAccessList
        params:
          type: array
          items:
            properties:
              EthTransactionArgs:
                $ref: '#/components/schemas/EthTransactionArgs'
              BlockNumberOrHashOrTag:
                $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - from: '0x3bc5885c2941c5cda454bdb4a8c88aa7f248e312'
              data: '0x20965255'
              gasPrice: '0x3b9aca00'
              gas: '0x3d0900'
              to: '0x00f5f5f3a25f142fafd0af24a754fafa340f32c7'
    EthCreateAccessListResp:
      type: object
      properties:
        result:
          type: object
          required:
            - accessList
            - gasUsed
          properties:
            accessList:
              type: array
              items:
                type: object
                properties:
                  address:
                    type: string
                  storageKeys:
                    type: array
                    items:
                      type: string
                      description: Hex representation of a Keccak 256 hash
            error:
              type: string
            gasUsed:
              type: string
          example:
            accessList:
              - address: '0x00f5f5f3a25f142fafd0af24a754fafa340f32c7'
                storageKeys:
                  - '0x0000000000000000000000000000000000000000000000000000000000000000'
            gasUsed: '0x644e'
    EthEstimateGasReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_estimateGas
        params:
          type: array
          items:
            properties:
              EthCallObject:
                description: The transaction call object. See the next table for the object's properties.
                $ref: '#/components/schemas/EthCallObject'
          example:
            - from: '0x3f71029af4e252b25b9ab999f77182f0cd3bc085'
              to: '0x87ac99835e67168d4f9a40580f8f5c33550ba88b'
              gas: '0x100000'
              gasPrice: '0x5d21dba00'
              value: '0x0'
              input: '0x8ada066e'
    EthEstimateGasResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          description: The amount of gas used.
          example: '0x5208'
    TransactionArgsInEthSendTransaction:
      title: TransactionArgs
      type: object
      required:
        - from
      properties:
        from:
          type: string
          format: 20-byte DATA
          description: The address from which the transaction is sent.
        to:
          type: string
          format: 20-byte DATA
          description: (not required when creating a new contract) The address to which the transaction is directed.
        gas:
          type: string
          format: hex
          description: (optional) The integer of the gas provided for the transaction's execution. It will return unused gas.
        maxFeePerGas:
          type: string
          format: hex
          description: '(optional, default: 250 ston) The maximum amount to pay for the transaction''s execution. Since Klaytn uses a fixed gas price, it must be set to 250 ston (Gpeb in Ethereum).'
        maxPriorityFeePerGas:
          type: string
          format: hex
          description: '(optional, default: 250 ston) Gas tip cap for dynamic fee transaction in peb. Since Klaytn uses a fixed gas price, it must be set to 250 ston (Gpeb in Ethereum).'
        input:
          type: string
          format: DATA
          description: (optional) The hash of the method signature and the encoded parameter. It replaces data field, but 'data` field is still supported for backward compatibility.
        value:
          type: string
          format: hex
          description: (optional) The integer of values sent with this transaction.
        nonce:
          type: string
          format: hex
          description: (optional) The integer of a nonce.
    EthFillTransactionReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_fillTransaction
        params:
          type: array
          description: An object of transaction arguments. See the table below for the object's properties.
          items:
            $ref: '#/components/schemas/TransactionArgsInEthSendTransaction'
          example:
            - from: '0xca7a99380131e6c76cfa622396347107aeedca2d'
              to: '0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee'
              value: '0x1'
              gas: '0x9999'
              maxFeePerGas: '0x5d21dba00'
    Tx:
      title: Tx
      type: object
      required:
        - type
        - nonce
        - gasPrice
        - maxFeePerGas
        - maxPriorityFeePerGas
        - gas
        - value
        - v
        - r
        - s
        - chainId
        - accessList
        - hash
      properties:
        type:
          type: string
          format: hex
          description: An integer representing the type of the transaction.
        nonce:
          type: string
          format: hex
          description: The block number where this transaction was in.
        gasPrice:
          type: string
          format: hex
          nullable: true
          description: Gas price provided by the sender in peb. null when it is not a legacy transaction.
        maxFeePerGas:
          type: string
          format: hex
          nullable: true
          description: A maximum amount to pay for the transaction to execute. null when it is a legacy transaction.
        maxPriorityFeePerGas:
          type: string
          format: hex
          nullable: true
          description: Gas tip cap for dynamic fee transaction in peb. null when it is a legacy transaction.
        gas:
          type: string
          format: hex
          description: Gas provided by the sender.
        value:
          type: string
          format: hex
          description: Integer of values sent with this transaction.
        v:
          type: string
          format: hex
          description: ECDSA recovery id.
        r:
          type: string
          format: 32-byte DATA
          description: ECDSA signature r.
        s:
          type: string
          format: 32-byte DATA
          description: ECDSA signature s.
        chainId:
          type: string
          format: hex
          description: Chain id set on the requested node.
        accessList:
          type: array
          items:
            type: string
          description: An array of accessList.
        hash:
          type: string
          format: 32-byte DATA
          description: Hash of the transaction.
    EthFillTransactionResp:
      type: object
      properties:
        result:
          type: object
          required:
            - raw
            - tx
          properties:
            raw:
              type: string
              description: A rawTransaction string (a RLP-encoded transaction string).
            tx:
              $ref: '#/components/schemas/Tx'
          example:
            raw: '0x02ef8302edaf808505d21dba008505d21dba00829999948c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee0180c0808080'
            tx:
              type: '0x2'
              nonce: '0x0'
              gasPrice: null
              maxPriorityFeePerGas: '0x5d21dba00'
              maxFeePerGas: '0x5d21dba00'
              gas: '0x9999'
              value: '0x1'
              input: 0x
              v: '0x0'
              r: '0x0'
              s: '0x0'
              to: '0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee'
              chainId: '0x2edaf'
              accessList: []
              hash: '0x83e382bfb39249dc0e2b4283702bc1c0685deffad1316d166546da9c4c14c59d'
    EthGetRawTransactionByBlockHashAndIndexReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: eth_getRawTransactionByBlockHashAndIndex
        params:
          type: array
          items:
            properties:
              BlockHash:
                title: BlockHash
                description: Hash of a block.
                type: string
                format: 32-byte DATA
              TransactionIndex:
                title: TransactionIndexPosition
                description: Integer of the transaction index position.
                type: string
                format: hex
          example:
            - '0x29b6cd965c7d9a53a6f068da259dce1d3810ba79fff8eebac5d4da14754e67e6'
            - '0x20965255'
    EthGetRawTransactionByBlockHashAndIndexResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          description: Hex representation of some bytes
          title: dataWord
          example: 0x
    EthGetRawTransactionByBlockNumberAndIndexReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: eth_getRawTransactionByBlockNumberAndIndex
        params:
          type: array
          items:
            properties:
              BlockNumberOrTag:
                $ref: '#/components/schemas/BlockNumberOrTag'
              TransactionIndex:
                title: TransactionIndexPosition
                description: Integer of the transaction index position.
                type: string
                format: hex
          example:
            - 118593751
            - '0x0'
    EthGetRawTransactionByBlockNumberAndIndexResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          description: Hex representation of some bytes
          example: '0x0'
    EthGetRawTransactionByHashReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: eth_getRawTransactionByHash
        params:
          type: array
          description: Hex representation of a Keccak 256 hash
          items:
            title: Hash
            type: string
            format: hex
          example:
            - '0x5bbcde52084defa9d1c7068a811363cc27a25c80d7e495180964673aa5f47687'
    EthGetRawTransactionByHashResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          title: dataWord
          description: Hex representation of some bytes
          example: 0x
    EthGetTransactionByBlockHashAndIndexReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_getTransactionByBlockHashAndIndex
        params:
          type: array
          items:
            properties:
              BlockHash:
                title: BlockHash
                description: Hash of a block.
                type: string
                format: 32-byte DATA
              TransactionIndex:
                title: TransactionIndexPosition
                description: Integer of the transaction index position.
                type: string
                format: hex
          example:
            - '0x451cafae98d61b7458b5cef54402830941432278184453e3ca490eb687317e68'
            - '0x0'
    LegacyTransaction:
      title: LegacyTransaction
      type: object
      required:
        - blockHash
        - blockNumber
        - from
        - gas
        - gasPrice
        - hash
        - input
        - nonce
        - to
        - value
        - transactionIndex
        - type
        - v
        - r
        - s
      properties:
        blockHash:
          type: string
          format: 32-byte DATA
          description: Hash of the block where this transaction was in. null when it is pending.
        blockNumber:
          type: string
          format: hex
          description: Block number where this transaction was in. null when it is pending.
        from:
          type: string
          format: 20-byte DATA
          description: Address of the sender.
        gas:
          type: string
          format: hex
          description: Gas provided by the sender.
        gasPrice:
          type: string
          format: hex
          description: Gas price provided by the sender in peb.
        hash:
          type: string
          format: 32-byte DATA
          description: Hash of the transaction.
        input:
          type: string
          format: DATA
          description: The data sent along with the transaction.
        nonce:
          type: string
          format: hex
          description: The number of transactions made by the sender prior to this one.
        to:
          type: string
          format: 20-byte DATA
          description: Address of the receiver. null when it is a contract creation transaction.
        value:
          type: string
          format: hex
          description: Integer of values sent with this transaction.
        transactionIndex:
          type: string
          format: hex
          description: Integer of the transaction index position in the block. null when it is pending.
        type:
          type: string
          format: hex
          description: An integer representing the type of the transaction.
        v:
          type: string
          format: hex
          description: ECDSA recovery id.
        r:
          type: string
          format: 32-byte DATA
          description: ECDSA signature r.
        s:
          type: string
          format: 32-byte DATA
          description: ECDSA signature s.
    AccessListTransaction:
      title: AccessListTransaction
      type: object
      required:
        - blockHash
        - blockNumber
        - from
        - gas
        - gasPrice
        - hash
        - input
        - nonce
        - to
        - value
        - transactionIndex
        - type
        - accessList
        - chainId
        - v
        - r
        - s
      properties:
        blockHash:
          type: string
          format: 32-byte DATA
          description: Hash of the block where this transaction was in. null when it is pending.
        blockNumber:
          type: string
          format: hex
          description: Block number where this transaction was in. null when it is pending.
        from:
          type: string
          format: 20-byte DATA
          description: Address of the sender.
        gas:
          type: string
          format: hex
          description: Gas provided by the sender.
        gasPrice:
          type: string
          format: hex
          description: Gas price provided by the sender in peb.
        hash:
          type: string
          format: 32-byte DATA
          description: Hash of the transaction.
        input:
          type: string
          format: DATA
          description: The data sent along with the transaction.
        nonce:
          type: string
          format: hex
          description: The number of transactions made by the sender prior to this one.
        to:
          type: string
          format: 20-byte DATA
          description: Address of the receiver. null when it is a contract creation transaction.
        value:
          type: string
          format: hex
          description: Integer of values sent with this transaction.
        transactionIndex:
          type: string
          format: hex
          description: Integer of the transaction index position in the block. null when it is pending.
        type:
          type: string
          format: hex
          description: An integer representing the type of the transaction.
        accessList:
          type: array
          description: An array of accessList.
          items:
            type: object
            properties:
              address:
                type: string
                format: 20-byte DATA
                description: Address of the contract.
              storageKeys:
                type: array
                description: An array of storage keys.
                items:
                  type: string
                  format: 32-byte DATA
        chainId:
          type: string
          format: hex
          description: Chain id set on the requested node.
        v:
          type: string
          format: hex
          description: ECDSA recovery id.
        r:
          type: string
          format: 32-byte DATA
          description: ECDSA signature r.
        s:
          type: string
          format: 32-byte DATA
          description: ECDSA signature s.
    DynamicFeeTransaction:
      title: DynamicFeeTransaction
      type: object
      required:
        - blockHash
        - blockNumber
        - from
        - gas
        - gasPrice
        - maxFeePerGas
        - maxPriorityFeePerGas
        - hash
        - input
        - nonce
        - to
        - value
        - transactionIndex
        - type
        - accessList
        - chainId
        - v
        - r
        - s
      properties:
        blockHash:
          type: string
          format: 32-byte DATA
          description: Hash of the block where this transaction was in. null when it is pending.
        blockNumber:
          type: string
          format: hex
          description: Block number where this transaction was in. null when it is pending.
        from:
          type: string
          format: 20-byte DATA
          description: Address of the sender.
        gas:
          type: string
          format: hex
          description: Gas provided by the sender.
        gasPrice:
          type: string
          format: hex
          description: Gas price provided by the sender in peb.
        maxFeePerGas:
          type: string
          format: hex
          description: A maximum amount to pay for the transaction to execute.
        maxPriorityFeePerGas:
          type: string
          format: hex
          description: Gas tip cap for dynamic fee transaction in peb.
        hash:
          type: string
          format: 32-byte DATA
          description: Hash of the transaction.
        input:
          type: string
          format: DATA
          description: The data sent along with the transaction.
        nonce:
          type: string
          format: hex
          description: The number of transactions made by the sender prior to this one.
        to:
          type: string
          format: 20-byte DATA
          description: Address of the receiver. null when it is a contract creation transaction.
        value:
          type: string
          format: hex
          description: Integer of values sent with this transaction.
        transactionIndex:
          type: string
          format: hex
          description: Integer of the transaction index position in the block. null when it is pending.
        type:
          type: string
          format: hex
          description: An integer representing the type of the transaction.
        accessList:
          type: array
          description: An array of accessList.
          items:
            type: object
            properties:
              address:
                type: string
                format: 20-byte DATA
                description: Address of the contract.
              storageKeys:
                type: array
                description: An array of storage keys.
                items:
                  type: string
                  format: 32-byte DATA
        chainId:
          type: string
          format: hex
          description: Chain id set on the requested node.
        v:
          type: string
          format: hex
          description: ECDSA recovery id.
        r:
          type: string
          format: 32-byte DATA
          description: ECDSA signature r.
        s:
          type: string
          format: 32-byte DATA
          description: ECDSA signature s.
    EthGetTransactionByBlockHashAndIndexResp:
      type: object
      properties:
        result:
          oneOf:
            - $ref: '#/components/schemas/LegacyTransaction'
            - $ref: '#/components/schemas/AccessListTransaction'
            - $ref: '#/components/schemas/DynamicFeeTransaction'
          example:
            blockHash: '0xd49c770e1c6fdf340e25aca6d2de0ddf3d10873582b62b7ad604ff5b291bdbe5'
            blockNumber: '0xd017a7'
            from: '0x46705dfff24256421a05d056c29e81bdc09723b8'
            gas: '0x19a28'
            gasPrice: '0x5d21dba00'
            hash: '0x73af85890dd29691ff807b8d9e10c5a4d3349d28b6b143fa5e46db2c61b376e9'
            input: '0xa9059cbb000000000000000000000000cad1d9c2ad1860d4d4fb53782720279c60ae4de8000000000000000000000000000000000000000000000000000000000cd0a3c0'
            nonce: '0x1bea18'
            r: '0x85d848276f22f8ce5aa17cd27ded21269e17cacc258ef2aaece296497803aa9'
            s: '0x2d9ae07f349c66628b02db7033a8a35d18f6338c39f995d7e8336d635002df54'
            to: '0xdac17f958d2ee523a2206206994597c13d831ec7'
            transactionIndex: '0x3'
            type: '0x0'
            v: '0x25'
            value: '0x0'
    EthGetTransactionByBlockNumberAndIndexReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_getTransactionByBlockNumberAndIndex
        params:
          type: array
          items:
            properties:
              BlockNumberOrTag:
                $ref: '#/components/schemas/BlockNumberOrTag'
              TransactionIndex:
                title: TransactionIndexPosition
                description: Integer of the transaction index position.
                type: string
                format: hex
          example:
            - '0x27'
            - '0x0'
    EthGetTransactionByBlockNumberAndIndexResp:
      type: object
      properties:
        result:
          oneOf:
            - $ref: '#/components/schemas/LegacyTransaction'
            - $ref: '#/components/schemas/AccessListTransaction'
            - $ref: '#/components/schemas/DynamicFeeTransaction'
          example:
            blockHash: '0xd49c770e1c6fdf340e25aca6d2de0ddf3d10873582b62b7ad604ff5b291bdbe5'
            blockNumber: '0xd017a7'
            from: '0x46705dfff24256421a05d056c29e81bdc09723b8'
            gas: '0x19a28'
            gasPrice: '0x5d21dba00'
            hash: '0x73af85890dd29691ff807b8d9e10c5a4d3349d28b6b143fa5e46db2c61b376e9'
            input: '0xa9059cbb000000000000000000000000cad1d9c2ad1860d4d4fb53782720279c60ae4de8000000000000000000000000000000000000000000000000000000000cd0a3c0'
            nonce: '0x1bea18'
            r: '0x85d848276f22f8ce5aa17cd27ded21269e17cacc258ef2aaece296497803aa9'
            s: '0x2d9ae07f349c66628b02db7033a8a35d18f6338c39f995d7e8336d635002df54'
            to: '0xdac17f958d2ee523a2206206994597c13d831ec7'
            transactionIndex: '0x3'
            type: '0x0'
            v: '0x25'
            value: '0x0'
    EthGetTransactionByHashReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_getTransactionByHash
        params:
          type: array
          items:
            type: string
            format: hex
          description: Hash of a transaction.
          example:
            - '0x27'
    EthGetTransactionByHashResp:
      type: object
      properties:
        result:
          oneOf:
            - $ref: '#/components/schemas/LegacyTransaction'
            - $ref: '#/components/schemas/AccessListTransaction'
            - $ref: '#/components/schemas/DynamicFeeTransaction'
          example:
            blockHash: '0xd49c770e1c6fdf340e25aca6d2de0ddf3d10873582b62b7ad604ff5b291bdbe5'
            blockNumber: '0xd017a7'
            from: '0x46705dfff24256421a05d056c29e81bdc09723b8'
            gas: '0x19a28'
            gasPrice: '0x5d21dba00'
            hash: '0x73af85890dd29691ff807b8d9e10c5a4d3349d28b6b143fa5e46db2c61b376e9'
            input: '0xa9059cbb000000000000000000000000cad1d9c2ad1860d4d4fb53782720279c60ae4de8000000000000000000000000000000000000000000000000000000000cd0a3c0'
            nonce: '0x1bea18'
            r: '0x85d848276f22f8ce5aa17cd27ded21269e17cacc258ef2aaece296497803aa9'
            s: '0x2d9ae07f349c66628b02db7033a8a35d18f6338c39f995d7e8336d635002df54'
            to: '0xdac17f958d2ee523a2206206994597c13d831ec7'
            transactionIndex: '0x3'
            type: '0x0'
            v: '0x25'
            value: '0x0'
    schemas-EthGetTransactionByHashReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_getTransactionReceipt
        params:
          type: array
          items:
            type: string
            format: hex
          description: Hash of a transaction.
          example:
            - '0x27'
    TransactionReceiptObject:
      title: TransactionReceiptObject
      type: object
      required:
        - blockHash
        - blockNumber
        - contractAddress
        - cumulativeGasUsed
        - effectiveGasPrice
        - from
        - logs
        - logsBloom
        - status
        - to
        - transactionHash
        - transactionIndex
        - type
      properties:
        blockHash:
          type: string
          format: 32-byte DATA
          description: Hash of the block where this transaction was in.
        blockNumber:
          type: string
          format: hex
          description: The block number where this transaction was in.
        contractAddress:
          type: string
          format: DATA
          description: The contract address created, if the transaction was a contract creation, otherwise null.
        cumulativeGasUsed:
          type: string
          format: hex
          description: The total amount of gas used when this transaction was executed in the block.
        effectiveGasPrice:
          type: string
          format: hex
          description: The actual value per gas deducted from the senders account. Before EIP-1559, this is equal to the transaction's gas price. After, it is equal to baseFeePerGas + min(maxFeePerGas - baseFeePerGas, maxPriorityFeePerGas).
        from:
          type: string
          format: 20-byte DATA
          description: Address of the sender.
        logs:
          type: array
          items:
            type: object
          description: Array of log objects, which this transaction generated.
        logsBloom:
          type: string
          format: 256-byte DATA
          description: Bloom filter for light clients to quickly retrieve related logs.
        status:
          type: string
          format: hex
          description: Either 1 (success) or 0 (failure).
        to:
          type: string
          format: 20-byte DATA
          description: Address of the receiver. null when it is a contract creation transaction.
        transactionHash:
          type: string
          format: 32-byte DATA
          description: Hash of the transaction.
        transactionIndex:
          type: string
          format: hex
          description: Integer of the transaction index position in the block.
        type:
          type: string
          format: hex
          description: An integer representing the type of the transaction.
      example:
        blockHash: '0xd49c770e1c6fdf340e25aca6d2de0ddf3d10873582b62b7ad604ff5b291bdbe5'
        blockNumber: '0xd017a7'
        contractAddress: null
        cumulativeGasUsed: '0x8dc5d'
        effectiveGasPrice: '0x315c2f4800'
        from: '0x46705dfff24256421a05d056c29e81bdc09723b8'
        gasUsed: '0xf6e9'
        logs:
          - address: '0xdac17f958d2ee523a2206206994597c13d831ec7'
            blockHash: '0xd49c770e1c6fdf340e25aca6d2de0ddf3d10873582b62b7ad604ff5b291bdbe5'
            blockNumber: '0xd017a7'
            data: '0x000000000000000000000000000000000000000000000000000000000cd0a3c0'
            logIndex: '0x13'
            removed: false
            topics:
              - '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'
              - '0x00000000000000000000000046705dfff24256421a05d056c29e81bdc09723b8'
              - '0x000000000000000000000000cad1d9c2ad1860d4d4fb53782720279c60ae4de8'
            transactionHash: '0x73af85890dd29691ff807b8d9e10c5a4d3349d28b6b143fa5e46db2c61b376e9'
            transactionIndex: '0x3'
        logsBloom: '0x
        status: '0x1'
        to: '0xdac17f958d2ee523a2206206994597c13d831ec7'
        transactionHash: '0x73af85890dd29691ff807b8d9e10c5a4d3349d28b6b143fa5e46db2c61b376e9'
        transactionIndex: '0x3'
        type: '0x0'
    schemas-EthGetTransactionByHashResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/TransactionReceiptObject'
    ethPendingTransactionsReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_pendingTransactions
    ethPendingTransactionsResp:
      type: object
      properties:
        result:
          type: array
          description: An array of transactions.
          items:
            type: object
            required:
              - type
              - nonce
              - gasPrice
              - maxFeePerGas
              - maxPriorityFeePerGas
              - gas
              - value
              - v
              - r
              - s
              - chainId
              - accessList
              - hash
            properties:
              type:
                type: string
                format: hex
                description: An integer representing the type of the transaction.
              nonce:
                type: string
                format: hex
                description: The block number where this transaction was in.
              gasPrice:
                type: string
                format: hex
                nullable: true
                description: Gas price provided by the sender in peb. null when it is not a legacy transaction.
              maxFeePerGas:
                type: string
                format: hex
                nullable: true
                description: A maximum amount to pay for the transaction to execute. null when it is a legacy transaction.
              maxPriorityFeePerGas:
                type: string
                format: hex
                nullable: true
                description: Gas tip cap for dynamic fee transaction in peb. null when it is a legacy transaction.
              gas:
                type: string
                format: hex
                description: Gas provided by the sender.
              value:
                type: string
                format: hex
                description: Integer of values sent with this transaction.
              v:
                type: string
                format: hex
                description: ECDSA recovery id.
              r:
                type: string
                format: 32-byte DATA
                description: ECDSA recovery r.
              s:
                type: string
                format: 32-byte DATA
                description: ECDSA recovery s.
              chainId:
                type: string
                format: hex
                description: Chain id set on the requested node.
              accessList:
                type: array
                items:
                  type: object
                  required:
                    - address
                    - storageKeys
                  properties:
                    address:
                      type: string
                    storageKeys:
                      type: array
                      items:
                        type: string
              hash:
                type: string
                format: 32-byte DATA
                description: Hash of the transaction.
            example:
              type: '0x2'
              nonce: '0x4'
              gasPrice: null
              maxPriorityFeePerGas: '0x5d21dba00'
              maxFeePerGas: '0x5d21dba00'
              gas: '0x9999'
              value: '0x1'
              input: 0x
              v: '0x1'
              r: '0xb6e16781d247b505aa8eaf363a6ea61e7c23c77ad64846ffda28e73e31304884'
              s: '0x5a296904cd009506cb5ed006af016d2c5dab255966af9ba6f8fc352f75e9b079'
              to: '0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee'
              chainId: '0x2edaf'
              accessList: []
              hash: '0x9cfbea4942b334050660ec7207f3323ee13e3196b06279f922404384acbf7b47'
    SendArgs:
      type: object
      required:
        - nonce
        - to
      properties:
        accessList:
          type: array
          items:
            type: object
            required:
              - address
              - storageKeys
            properties:
              address:
                type: string
                format: hex
              storageKeys:
                type: array
                items:
                  type: string
                  format: hex
        chainId:
          type: string
          format: hex
        data:
          type: string
          format: hex
        from:
          type: string
          format: hex
        gas:
          type: string
          format: hex
        gasPrice:
          type: string
          format: hex
        input:
          type: string
          format: hex
        maxFeePerGas:
          type: string
          format: hex
        maxPriorityFeePerGas:
          type: string
          format: hex
        nonce:
          type: string
          format: hex
        to:
          type: string
          format: hex
        value:
          type: string
          format: hex
    EthResendReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: eth_resend
        params:
          type: array
          items:
            properties:
              SendArgs:
                $ref: '#/components/schemas/SendArgs'
              GasPrice:
                title: GasPrice
                description: Hex representation of the integer
                type: string
                format: hex
              GasLimit:
                title: GasLimit
                description: Hex representation of a uint64
                type: string
                format: hex
          example:
            - from: '0xca7a99380131e6c76cfa622396347107aeedca2d'
              to: '0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee'
              value: '0x1'
              gas: '0x9999'
              maxFeePerGas: '0x5d21dba00'
              maxPriorityPerGas: '0x5d21dba00'
            - '0x5d21dba99'
            - '0x5d21dba99'
    KlaySendTransactionReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_sendTransaction
        params:
          type: array
          items:
            $ref: '#/components/schemas/TransactionArgsInEthSendTransaction'
          example:
            - from: '0xca7a99380131e6c76cfa622396347107aeedca2d'
              to: '0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee'
              value: '0x1'
              gas: '0x9999'
              maxFeePerGas: '0x5d21dba00'
              maxPriorityFeePerGas: '0x5d21dba00'
    KlaySendTransactionResp:
      type: object
      properties:
        result:
          type: string
          format: 32-byte DATA
          description: The transaction hash or the zero hash if the transaction is not yet available.
          example: '0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331'
    EthSignTransactionReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_signTransaction
        params:
          type: array
          items:
            title: transactionArgs
            type: object
            required:
              - from
              - gas
              - maxFeePerGas
              - maxPriorityFeePerGas
              - nonce
            properties:
              from:
                type: string
                format: 20-byte DATA
                description: The address from which the transaction is sent.
              to:
                type: string
                format: 20-byte DATA
                description: (not required when creating a new contract) The address to which the transaction is directed.
              gas:
                type: string
                format: hex
                description: The integer of the gas provided for the transaction's execution. It will return unused gas.
              maxFeePerGas:
                type: string
                format: hex
                description: The maximum amount to pay for the transaction's execution. Since Klaytn uses a fixed gas price, it must be set to 250 ston (Gpeb in Ethereum).
              maxPriorityFeePerGas:
                type: string
                format: hex
                description: Gas tip cap for dynamic fee transaction in peb. Since Klaytn uses a fixed gas price, it must be set to 250 ston (Gpeb in Ethereum).
              input:
                type: string
                format: DATA
                description: (optional) The hash of the method signature and the encoded parameter. It replaces data field, but 'data` field is still supported for backward compatibility.
              value:
                type: string
                format: hex
                description: (optional) The integer of values sent with this transaction.
              nonce:
                type: string
                format: hex
                description: The integer of a nonce.
          example:
            - from: '0xca7a99380131e6c76cfa622396347107aeedca2d'
              to: '0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee'
              value: '0x1'
              gas: '0x9999'
              maxFeePerGas: '0x5d21dba00'
              maxPriorityFeePerGas: '0x5d21dba00'
              nonce: '0x1'
    EthSignTransactionResp:
      type: object
      properties:
        result:
          type: object
          required:
            - raw
            - tx
          properties:
            raw:
              type: string
              format: DATA
              description: A rawTransaction string (a RLP-encoded transaction string).
            tx:
              type: object
              required:
                - type
                - nonce
                - gasPrice
                - maxFeePerGas
                - maxPriorityFeePerGas
                - gas
                - value
                - v
                - r
                - s
                - chainId
                - accessList
                - hash
              properties:
                type:
                  type: string
                  format: hex
                  description: An integer representing the type of the transaction.
                nonce:
                  type: string
                  format: hex
                  description: The block number where this transaction was in.
                gasPrice:
                  type: string
                  format: hex
                  nullable: true
                  description: Gas price provided by the sender in peb. null when it is not a legacy transaction.
                maxFeePerGas:
                  type: string
                  format: hex
                  nullable: true
                  description: A maximum amount to pay for the transaction to execute. null when it is a legacy transaction.
                maxPriorityFeePerGas:
                  type: string
                  format: hex
                  nullable: true
                  description: Gas tip cap for dynamic fee transaction in peb. null when it is a legacy transaction.
                gas:
                  type: string
                  format: hex
                  description: Gas provided by the sender.
                value:
                  type: string
                  format: hex
                  description: Integer of values sent with this transaction.
                v:
                  type: string
                  format: hex
                  description: ECDSA recovery id.
                r:
                  type: string
                  format: 32-byte DATA
                  description: ECDSA recovery r.
                s:
                  type: string
                  format: 32-byte DATA
                  description: ECDSA recovery s.
                chainId:
                  type: string
                  format: hex
                  description: Chain id set on the requested node.
                accessList:
                  type: array
                  items:
                    type: object
                    required:
                      - address
                      - storageKeys
                    properties:
                      address:
                        type: string
                      storageKeys:
                        type: array
                        items:
                          type: string
                hash:
                  type: string
                  format: 32-byte DATA
                  description: Hash of the transaction.
          example:
            raw: '0x02f86f8302edaf048505d21dba008505d21dba00829999948c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee0180c001a0b6e16781d247b505aa8eaf363a6ea61e7c23c77ad64846ffda28e73e31304884a05a296904cd009506cb5ed006af016d2c5dab255966af9ba6f8fc352f75e9b079'
            tx:
              type: '0x2'
              nonce: '0x4'
              gasPrice: null
              maxPriorityFeePerGas: '0x5d21dba00'
              maxFeePerGas: '0x5d21dba00'
              gas: '0x9999'
              value: '0x1'
              input: 0x
              v: '0x1'
              r: '0xb6e16781d247b505aa8eaf363a6ea61e7c23c77ad64846ffda28e73e31304884'
              s: '0x5a296904cd009506cb5ed006af016d2c5dab255966af9ba6f8fc352f75e9b079'
              to: '0x8c9f4468ae04fb3d79c80f6eacf0e4e1dd21deee'
              chainId: '0x2edaf'
              accessList: []
              hash: '0x9cfbea4942b334050660ec7207f3323ee13e3196b06279f922404384acbf7b47'
    EthChainIdResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          description: Chain id set on the requested node.
          example: '0x2019'
    CoinbaseReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_coinbase
    CoinbaseResp:
      type: object
      properties:
        result:
          type: string
          format: 20-byte DATA
          description: The current coinbase address.
          example: '0xc94770007dda54cF92009BFF0dE90c06F603a09f'
    EthEtherbaseReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_etherbase
    EthEtherbaseResp:
      type: object
      properties:
        result:
          type: string
          format: 20-byte DATA
          description: The current etherbase address.
          example: '0xc94770007dda54cF92009BFF0dE90c06F603a09f'
    EthGasPriceResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          description: Integer of the current gas price in peb.
          example: '0xAE9F7BCC00'
    RewardPercentiles:
      title: RewardPercentiles
      type: array
      items:
        type: number
        format: float
      description: An array of floating point values between 0 and 100.
    EthFeeHistoryReq:
      type: object
      properties:
        method:
          type: string
          default: eth_feeHistory
        params:
          type: array
          items:
            properties:
              BlockCount:
                title: BlockCount
                type: string
                format: Hexadecimal
                description: Number of blocks in the requested range expressed as a hexidecimal number. Between 1 (0x1) and 1024 (0x400) blocks can be requested in a single query. Less than requested may be returned if not all blocks are available.
              BlockNumberOrTag:
                $ref: '#/components/schemas/BlockNumberOrTag'
              RewardPercentiles:
                $ref: '#/components/schemas/RewardPercentiles'
          example:
            - '0x10'
            - latest
            - - 0.1
              - 0.2
              - 0.3
    BaseFeePerGas:
      title: BaseFeePerGas
      type: array
      items:
        type: string
        format: Hexadecimal
      description: An array of block base fees per gas. This includes the next block after the newest of the returned range, because this value can be derived from the newest block.
    Reward:
      title: Reward
      type: array
      description: An array of effective priority fee per gas data points from a single block. All zeroes are returned if the block is empty.
      items:
        type: array
        items:
          type: string
          format: hex
    EthFeeHistoryResp:
      type: object
      properties:
        result:
          type: object
          required:
            - oldestBlock
            - baseFeePerGas
            - gasUsedRatio
            - reward
          properties:
            oldestBlock:
              type: string
              format: hex
              description: Lowest number block of the returned range expressed as a hexidecimal number.
            baseFeePerGas:
              $ref: '#/components/schemas/BaseFeePerGas'
            gasUsedRatio:
              type: array
              description: An array of block gas used ratios. These are calculated as the ratio of gasUsed and gasLimit
              items:
                type: number
                format: float
            reward:
              $ref: '#/components/schemas/Reward'
          example:
            oldestBlock: '0xa5b'
            reward:
              - - '0x0'
                - '0x0'
                - '0x0'
              - - '0x0'
                - '0x0'
                - '0x0'
              - - '0x0'
                - '0x0'
                - '0x0'
              - - '0x0'
                - '0x0'
                - '0x0'
              - - '0x0'
                - '0x0'
                - '0x0'
              - - '0x5d21dba00'
                - '0x5d21dba00'
                - '0x5d21dba00'
              - - '0x0'
                - '0x0'
                - '0x0'
              - - '0x0'
                - '0x0'
                - '0x0'
              - - '0x5d21dba00'
                - '0x5d21dba00'
                - '0x5d21dba00'
              - - '0x0'
                - '0x0'
                - '0x0'
            baseFeePerGas:
              - '0x0'
              - '0x0'
              - '0x0'
              - '0x0'
              - '0x0'
              - '0x0'
              - '0x0'
              - '0x0'
              - '0x0'
              - '0x0'
              - '0x0'
              - '0x0'
              - '0x0'
              - '0x0'
              - '0x0'
              - '0x0'
            gasUsedRatio:
              - 0
              - 0
              - 0
              - 0
              - 0
              - 0.0002952004000002952
              - 0
              - 0
              - 0.00029504250000029504
              - 0
              - 0
              - 0.0002963777000002964
              - 0
              - 0
              - 0
              - 0
    EthMaxPriorityFeePerGasReq:
      type: object
      properties:
        method:
          type: string
          default: eth_maxPriorityFeePerGas
    EthMaxPriorityFeePerGasResp:
      type: object
      properties:
        result:
          type: string
          description: Integer of the current gas price in peb.
          format: hex
          example: '0xAE9F7BCC00'
    LogObject:
      title: LogObject
      type: object
      required:
        - removed
        - logIndex
        - transactionIndex
        - transactionHash
        - blockHash
        - blockNumber
        - address
        - data
        - topics
      description: For filters created with klay_newFilter logs are objects with following properties
      properties:
        removed:
          type: boolean
          description: true when the log was removed, due to a chain reorganization. false if its a valid log.
        logIndex:
          type: string
          format: hex
          description: Integer of the log index position in the block. null when it is a pending log.
        transactionIndex:
          type: string
          format: hex
          description: Integer of the transactions index position log was created from. null when pending.
        transactionHash:
          type: string
          format: 32-byte DATA
          description: Hash of the transactions this log was created from. null when pending.
        blockHash:
          type: string
          format: 32-byte DATA
          description: Hash of the block where this log was in. null when pending.
        blockNumber:
          type: string
          format: hex
          description: The block number where this log was in. null when pending.
        address:
          type: string
          format: 20-byte DATA
          description: Address from which this log originated.
        data:
          type: string
          format: DATA
          description: Contains the non-indexed arguments of the log.
        topics:
          type: array
          items:
            type: string
            format: 32-byte DATA
          description: Array of 0 to 4 32-byte DATA of indexed log arguments. (In Solidity The first topic is the hash of the signature of the event (e.g., Deposit(address,bytes32,uint256)), except you declared the event with the anonymous specifier.).
    EthArrayOfLog:
      title: EthArrayOfLog
      type: array
      items:
        anyOf:
          - type: string
            format: 32-byte DATA
            title: BlockHash
            description: For filters created with eth_newBlockFilter, the return are block hashes (32-byte DATA), e.g., ["0x3454645634534..."].
          - type: string
            title: TransactionHash
            format: 32-byte DATA
            description: For filters created with eth_newPendingTransactionFilter, the return are transaction hashes (32-byte DATA), e.g., ["0x6345343454645..."].
          - $ref: '#/components/schemas/LogObject'
      description: Array of log objects, or an empty array if nothing has changed since last poll.
      example:
        - address: '0x87ac99835e67168d4f9a40580f8f5c33550ba88b'
          topics:
            - '0xd596fdad182d29130ce218f4c1590c4b5ede105bee36690727baa6592bd2bfc8'
          data: '0x0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000007b'
          blockNumber: '0x54'
          transactionHash: '0xcd4703cd62bd930d4652999bce8dcb75b7ade49d922fa42dc11e568c52a5fa6f'
          transactionIndex: '0x0'
          blockHash: '0x9a49f30f1d1876ff3913bd0aa58f328822e7a369cb13e0640b82234f26e781bb'
          logIndex: '0x0'
          removed: false
    EthGetFilterChangesResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/EthArrayOfLog'
    KlayGetFilterLogsReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_getFilterLogs
        params:
          type: array
          items:
            title: id
            type: string
            format: hex
          description: The filter id
          example:
            - '0xd32fd16b6906e67f6e2b65dcf48fc272'
    KlayGetFilterLogsResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/EthArrayOfLog'
    FilterOptions:
      title: FilterOptions
      type: object
      properties:
        fromBlock:
          allOf:
            - title: fromBlock
              default: latest
              description: (optional, default "latest") Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter.
            - $ref: '#/components/schemas/BlockNumberOrTag'
        toBlock:
          allOf:
            - title: toBlock
              default: latest
              description: (optional, default "latest") Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter.
            - $ref: '#/components/schemas/BlockNumberOrTag'
        address:
          oneOf:
            - type: string
              format: 20-byte DATA
              title: Address
              description: Contract address
            - type: array
              title: ArrayOfAddress
              items:
                type: string
                format: 20-byte DATA
                description: Address
          description: (optional) Contract address or a list of addresses from which logs should originate.
        topics:
          type: array
          items:
            type: string
            format: 32-byte DATA
          description: (optional) Array of 32-byte DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with “or” options.
        blockHash:
          type: string
          format: 32-byte DATA
          description: (optional) A filter option that restricts the logs returned to the single block with the 32-byte hash blockHash. Using blockHash is equivalent to fromBlock = toBlock = the block number with hash blockHash. If blockHash is present in in the filter criteria, then neither fromBlock nor toBlock are allowed
    EthGetLogsResp:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/EthArrayOfLog'
    Address:
      title: Address
      type: string
      format: 20-byte DATA
      description: Address
    Topics:
      type: array
      description: (optional) Array of 32-byte DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with "or" options.
      items:
        type: string
        format: 32-byte DATA
    schemas-FilterOptions:
      title: FilterOptions
      type: object
      properties:
        fromBlock:
          allOf:
            - $ref: '#/components/schemas/BlockNumberOrTag'
            - title: BlockNumberOrTag
              description: |
                (optional, default: "latest") Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter.
        toBlock:
          allOf:
            - $ref: '#/components/schemas/BlockNumberOrTag'
            - title: BlockNumberOrTag
              description: |
                (optional, default: "latest") Integer or hexadecimal block number, or the string "earliest", "latest" or "pending" as in the default block parameter.
        address:
          oneOf:
            - type: array
              items:
                anyOf:
                  - $ref: '#/components/schemas/Address'
            - $ref: '#/components/schemas/Address'
          description: (optional) Contract address or a list of addresses from which logs should originate.
        topics:
          $ref: '#/components/schemas/Topics'
    EthNewFilterReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: eth_newFilter
        params:
          type: array
          items:
            $ref: '#/components/schemas/schemas-FilterOptions'
          example:
            - fromBlock: earliest
              toBlock: latest
              address: '0x87ac99835e67168d4f9a40580f8f5c33550ba88b'
              topics:
                - '0xd596fdad182d29130ce218f4c1590c4b5ede105bee36690727baa6592bd2bfc8'
    EthNewFilterResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          description: A filter id
          example: '0xd32fd16b6906e67f6e2b65dcf48fc272'
    KlayUninstallFilterReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_uninstallFilter
        params:
          type: array
          description: A filter id
          items:
            title: Filter
            type: string
            format: hex
          example:
            - '0xb'
    KlayUninstallFilterResp:
      type: object
      properties:
        result:
          type: boolean
          description: true if the filter was successfully uninstalled, otherwise false.
          example: true
    EthGetProofResp:
      type: object
      properties:
        result:
          type: object
          required:
            - balance
            - codeHash
            - nonce
            - storageHash
            - accountProof
            - storageProof
          description: Object - A account object
          properties:
            balance:
              type: string
              format: hex
              description: the balance of the account. See eth_getBalance
            codeHash:
              type: string
              format: 32-byte DATA
              description: hash of the code of the account. For a simple Account without code it will return
            nonce:
              type: string
              format: hex
              description: nonce of the account. See eth_getTransactionCount
            storageHash:
              type: string
              format: DATA
              description: SHA3 of the StorageRoot. All storage will deliver a MerkleProof starting with this rootHash.
            accountProof:
              type: array
              items:
                type: string
              description: Array of rlp-serialized MerkleTree-Nodes, starting with the stateRoot-Node, following the path of the SHA3 (address) as key.
            storageProof:
              type: array
              items:
                type: object
                required:
                  - key
                  - value
                  - proof
                properties:
                  key:
                    type: string
                    format: hex
                    description: the requested storage key
                  value:
                    type: string
                    format: hex
                    description: the storage value
                  proof:
                    type: array
                    items:
                      type: string
                    description: Array of rlp-serialized MerkleTree-Nodes, starting with the storageHash-Node, following the path of the SHA3 (key) as path.
              description: Array of storage-entries as requested. Each entry is an object with these properties
    EthGetHashrateReq:
      type: object
      properties:
        method:
          type: string
          default: eth_getHashrate
    EthGetHashrateResp:
      type: object
      properties:
        result:
          type: string
          format: hex
          example: '0x0'
    EthGetWorkReq:
      type: object
      properties:
        method:
          type: string
          default: eth_getWork
    EthGetWorkResp:
      type: object
      properties:
        result:
          type: array
          items:
            type: string
            format: 32-byte DATA
          example: []
    EthHashRateReq:
      type: object
      properties:
        method:
          type: string
          default: eth_hashrate
    EthHashRateResp:
      type: object
      properties:
        result:
          type: string
          description: The number of hashes per second.
          format: hex
          example: '0x0'
    EthSubmitHashrateReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_submitHashrate
        params:
          type: array
          items:
            properties:
              Hashrate:
                title: Hashrate
                description: A hexadecimal string representation (32 bytes) of the hash rate.
                type: string
                format: 32-byte DATA
              ID:
                title: Id
                description: A random hexadecimal(32 bytes) ID identifying the client.
                type: string
                format: 32-byte DATA
          example:
            - '0x5'
            - '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef'
    EthSubmitHashrateResp:
      type: object
      properties:
        result:
          type: boolean
          description: Returns true if submitting went through succesfully and false otherwise.
          example: false
    KlaySubmitWorkReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: eth_submitWork
        params:
          type: array
          items:
            properties:
              Nonce:
                title: Nonce
                description: The nonce found (64 bits)
                type: string
                format: 8-byte DATA
              PowHash:
                title: PowHash
                description: The header’s pow-hash (256 bits)
                type: string
                format: 32-byte DATA
              MixDigest:
                title: MixDigest
                description: The mix digest (256 bits)
                type: string
                format: 32-byte DATA
          example:
            - '0x0000000000000001'
            - '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef'
            - '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef'
    KlaySubmitWorkResp:
      type: object
      properties:
        result:
          type: boolean
          description: Returns true if the provided solution is valid, otherwise false.
          example: false
