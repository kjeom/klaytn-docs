openapi: 3.0.2
info:
  title: web3rpc
  version: 0.9.0
  contact:
    name: API support
    url: https://forum.klaytn.foundation/
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
x-tagGroups:
  - name: namespaces
    tags:
      - admin
servers:
  - url: http://localhost:8551
  - url: https://api.baobab.klaytn.net:8651
  - url: https://public-en-cypress.klaytn.net
paths:
  /admin/addPeer:
    post:
      operationId: addPeer
      summary: admin_addPeer
      description: |
        The addPeer is an administrative method that requests adding a new remote node to the list of tracked static nodes. The node will try to maintain connectivity to these nodes at all times, reconnecting every once in a while if the remote connection goes down.

        The method accepts a single argument kni, which means "Klaytn Network Identifier". It is similar to the enode concept in the geth. It is URL of the remote peer to start tracking and returns a BOOL indicating whether the peer was accepted for tracking or some error occurred.

        **JSONRPC:** `admin_addPeer`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/AddPeerReq'
      responses:
        '200':
          description: true if the peer was accepted, false otherwise.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/AddPeerResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/addPeer' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_addPeer",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "kni://a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c@10.0.0.1:32323"
              ]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.core.methods.response.BooleanResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;
            import java.io.IOException;

            public class AdminAddPeerExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void adminAddPeerExample() throws IOException {
                    String url = "kni://a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c@10.0.0.1:32323";

                    BooleanResponse response = w3.adminAddPeer(url).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const url =
                "kni://a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c@10.0.0.1:32323";

              provider.admin
                .addPeer(url, {}, (err, data, response) => {
                  console.log(data);
                })
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"
            url = "kni://a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c@10.0.0.1:32323"
            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.geth.admin.add_peer(url)
            print(admin_response)
  /admin/datadir:
    post:
      operationId: datadir
      summary: admin_datadir
      description: |
        The datadir administrative property can be queried for the absolute path the running Klaytn node currently uses to store all its databases. The default path is different depending on the node types (kcn, kpn, and ken) and the OS type.

        **JSONRPC:** `admin_datadir`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DatadirReq'
      responses:
        '200':
          description: The datadir path.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DatadirResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/datadir' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_datadir",
              "id": 1,
              "jsonrpc": "2.0"
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.AdminDatadirResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminDataDirExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void adminDataDirExample() throws IOException {
                    AdminDatadirResponse response = w3.adminDatadir().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.admin
                .datadir({}, (err, data, response) => {
                  console.log(data);
                })
                .then(() => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.geth.admin.datadir()

            print(admin_response)
  /admin/exportChain:
    post:
      operationId: exportChain
      summary: admin_exportChain
      description: |
        The exportChain is an administrative method that exports the blockchain to a file.

        **JSONRPC:** `admin_exportChain`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/ExportChainReq'
      responses:
        '200':
          description: true if chain was exported, false if not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/ExportChainResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/exportChain' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_exportChain",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "/tmp/chain.txt", 1, 1000
              ]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.AdminExportChainResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminExportChainExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void adminExportChainExample() throws IOException {
                    String file = "/tmp/chain3.txt";
                    int firstBlock = 1;
                    int lastBlock = 500;
                    AdminExportChainResponse response = w3.adminExportChain(file, firstBlock, lastBlock).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const fileName = "/tmp/chain.txt";
              const startBlock = 1;
              const endBlock = 1000;

              provider.admin.exportChain(
                fileName,
                startBlock,
                endBlock,
                {},
                (err, data, response) => {
                  console.log(data);
                },
              );
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            fileName = "/tmp/chain.txt"
            startBlock = 1
            endBlock = 1000

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.geth.admin.export_chain(fileName, startBlock, endBlock)

            print(admin_response)
  /admin/getSpamThrottlerCandidateList:
    post:
      operationId: getSpamThrottlerCandidateList
      summary: admin_getSpamThrottlerCandidateList
      description: |
        Get spam throttler candidate list

        **JSONRPC:** `admin_getSpamThrottlerCandidateList`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/GetSpamThrottlerCandidateListReq'
      responses:
        '200':
          description: Get spam throttler candidate list
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/GetSpamThrottlerCandidateListResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |-
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/getSpamThrottlerCandidateList' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_getSpamThrottlerCandidateList",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            import org.web3j.protocol.klaytn.core.method.response.AdminGetSpamThrottlerCandidateListResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminGetSpamThrottlerCandidateListExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void adminGetSpamThrottlerCandidateListExample() throws IOException {
                    AdminGetSpamThrottlerCandidateListResponse response = w3.adminGetSpamThrottlerCandidateList().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.admin
                .getSpamThrottlerCandidateList({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.geth.admin.get_spam_throttler_candidate_list()

            print(admin_response)
  /admin/getSpamThrottlerThrottleList:
    post:
      operationId: getSpamThrottlerThrottleList
      summary: admin_getSpamThrottlerThrottleList
      description: |
        Get spam throttler throttle list

        **JSONRPC:** `admin_getSpamThrottlerThrottleList`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/GetSpamThrottlerThrottleListReq'
      responses:
        '200':
          description: Get spam throttler throttle list
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/GetSpamThrottlerThrottleListResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/getSpamThrottlerThrottleList' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_getSpamThrottlerThrottleList",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            import org.web3j.protocol.klaytn.core.method.response.AdminGetSpamThrottlerThrottleListResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminGetSpamThrottlerThrottleListExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void adminGetSpamThrottlerThrottleListExample() throws IOException {
                    AdminGetSpamThrottlerThrottleListResponse response = w3.adminGetSpamThrottlerThrottleList().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.admin
                .getSpamThrottlerThrottleList({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.geth.admin.get_spam_throttler_throttle_list()

            print(admin_response)
  /admin/getSpamThrottlerWhiteList:
    post:
      operationId: getSpamThrottlerWhiteList
      summary: admin_getSpamThrottlerWhiteList
      description: |
        Get spam throttler white list

        **JSONRPC:** `admin_getSpamThrottlerWhiteList`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/GetSpamThrottlerWhiteListReq'
      responses:
        '200':
          description: Get spam throttler white list
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/GetSpamThrottlerWhiteListResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |-
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/getSpamThrottlerWhiteList' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_getSpamThrottlerWhiteList",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            import org.web3j.protocol.klaytn.core.method.response.AdminGetSpamThrottlerWhiteListResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminGetSpamThrottlerWhiteListExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void adminGetSpamThrottlerWhiteListExample() throws IOException {
                    AdminGetSpamThrottlerWhiteListResponse response = w3.adminGetSpamThrottlerWhiteList().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.admin
                .getSpamThrottlerWhiteList({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.geth.admin.get_spam_throttler_white_list()

            print(admin_response)
  /admin/importChain:
    post:
      operationId: importChain
      summary: admin_importChain
      description: |
        The importChain is an administrative method that imports an exported chain from a file into a node. This method imports only blocks that haven't existed in a Klaytn node. This method does not delete any data of the existing chain.

        **JSONRPC:** `admin_importChain`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/ImportChainReq'
      responses:
        '200':
          description: true if chain was imported, false if not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/ImportChainResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/importChain' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_importChain",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "/tmp/chain.txt"
              ]
            }'
        - lang: java
          label: Java
          source: |
            import org.web3j.protocol.klaytn.core.method.response.AdminImportChainResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminImportChainExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void adminImportChainExample() throws IOException {
                    String fileName = "/tmp/chain.txt";

                    AdminImportChainResponse response = w3.adminImportChain(fileName).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const fileName = "/tmp/chain.txt";

              provider.admin
                .importChain(fileName, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            fileName = "/tmp/chain.txt"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.geth.admin.import_chain(fileName)

            print(admin_response)
  /admin/importChainFromString:
    post:
      operationId: importChainFromString
      summary: admin_importChainFromString
      description: |
        The importChainFromString is an administrative method that imports a chain from a RLP-encoded string of blocks into a Klaytn node. This only works if there is no existing chain in a Klaytn node. This method does not delete any data of the existing chain.       

        **JSONRPC:** `admin_importChainFromString`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/ImportChainFromStringReq'
      responses:
        '200':
          description: true if chain was imported, false if not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/ImportChainFromStringResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/importChainFromString' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_importChainFromString",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "f9071...080c0"
              ]
            }'
        - lang: java
          label: Java
          source: |
            import org.web3j.protocol.klaytn.core.method.response.AdminImportChainFromStringResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminImportChainFromStringExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void adminImportChainFromStringExample() throws IOException {
                    String blockRlp = "0xf90273f9026fa0c36f3961fd16dff60764c63f76f67542ca20dedbff039ee52cd20e772f567bd794043c471bee060e00a56ccd02c0ca286808a5a436a0d044a2b68f0e5da76178af5ea4a7deb852fd6cb4a8369f6f924e72414ef1cf99a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421bc9cc2eb8c0d883010a02846b6c617988676f312e31352e37856c696e757800000000000000f89ed59465b47be3457ff26f2911cf89fd079cef0475a2e6b841395cf5ecab6c9c69d4571dc85bc39075242570c9c947fb4be4e23639faae4d512d5690f47244f41e0138314098a63d533e761a16b7e36e68322d7605a2ea6b0f01f843b8418259cb2f6beaee384e0a52e8b37fca77084982557d406817cc1ae8e1b96556a243e97b51317b9e3fa1545942b18e2ba68b94d33bb0fd62a5a5fdba23cc85be040180808505d21dba00c0";

                    AdminImportChainFromStringResponse response = w3.adminImportChainFromString(blockRlp).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockRlp =
                "0xf90273f9026fa0c36f3961fd16dff60764c63f76f67542ca20dedbff039ee52cd20e772f567bd794043c471bee060e00a56ccd02c0ca286808a5a436a0d044a2b68f0e5da76178af5ea4a7deb852fd6cb4a8369f6f924e72414ef1cf99a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421bc9cc2eb8c0d883010a02846b6c617988676f312e31352e37856c696e757800000000000000f89ed59465b47be3457ff26f2911cf89fd079cef0475a2e6b841395cf5ecab6c9c69d4571dc85bc39075242570c9c947fb4be4e23639faae4d512d5690f47244f41e0138314098a63d533e761a16b7e36e68322d7605a2ea6b0f01f843b8418259cb2f6beaee384e0a52e8b37fca77084982557d406817cc1ae8e1b96556a243e97b51317b9e3fa1545942b18e2ba68b94d33bb0fd62a5a5fdba23cc85be040180808505d21dba00c0";

              provider.admin
                .importChainFromString(blockRlp, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockRlp = "0xf90273f9026fa0c36f3961fd16dff60764c63f76f67542ca20dedbff039ee52cd20e772f567bd794043c471bee060e00a56ccd02c0ca286808a5a436a0d044a2b68f0e5da76178af5ea4a7deb852fd6cb4a8369f6f924e72414ef1cf99a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421bc9cc2eb8c0d883010a02846b6c617988676f312e31352e37856c696e757800000000000000f89ed59465b47be3457ff26f2911cf89fd079cef0475a2e6b841395cf5ecab6c9c69d4571dc85bc39075242570c9c947fb4be4e23639faae4d512d5690f47244f41e0138314098a63d533e761a16b7e36e68322d7605a2ea6b0f01f843b8418259cb2f6beaee384e0a52e8b37fca77084982557d406817cc1ae8e1b96556a243e97b51317b9e3fa1545942b18e2ba68b94d33bb0fd62a5a5fdba23cc85be040180808505d21dba00c0"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.geth.admin.import_chain_from_string(blockRlp)

            print(admin_response)
  /admin/nodeInfo:
    post:
      operationId: nodeInfo
      summary: admin_nodeInfo
      description: |
        The nodeInfo administrative property can be queried for all the information known about the running Klaytn node at the networking granularity. These include general information about the node itself as a participant of the devp2p P2P overlay protocol, as well as specialized information added by each of the running application protocols, e.g., klay.

        **JSONRPC:** `admin_nodeInfo`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/NodeInfoReq'
      responses:
        '200':
          description: The node information.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/NodeInfoResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/nodeInfo' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_nodeInfo",
              "id": 1,
              "jsonrpc": "2.0"
            }'
        - lang: java
          label: Java
          source: |
            import org.web3j.protocol.core.methods.response.admin.AdminNodeInfo;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminNodeInfoExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void adminNodeInfoExample() throws IOException {
                    AdminNodeInfo response = w3.adminNodeInfo().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.admin
                .nodeInfo({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.geth.admin.node_info()

            print(admin_response)
  /admin/peers:
    post:
      operationId: peers
      summary: admin_peers
      description: |
        The peers administrative property can be queried for all the information known about the connected remote nodes at the networking granularity. These include general information about the nodes themselves as participants of the devp2p P2P overlay protocol, as well as specialized information added by each of the running application protocols.        

        **JSONRPC:** `admin_peers`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/PeersReq'
      responses:
        '200':
          description: The information about all connected peers.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/PeersResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/peers' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_peers",
              "id": 1,
              "jsonrpc": "2.0"
            }'
        - lang: java
          label: Java
          source: |
            import org.web3j.protocol.core.methods.response.admin.AdminPeers;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminPeersExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void adminPeersExample() throws IOException {
                    AdminPeers response = w3.adminPeers().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.admin
                .peers({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.geth.admin.peers()

            print(admin_response)
  /admin/removePeer:
    post:
      operationId: removePeer
      summary: admin_removePeer
      description: |
        The removePeer is an administrative method that requests removing a node from the list of tracked static nodes.

        The method accepts a single argument kni, which means "Klaytn Network Identifier". It is similar to the enode concept in the geth. It is URL of the remote peer to be removed from a list and returns a BOOL indicating whether the peer was removed or some error occurred.        

        **JSONRPC:** `admin_removePeer`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/RemovePeerReq'
      responses:
        '200':
          description: true if the peer was accepted, false otherwise.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/RemovePeerResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/removePeer' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_removePeer",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "kni://a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c@10.0.0.1:32323"
              ]
            }'
        - lang: java
          label: Java
          source: |
            import org.web3j.protocol.core.methods.response.BooleanResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminRemovePeerExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void adminRemovePeerExample() throws IOException {
                    String url = "kni://a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c@10.0.0.1:32323";

                    BooleanResponse response = w3.adminRemovePeer(url).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const url =
                "kni://a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c@10.0.0.1:32323";

              provider.admin
                .removePeer(url, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            url = "kni://a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c@10.0.0.1:32323"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.geth.admin.remove_peer(url)

            print(admin_response)
  /admin/saveTrieNodeCacheToDisk:
    post:
      operationId: saveTrieNodeCacheToDisk
      summary: admin_saveTrieNodeCacheToDisk
      description: |
        The saveTrieNodeCacheToDisk is an administrative method that starts saving the cached trie node to the disk to reuse them when the node restarts. Cached trie node data will be stored to and loaded from $DATA_DIR/fastcache . This method returns an error if the saving process has been already triggered or trie node cache is disabled. This feature is supported since Klaytn 1.5.3.       

        **JSONRPC:** `admin_saveTrieNodeCacheToDisk`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/SaveTrieNodeCacheToDiskReq'
      responses:
        '200':
          description: null if saving the trie node has started, or an error message if not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/SaveTrieNodeCacheToDiskResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/saveTrieNodeCacheToDisk' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_saveTrieNodeCacheToDisk",
              "id": 1,
              "jsonrpc": "2.0"
            }'
        - lang: java
          label: Java
          source: |
            import org.web3j.protocol.klaytn.core.method.response.AdminSaveTrieNodeCacheToDiskResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminSaveTrieNodeCacheToDiskExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void adminSaveTrieNodeCacheToDiskExample() throws IOException {
                    AdminSaveTrieNodeCacheToDiskResponse response = w3.adminSaveTrieNodeCacheToDisk().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.admin
                .saveTrieNodeCacheToDisk({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.geth.admin.save_trie_node_cache_to_disk()

            print(admin_response)
  /admin/setMaxSubscriptionPerWSConn:
    post:
      operationId: setMaxSubscriptionPerWSConn
      summary: admin_setMaxSubscriptionPerWSConn
      description: |
        The setMaxSubscriptionPerWSConn is an administrative method that sets the maximum allowed number of subscriptions per single WebSocket connection. For example, if the maximum number is set to five and a user requests more than five subscriptions through the klay_subscribe API, an error message "Maximum 5 subscriptions are allowed for a WebSocket connection" will be displayed. This feature is supported since Klaytn 1.6.0.

        **JSONRPC:** `admin_setMaxSubscriptionPerWSConn`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/SetMaxSubscriptionPerWSConnReq'
      responses:
        '200':
          description: Return null if the limit is set successfully; otherwise, it returns an error message.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/SetMaxSubscriptionPerWSConnResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/setMaxSubscriptionPerWSConn' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_setMaxSubscriptionPerWSConn",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [5]
            }'
        - lang: java
          label: Java
          source: |
            import org.web3j.protocol.klaytn.core.method.response.AdminSetMaxSubscriptionPerWSConnResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminSetMaxSubscriptionPerWSConnExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void adminSetMaxSubscriptionPerWSConnExample() throws IOException {
                    int limit = 5;

                    AdminSetMaxSubscriptionPerWSConnResponse response = w3.adminSetMaxSubscriptionPerWSConn(limit).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const maxSubscriptionPerWSConn = 5;

              provider.admin
                .setMaxSubscriptionPerWSConn(
                  maxSubscriptionPerWSConn,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            limit = 5

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.geth.admin.set_max_subscription_per_ws_conn(limit)

            print(admin_response)
  /admin/setSpamThrottlerWhiteList:
    post:
      operationId: setSpamThrottlerWhiteList
      summary: admin_setSpamThrottlerWhiteList
      description: |
        Set spam throttler white list

        **JSONRPC:** `admin_setSpamThrottlerWhiteList`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/SetSpamThrottlerWhiteListReq'
      responses:
        '200':
          description: Set spam throttler white list
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/SetSpamThrottlerWhiteListResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |-
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/setSpamThrottlerWhiteList' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_setSpamThrottlerWhiteList",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [["0xfdeedbb2fe5b48d5b49e435ba00e0358740d0cf5"]]
            }'
        - lang: java
          label: Java
          source: |
            import org.web3j.protocol.klaytn.core.method.response.AdminSetSpamThrottlerWhiteListResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;
            import java.util.List;

            public class AdminSetSpamThrottlerWhiteListExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void adminSetSpamThrottlerWhiteListExample() throws IOException {
                    List<String> addresses = List.of("0xfdeedbb2fe5b48d5b49e435ba00e0358740d0cf5");
                    AdminSetSpamThrottlerWhiteListResponse response = w3.adminSetSpamThrottlerWhiteList(addresses).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const address = ["0xfdeedbb2fe5b48d5b49e435ba00e0358740d0cf5"];
              provider.admin
                .setSpamThrottlerWhiteList(address, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = ["0xfdeedbb2fe5b48d5b49e435ba00e0358740d0cf5"]

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.geth.admin.set_spam_throttler_white_list(address)

            print(admin_response)
  /admin/spamThrottlerConfig:
    post:
      operationId: spamThrottlerConfig
      summary: admin_spamThrottlerConfig
      description: |
        Get spam throttler config

        **JSONRPC:** `admin_spamThrottlerConfig`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/SpamThrottlerConfigReq'
      responses:
        '200':
          description: Get spam throttler config
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/SpamThrottlerConfigResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/spamThrottlerConfig' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_spamThrottlerConfig",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            import org.web3j.protocol.klaytn.core.method.response.AdminSpamThrottlerConfigResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminSpamThrottlerConfigExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void adminSpamThrottlerConfigExample() throws IOException {
                    AdminSpamThrottlerConfigResponse response = w3.adminSpamThrottlerConfig().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.admin
                .spamThrottlerConfig({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.geth.admin.spam_throttler_config()

            print(admin_response)
  /admin/startHTTP:
    post:
      operationId: startHTTP
      summary: admin_startHTTP
      description: |
        The startHTTP is an administrative method that starts an HTTP based JSON RPC API webserver to handle client requests.

        The method returns a boolean flag specifying whether the HTTP RPC listener was opened or not. Please note, only one HTTP endpoint is allowed to be active at any time.

        **NOTE:** *This API replaces admin_startRPC. The admin_startRPC will be deprecated soon.*

        **JSONRPC:** `admin_startHTTP`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/StartHTTPReq'
      responses:
        '200':
          description: Return true if the HTTP RPC listener was opened, false if not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/StartHTTPResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/startHTTP' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_startHTTP",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["127.0.0.1", 8551, "", "klay"]
            }'
        - lang: java
          label: Java
          source: |
            import org.web3j.protocol.klaytn.core.method.response.AdminStartHTTPResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminStartHTTPExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void adminStartHTTPExample() throws IOException {
                    String adminHost = "127.0.0.1";
                    int port = 8551;
                    String cors = "";
                    String apis = "klay";
                    AdminStartHTTPResponse response = w3.adminStartHTTP(adminHost, port, cors, apis).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              const host = "127.0.0.1";
              const port = 8555;
              const cors = "";
              const apis = "klay";

              provider.admin
                .startHTTP({ host, port, cors, apis }, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            adminHost = "127.0.0.1"
            port = 8551
            cors = ""
            apis = "klay"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.geth.admin.start_http(adminHost, port, cors, apis)

            print(admin_response)
  /admin/startSpamThrottler:
    post:
      operationId: startSpamThrottler
      summary: admin_startSpamThrottler
      description: |
        Start spam throttler

        **JSONRPC:** `admin_startSpamThrottler`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/startSpamThrottlerReq'
      responses:
        '200':
          description: Start spam throttler
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/startSpamThrottlerResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |-
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/startSpamThrottler' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_startSpamThrottler",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            import org.web3j.protocol.klaytn.core.method.response.AdminStartSpamThrottlerResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminStartSpamThrottlerExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void adminStartSpamThrottlerExample() throws IOException {
                    AdminStartSpamThrottlerResponse response = w3.adminStartSpamThrottler().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.admin
                .startSpamThrottler({}, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.geth.admin.start_spam_throttler()

            print(admin_response)
  /admin/startStateMigration:
    post:
      operationId: startStateMigration
      summary: admin_startStateMigration
      description: |
        The startStateMigration is an administrative method that starts a state migration and removes old state/storage trie nodes. This can save the storage space of a Klaytn node. The method returns an error if it fails to start a state migration, or null if it succeeds to start. NOTE: After the state migration, the node cannot serve APIs with previous states.

        **JSONRPC:** `admin_startStateMigration`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/StartStateMigrationReq'
      responses:
        '200':
          description: null if the state migration has started, or an error message if not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/StartStateMigrationResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/startStateMigration' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_startStateMigration",
              "id": 1,
              "jsonrpc": "2.0"
            }'
        - lang: java
          label: Java
          source: |
            import org.web3j.protocol.klaytn.core.method.response.AdminStartStateMigrationResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminStartStateMigrationExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void adminStartStateMigrationExample() throws IOException {
                    AdminStartStateMigrationResponse response = w3.adminStartStateMigration().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              provider.admin
                .startStateMigration({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.geth.admin.start_state_migration()

            print(admin_response)
  /admin/startWS:
    post:
      operationId: startWS
      summary: admin_startWS
      description: |
        The startWS is an administrative method that starts an WebSocket based JSON RPC API webserver to handle client requests.

        The method returns a boolean flag specifying whether the WebSocket RPC listener was opened or not. Please note, only one WebSocket endpoint is allowed to be active at any time.     

        **JSONRPC:** `admin_startWS`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/StartWSReq'
      responses:
        '200':
          description: true if the WebSocket RPC listener was opened, false if not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/StartWSResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/startWS' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_startWS",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["127.0.0.1", 8552, "", "klay"]
            }'
        - lang: java
          label: Java
          source: |
            import org.web3j.protocol.klaytn.core.method.response.AdminStartWSResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminStartWSExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void adminStartWSExample() throws IOException {
                    String host = "127.0.0.1";
                    int port = 8552;
                    String cors = "";
                    String apis = "klay";

                    AdminStartWSResponse response = w3.adminStartWS(host, port, cors, apis).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const host = "127.0.0.1";
              const port = 8552;
              const cors = "";
              const apis = "klay";

              provider.admin
                .startWS({ host, port, cors, apis }, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            adminHost = "127.0.0.1"
            port = 8552
            cors = ""
            apis = "klay"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.geth.admin.start_ws(adminHost, port, cors, apis)

            print(admin_response)
  /admin/stateMigrationStatus:
    post:
      operationId: stateMigrationStatus
      summary: admin_stateMigrationStatus
      description: |
        The stateMigrationStatus is an administrative method that returns the status information of the state migration. This method takes no parameters and returns the status of the currently running state migration.

        **JSONRPC:** `admin_stateMigrationStatus`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/StateMigrationStatusReq'
      responses:
        '200':
          description: Returns the status information of the state migration
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/StateMigrationStatusResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/stateMigrationStatus' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_stateMigrationStatus",
              "id": 1,
              "jsonrpc": "2.0"
            }'
        - lang: java
          label: Java
          source: |
            import org.web3j.protocol.klaytn.core.method.response.AdminStateMigrationStatusResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminStateMigrationStatusExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void adminStateMigrationStatusExample() throws IOException {
                    AdminStateMigrationStatusResponse response = w3.adminStateMigrationStatus().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.admin
                .stateMigrationStatus({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.geth.admin.state_migration_status()

            print(admin_response)
  /admin/stopHTTP:
    post:
      operationId: stopHTTP
      summary: admin_stopHTTP
      description: |
        The stopHTTP is an administrative method that closes the currently open HTTP RPC endpoint. As the node can only have a single HTTP endpoint running, this method takes no parameters, returning a boolean whether the endpoint was closed or not.

        **NOTE:** This API replaces admin_stopRPC. The admin_stopRPC will be deprecated soon.

        **JSONRPC:** `admin_stopHTTP`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/StopHTTPReq'
      responses:
        '200':
          description: true if the endpoint was closed, false if not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/StopHTTPResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/stopHTTP' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_stopHTTP",
              "id": 1,
              "jsonrpc": "2.0"
            }'
        - lang: java
          label: Java
          source: |
            import org.web3j.protocol.klaytn.core.method.response.AdminStopHTTPResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminStopHTTPExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void adminStopHttpExample() throws IOException {
                    AdminStopHTTPResponse response = w3.adminStopHTTP().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.admin
                .stopHTTP({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.geth.admin.stop_http()

            print(admin_response)
  /admin/stopSpamThrottler:
    post:
      operationId: stopSpamThrottler
      summary: admin_stopSpamThrottler
      description: |
        Stop spam throttler

        **JSONRPC:** `admin_stopSpamThrottler`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/StopSpamThrottlerReq'
      responses:
        '200':
          description: Stop spam throttler
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/stopSpamThrottlerResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |-
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/stopSpamThrottler' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_stopSpamThrottler",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            import org.web3j.protocol.klaytn.core.method.response.AdminStopSpamThrottlerResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminStopSpamThrottlerExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void adminStopSpamThrottlerExample() throws IOException {
                    AdminStopSpamThrottlerResponse response = w3.adminStopSpamThrottler().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.admin
                .stopSpamThrottler({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.geth.admin.stop_spam_throttler()

            print(admin_response)
  /admin/stopStateMigration:
    post:
      operationId: stopStateMigration
      summary: admin_stopStateMigration
      description: |
        The stopStateMigration is an administrative method that stops the currently running state migration. This method takes no parameters and returns null or an error whether the state migration was stopped or not.       

        **JSONRPC:** `admin_stopStateMigration`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/StopStateMigrationReq'
      responses:
        '200':
          description: null if the state migration is stopped, or an error if not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/StopStateMigrationResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/stopStateMigration' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_stopStateMigration",
              "id": 1,
              "jsonrpc": "2.0"
            }'
        - lang: java
          label: Java
          source: |
            import org.web3j.protocol.klaytn.core.method.response.AdminStopStateMigrationResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminStopStateMigrationExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void adminStopStateMigrationExample() throws IOException {
                    AdminStopStateMigrationResponse response = w3.adminStopStateMigration().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              provider.admin
                .stopStateMigration({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.geth.admin.stop_state_migration()

            print(admin_response)
  /admin/stopWS:
    post:
      operationId: stopWS
      summary: admin_stopWS
      description: |
        The stopWS is an administrative method that closes the currently open WebSocket RPC endpoint. As the node can only have a single WebSocket endpoint running, this method takes no parameters, returning a boolean whether the endpoint was closed or not.        

        **JSONRPC:** `admin_stopWS`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/StopWSReq'
      responses:
        '200':
          description: true if the endpoint was closed, false if not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/StopWSResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/stopWS' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_stopWS",
              "id": 1,
              "jsonrpc": "2.0"
            }'
        - lang: java
          label: Java
          source: |
            import org.web3j.protocol.klaytn.core.method.response.AdminStopWSResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminStopWSExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void adminStopWSExample() throws IOException {
                    AdminStopWSResponse response = w3.adminStopWS().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              provider.admin
                .stopWS({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.geth.admin.stop_ws()

            print(admin_response)
  /admin/nodeConfig:
    post:
      operationId: nodeConfig
      summary: admin_nodeConfig
      description: |
        A series of node configurations

        **JSONRPC:** `admin_nodeConfig`
      tags:
        - admin
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/NodeConfigReq'
      responses:
        '200':
          description: The node config information.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/NodeConfigResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/admin/nodeConfig' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "admin_nodeConfig",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |
            import org.web3j.protocol.core.methods.response.admin.AdminNodeConfig;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class AdminNodeConfigExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));

                void adminNodeConfigExample() throws IOException {
                    AdminNodeConfig response = w3.adminNodeConfig().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");

            (async () => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");

              // The full list of JSON-RPC is available at:
              // https://docs.klaytn.foundation/content/dapp/json-rpc/api-references
              const data = await provider.admin.nodeConfig();
              console.log("Node config", data);
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"
            w3 = Web3(Web3.HTTPProvider(host))
            admin_response = w3.geth.admin.node_config()
            print(admin_response)
components:
  schemas:
    JsonRpcRequest:
      type: object
      required:
        - method
        - id
        - jsonrpc
      properties:
        method:
          type: string
          description: Method name
        id:
          type: integer
          default: 1
          format: int64
          description: Request ID, Random or Auto incrementation
        jsonrpc:
          type: string
          default: '2.0'
          description: JSON-RPC Version (2.0)
        params:
          type: array
          items: {}
    AddPeerReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: admin_addPeer
        params:
          type: array
          description: Peer's kni URL.
          items:
            title: Url
            type: string
          example:
            - kni://a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c@10.0.0.1:32323
    ErrorMember:
      type: object
      title: ErrorMember
      required:
        - code
      properties:
        code:
          type: integer
          format: int64
          example: -32700
          description: |
            A Number that indicates the error type that occurred.
            This MUST be an integer.

            | code | message | description |
            |-----|-----|-------|
            | -32700   | Parse error   | invalid JSON was received by the server. An error occurred on the server while parsing the JSON text. |
            |-32602 | Invalid params | Invalid method parameter(s). |
        message:
          type: string
          example: Parse error
          description: |
            A String providing a short description of the error.
            The message SHOULD be limited to a concise single sentence.
        data:
          type: string
          description: |
            A Primitive or Structured value that contains additional information about the error.
            This may be omitted.
            The value of this member is defined by the Server (e.g. detailed error information, nested errors etc.).
    JsonRpcResponse:
      type: object
      required:
        - jsonrpc
        - id
      properties:
        jsonrpc:
          type: string
          default: '2.0'
        id:
          type: integer
          format: int64
        error:
          $ref: '#/components/schemas/ErrorMember'
        result: {}
    AddPeerResp:
      type: object
      properties:
        result:
          type: boolean
          description: true if the peer was accepted, false otherwise.
          example: true
    DatadirReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: admin_datadir
    DatadirResp:
      type: object
      properties:
        result:
          type: string
          description: The datadir path.
          example: /your/dir/ken/data/dd
    IntegerBlockNumber:
      title: IntegerBlockNumber
      description: the block number with type integer
      type: number
    ExportChainReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: admin_exportChain
        params:
          type: array
          description: the fully qualified path to the file where the blockchain must be exported.
          items:
            anyOf:
              - type: string
                title: FileName
              - type: number
                format: integer
                title: FirstBlock
              - type: number
                format: integer
                title: LastBlock
          example:
            - /tmp/chain.txt
            - 1
            - 1000
    ExportChainResp:
      type: object
      properties:
        result:
          type: boolean
          description: true if chain was exported, false if not.
          example: true
    GetSpamThrottlerCandidateListReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: admin_getSpamThrottlerCandidateList
    Address:
      title: Address
      type: string
      format: 20-byte DATA
      description: Address
    GetSpamThrottlerCandidateListResp:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/Address'
          example: []
    GetSpamThrottlerThrottleListReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: admin_getSpamThrottlerThrottleList
    GetSpamThrottlerThrottleListResp:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/Address'
          example: []
    GetSpamThrottlerWhiteListReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: admin_getSpamThrottlerWhiteList
    GetSpamThrottlerWhiteListResp:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/Address'
          example:
            - '0xfdeedbb2fe5b48d5b49e435ba00e0358740d0cf5'
    ImportChainReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: admin_importChain
        params:
          type: array
          description: the fully qualified path to the file containing the chain to be imported.
          items:
            title: FileName
            type: string
          example:
            - /tmp/chain.txt
    ImportChainResp:
      type: object
      properties:
        result:
          type: boolean
          description: true if chain was imported, false if not.
          example: true
    ImportChainFromStringReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: admin_importChainFromString
        params:
          type: array
          description: the RLP-encoded string that represents the blocks to be imported. (equals to the return value of debug.getBlockRlp)
          items:
            title: BlockRlp
            type: string
          example:
            - f9071...080c0
    ImportChainFromStringResp:
      type: object
      properties:
        result:
          type: boolean
          description: true if chain was imported, false if not.
          example: true
    NodeInfoReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: admin_nodeInfo
    NodeInfoResp:
      type: object
      properties:
        result:
          type: object
          description: The node information.
          example:
            id: 377ef808aff73a397d133b3bf160df586054c98c0e6a65c8fce9560e6a0632bc975419f461803d27f28ee270287113cc2359225814debc1bfb2f811061e14c5d
            name: Klaytn/vvX.X.X/XXXX-XXXX/goX.X.X
            kni: kni://377ef808aff73a397d133b3bf160df586054c98c0e6a65c8fce9560e6a0632bc975419f461803d27f28ee270287113cc2359225814debc1bfb2f811061e14c5d@[::]:32323?discport=0
            ip: '::'
            ports:
              discovery: 0
              listener: 32323
            listenAddr: '[::]:32323'
            protocols:
              istanbul:
                network: 1000
                difficulty: 1
                genesis: '0x06806bd8b1e086dfb7098a289da07037a3af58e793d205d20f61c88eeea9351d'
                config:
                  chainId: 1000
                  istanbul:
                    epoch: 30000
                    policy: 0
                    sub: 7
                  isBFT: true
                  unitPrice: 25000000000
                  deriveShaImpl: 0
                head: '0x06806bd8b1e086dfb7098a289da07037a3af58e793d205d20f61c88eeea9351d'
    PeersReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: admin_peers
    PeersResp:
      type: object
      properties:
        result:
          type: array
          description: The information about all connected peers.
          items:
            type: object
          example:
            - id: 144af69d2bb030c6a2a5ceee7445dc613e200f19358547cffc353d56e6c8a5b4186a6953c028b6afd0ab3c2bfc4c86f24b0bf855d0686b964ec65cefd3deec37
              name: Klaytn/vvX.X.X/XXXX-XXXX/goX.X.X
              caps:
                - istanbul/64
              network:
                localAddress: 10.0.10.1:49355
                remoteAddress: 10.0.0.1:32323
                inbound: false
                trusted: false
                static: true
              protocols:
                istanbul:
                  version: 64
                  difficulty: 1285901
                  head: '0x2d04ac52df4af08a9a0e15d5939c29decb00031e7b3f6abd05bc0c731f6b5561'
            - id: a875620f67f0b12edb97d0ec269e7940f2505b1f62576f39858c37e1d7f956318c3a619239f03f806a79ccaa8e7e9b5def343c24a9fd2e9d715964e0952dd995
              name: Klaytn/vvX.X.X/XXXX-XXXX/goX.X.X
              caps:
                - istanbul/64
              networks:
                - localAddress: 10.0.10.2:49353
                  remoteAddress: 10.0.0.2:32323
                  inbound: false
                  trusted: false
                  static: true
              protocols:
                istanbul:
                  version: 64
                  difficulty: 1285901
                  head: '0x2d04ac52df4af08a9a0e15d5939c29decb00031e7b3f6abd05bc0c731f6b5561'
            - id: e18d6d4e0ffac0a51028a8d49a548295ac8ac50d064f3581600799a3ae761a61f0b39c38b4195e163e01f30db616debf61b5b2ddea716bc8fb1c907ce7a1de26
              name: Klaytn/vvX.X.X/XXXX-XXXX/goX.X.X
              caps:
                - istanbul/64
              network:
                localAddress: 10.0.10.3:49354
                remoteAddress: 10.0.0.3:32323
                inbound: false
                trusted: false
                static: true
              protocols:
                istanbul:
                  version: 64
                  difficulty: 1285900
                  head: '0x2e228a45c7c9b9e6729b6c66b31957d6cb62ce53e32cedf156615a4e8a2e253a'
    RemovePeerReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: admin_removePeer
        params:
          type: array
          description: Peer's kni URL.
          items:
            title: Url
            type: string
          example:
            - kni://a979fb575495b8d6db44f750317d0f4622bf4c2aa3365d6af7c284339968eef29b69ad0dce72a4d8db5ebb4968de0e3bec910127f134779fbcb0cb6d3331163c@10.0.0.1:32323
    RemovePeerResp:
      type: object
      properties:
        result:
          type: boolean
          description: true if the peer was accepted, false otherwise.
          example: true
    SaveTrieNodeCacheToDiskReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: admin_saveTrieNodeCacheToDisk
    SaveTrieNodeCacheToDiskResp:
      type: object
      properties:
        result:
          type: string
          description: null if saving the trie node has started, or an error message if not.
          example: null
    SetMaxSubscriptionPerWSConnReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: admin_setMaxSubscriptionPerWSConn
        params:
          type: array
          description: The maximum allowed number of subscriptions per single WebSocket connection.
          items:
            type: integer
            title: Limit
            example: 5
    SetMaxSubscriptionPerWSConnResp:
      type: object
      properties:
        result:
          type: string
          nullable: true
          description: null if the limit is set successfully; otherwise, it returns an error message.
          default: null
    SetSpamThrottlerWhiteListReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: admin_setSpamThrottlerWhiteList
        params:
          type: array
          items:
            $ref: '#/components/schemas/Address'
          example:
            - - '0xfdeedbb2fe5b48d5b49e435ba00e0358740d0cf5'
    SetSpamThrottlerWhiteListResp:
      type: object
      properties:
        result:
          type: string
          example: null
    SpamThrottlerConfigReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: admin_spamThrottlerConfig
    SpamThrottlerConfigResp:
      type: object
      properties:
        result:
          type: object
          required:
            - activate_tx_pool_size
            - target_fail_ratio
            - throttle_tps
            - max_candidates
            - increase_weight
            - decrease_weight
            - initial_threshold
            - minimum_threshold
            - threshold_adjustment
            - throttle_seconds
          properties:
            activate_tx_pool_size:
              type: number
            target_fail_ratio:
              type: number
            throttle_tps:
              type: number
            max_candidates:
              type: number
            increase_weight:
              type: number
            decrease_weight:
              type: number
            initial_threshold:
              type: number
            minimum_threshold:
              type: number
            threshold_adjustment:
              type: number
            throttle_seconds:
              type: number
          example:
            activate_tx_pool_size: 0
            target_fail_ratio: 0
            throttle_tps: 0
            max_candidates: 0
            increase_weight: 0
            decrease_weight: 0
            initial_threshold: 0
            minimum_threshold: 0
            threshold_adjustment: 0
            throttle_seconds: 0
    StartHTTPReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: admin_startHTTP
        params:
          type: array
          items:
            properties:
              Host:
                type: string
                title: Host
                description: (optional) network interface to open the listener socket on (default "localhost").
              Port:
                type: integer
                title: Port
                description: (optional) network port to open the listener socket on (default 8551).
              Cors:
                type: string
                title: Cors
                description: (optional) cross-origin resource sharing header to use (default "").
              APIs:
                type: string
                title: Apis
                description: (optional) API modules to offer over this interface (default "klay,net,rpc").
          example:
            - 127.0.0.1
            - 8551
            - ''
            - klay
    StartHTTPResp:
      type: object
      properties:
        result:
          type: boolean
          description: true if the HTTP RPC listener was opened, false if not.
          example: true
    startSpamThrottlerReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: admin_startSpamThrottler
    startSpamThrottlerResp:
      type: object
      properties:
        result:
          type: string
          example: null
    StartStateMigrationReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: admin_startStateMigration
    StartStateMigrationResp:
      type: object
      properties:
        result:
          type: string
          description: null if the state migration has started, or an error message if not.
          example: null
    StartWSReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: admin_startWS
        params:
          type: array
          items:
            properties:
              Host:
                type: string
                title: Host
                description: (optional) network interface to open the listener socket on (default "localhost").
              Port:
                type: integer
                title: Port
                description: (optional) network port to open the listener socket on (default 8552).
              Cors:
                type: string
                title: Cors
                description: (optional) cross-origin resource sharing header to use (default "").
              Apis:
                type: string
                title: Apis
                description: (optional) API modules to offer over this interface (default "klay,net,rpc").
          example:
            - 127.0.0.1
            - 8552
            - ''
            - klay
    StartWSResp:
      type: object
      properties:
        result:
          type: boolean
          description: true if the WebSocket RPC listener was opened, false if not.
          example: true
    StateMigrationStatusReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: admin_stateMigrationStatus
    StateMigrationStatusResp:
      type: object
      properties:
        result:
          type: object
          description: Returns the status information of the state migration
          required:
            - committed
            - err
            - isMigration
            - migrationBlockNumber
            - pending
            - progress
            - read
          properties:
            committed:
              type: integer
              description: committed is the number of trie nodes that have been copied by the state migration.
              example: 1585169
            err:
              type: string
              nullable: true
              description: null if the state migration finished well, or an error if not.
              example: 'null'
            isMigration:
              type: boolean
              description: true if the state migration is running, or false if not.
              example: true
            migrationBlockNumber:
              type: integer
              format: uint64
              description: a blockNumber which the state migration started at. (0 if the state migration is not running.)
              example: 32527233
            pending:
              type: integer
              description: pending represents the number of trie nodes that have not been processed by the state migration.
              example: 27677
            progress:
              type: number
              format: float64
              description: progress is the progress of the state migration calculated in percent.
              example: 0.3662109375
            read:
              type: integer
              description: read represents the number of trie nodes that have been read by the state migration.
              example: 1587473
    StopHTTPReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: admin_stopHTTP
    StopHTTPResp:
      type: object
      properties:
        result:
          type: boolean
          description: true if the endpoint was closed, false if not.
          example: true
    StopSpamThrottlerReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: admin_stopSpamThrottler
    stopSpamThrottlerResp:
      type: object
      properties:
        result:
          type: string
          example: null
    StopStateMigrationReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: admin_stopStateMigration
    StopStateMigrationResp:
      type: object
      properties:
        result:
          type: string
          description: null if the state migration is stopped, or an error if not.
          example: null
    StopWSReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: admin_stopWS
    StopWSResp:
      type: object
      properties:
        result:
          type: boolean
          description: true if the endpoint was closed, false if not.
          example: true
    NodeConfigReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: admin_nodeConfig
    NodeConfigResp:
      type: object
      properties:
        result:
          type: object
          description: The node information.
          example:
            Genesis: null
            NetworkId: 203
            SyncMode: full
            NoPruning: false
            WorkerDisable: false
            DownloaderDisable: false
            FetcherDisable: false
            ParentOperatorAddr: null
            AnchoringPeriod: 0
            SentChainTxsLimit: 0
            OverwriteGenesis: false
            StartBlockNumber: 0
            DBType: LevelDB
            SkipBcVersionCheck: false
            SingleDB: false
            NumStateTrieShards: 4
            EnableDBPerfMetrics: true
            LevelDBCompression: 0
            LevelDBBufferPool: true
            LevelDBCacheSize: 768
            DynamoDBConfig:
              TableName: ''
              Region: ap-northeast-2
              Endpoint: ''
              S3Endpoint: ''
              IsProvisioned: false
              ReadCapacityUnits: 10000
              WriteCapacityUnits: 10000
              ReadOnly: false
              PerfCheck: false
            RocksDBConfig:
              Secondary: false
              DumpMallocStat: false
              DisableMetrics: false
              CacheSize: 768
              CompressionType: lz4
              BottommostCompressionType: zstd
              FilterPolicy: ribbon
              MaxOpenFiles: 1024
              CacheIndexAndFilter: false
            TrieCacheSize: 512
            TrieTimeout: 300000000000
            TrieBlockInterval: 128
            TriesInMemory: 128
            LivePruning: false
            LivePruningRetention: 172800
            SenderTxHashIndexing: false
            ParallelDBWrite: true
            TrieNodeCacheConfig:
              CacheType: LocalCache
              NumFetcherPrefetchWorker: 32
              UseSnapshotForPrefetch: false
              LocalCacheSizeMiB: 0
              FastCacheFileDir: /klaytn/fastcache
              FastCacheSavePeriod: 0
              RedisEndpoints: null
              RedisClusterEnable: false
              RedisPublishBlockEnable: false
              RedisSubscribeBlockEnable: false
            SnapshotCacheSize: 0
            SnapshotAsyncGen: false
            ServiceChainSigner: '0x0000000000000000000000000000000000000000'
            ExtraData: null
            GasPrice: 0
            Rewardbase: '0x3208ca99480f82bfe240ca6bc06110cd12bb6366'
            TxPool:
              NoLocals: false
              AllowLocalAnchorTx: false
              DenyRemoteTx: false
              Journal: /klaytn/klay/transactions.rlp
              JournalInterval: 3600000000000
              PriceLimit: 1
              PriceBump: 10
              ExecSlotsAccount: 16384
              ExecSlotsAll: 16384
              NonExecSlotsAccount: 16384
              NonExecSlotsAll: 16384
              KeepLocals: false
              Lifetime: 300000000000
              NoAccountCreation: false
              EnableSpamThrottlerAtRuntime: false
            GPO:
              Blocks: 20
              Percentile: 60
              MaxHeaderHistory: 1024
              MaxBlockHistory: 1024
              Default: null
            EnablePreimageRecording: false
            EnableInternalTxTracing: false
            EnableOpDebug: false
            Istanbul:
              Timeout: 10000
              BlockPeriod: 1
              ProposerPolicy: 0
              Epoch: 30000
              SubGroupSize: 21
            DocRoot: ''
            WsEndpoint: ''
            TxResendInterval: 4
            TxResendCount: 1000
            TxResendUseLegacy: false
            NoAccountCreation: false
            IsPrivate: true
            AutoRestartFlag: true
            RestartTimeOutFlag: 900000000000
            DaemonPathFlag: /klaytn-docker-pkg/bin/kcnd
            RPCGasCap: null
            RPCEVMTimeout: 5000000000
            RPCTxFeeCap: 0
            DisableUnsafeDebug: false
            StateRegenerationTimeLimit: 60000000000
