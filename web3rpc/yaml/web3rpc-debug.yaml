openapi: 3.0.2
info:
  title: web3rpc
  version: 0.9.0
  contact:
    name: API support
    url: https://forum.klaytn.foundation/
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
x-tagGroups:
  - name: namespaces
    tags:
      - debug
servers:
  - url: http://localhost:8551
  - url: https://api.baobab.klaytn.net:8651
  - url: https://public-en-cypress.klaytn.net
paths:
  /debug/blockchainInspection/chaindbCompact:
    post:
      operationId: chaindbCompact
      summary: '[Inspection] debug_chaindbCompact'
      description: |
        ChaindbCompact flattens the entire key-value database into a single level, removing all unused slots and merging all keys.

        **JSONRPC:** `debug_chaindbCompact`
      tags:
        - debug
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/ChaindbCompactReq'
      responses:
        '200':
          description: Return value null
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        title: ChaindbCompactResult
                        type: string
                        example: null
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://public-en-baobab.klaytn.net/debug/chaindbCompact' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_chaindbCompact",
              "id": 42,
              "jsonrpc": "2.0"
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugChaindbCompactResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugChaindbCompactExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugChaindbCompactExample() throws IOException {
                    DebugChaindbCompactResponse response = w3.debugChaindbCompact().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.debug
                .chaindbCompact({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.chaindb_compact()

            print(debug_response)
  /debug/blockchainInspection/chaindbProperty:
    post:
      operationId: chaindbProperty
      summary: '[Inspection] debug_chaindbProperty'
      description: |
        ChaindbProperty returns leveldb properties of the key-value database.

        **JSONRPC:** `debug_chaindbProperty`
      tags:
        - debug
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/chaindbPropertyReq'
      responses:
        '200':
          description: Return string
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        example: string
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/chaindbProperty' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_chaindbProperty",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xe17d821e9a8a8736b9aea8c2de1f3a4934ac0a2f"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugChaindbPropertyResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugChaindbPropertyExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugChaindbPropertyExample() throws IOException {
                    String property = "0xe17d821e9a8a8736b9aea8c2de1f3a4934ac0a2f";

                    DebugChaindbPropertyResponse response = w3.debugChaindbProperty(property).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const property = "0xe17d821e9a8a8736b9aea8c2de1f3a4934ac0a2f";

              provider.debug
                .chaindbProperty(property, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            string = "0xe17d821e9a8a8736b9aea8c2de1f3a4934ac0a2f"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.chaindb_property(string)

            print(debug_response)
  /debug/blockchainInspection/dumpBlock:
    post:
      operationId: dumpBlock
      summary: '[Inspection] debug_dumpBlock'
      description: |
        Retrieves the state that corresponds to the block number and returns a list of accounts (including storage and code).

        **NOTE:** This function correctly returns the state for a few latest, currently 4, block numbers. Retrieving older block state is restricted depending on the value set for the command-line option --state.block-interval (default: 128). This means that the function performs the state retrieval against only the block numbers that are multiples of state.block-interval. For example, when state.block-interval is 128, this function returns the state for the block numbers "0x0", "0x80", "0x100", "0x180", and so on. If the block number is not a multiple of state.block-interval, it returns 'missing trie node' error.

        **JSONRPC:** `debug_dumpBlock`
      tags:
        - debug
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugDumpBlockReq'
      responses:
        '200':
          description: Return the block information.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugDumpBlockResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/dumpBlock' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_dumpBlock",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "0x80"
              ]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugDumpBlockResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugDumpBlockExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugDumpBlockExample() throws IOException {
                    DebugDumpBlockResponse response = w3.debugDumpBlock("0x80").send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockNumber = "0x80";

              provider.debug
                .dumpBlock(blockNumber, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockNumber = "0x80"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.dump_block(blockNumber)

            print(debug_response)
  /debug/blockchainInspection/dumpStateTrie:
    post:
      operationId: dumpStateTrie
      summary: '[Inspection] debug_dumpStateTrie'
      description: |
        Retrieves all state/storage tries of the given state root.

        **JSONRPC:** `debug_dumpStateTrie`
      tags:
        - debug
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: debug_dumpStateTrie
                    params:
                      type: array
                      items:
                        oneOf:
                          - title: number
                            type: integer
                          - type: string
                            format: hex
                      description: The block number.
                      example:
                        - '0x80'
      responses:
        '200':
          description: Return the dump state Trie result
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DumpStateTrieResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/dumpStateTrie' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_dumpStateTrie",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x80"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugDumpStateTrieResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugDumpStateTrieExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugDumpStateTrieExample() throws IOException {
                    DebugDumpStateTrieResponse response = w3.debugDumpStateTrie("0x80").send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockNumber = "0x80";

              provider.debug
                .dumpStateTrie(blockNumber, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockNumber = "0x80"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.dump_state_trie(blockNumber)

            print(debug_response)
  /debug/blockchainInspection/getBadBlocks:
    post:
      operationId: getBadBlocks
      summary: '[Inspection] debug_getBadBlocks'
      description: |
        Returns a list of the last 'bad blocks' that the client has seen on the network.

        **JSONRPC:** `debug_getBadBlocks`
      tags:
        - debug
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  required:
                    - method
                  properties:
                    method:
                      type: string
                      default: debug_getBadBlocks
      responses:
        '200':
          description: Return a list of the last 'bad blocks'.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: array
                        description: JSON list of block-hashes
                        items:
                          type: object
                        example: []
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/getBadBlocks' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_getBadBlocks",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugGetBadBlocksResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugGetBadBlocksExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugGetBadBlocksExample() throws IOException {
                    DebugGetBadBlocksResponse response = w3.debugGetBadBlocks().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.debug
                .getBadBlocks({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.get_bad_blocks()

            print(debug_response)
  /debug/blockchainInspection/getBlockRlp:
    post:
      operationId: getBlockRlp
      summary: '[Inspection] debug_getBlockRlp'
      description: |
        Retrieves and returns the RLP-encoded block by the block number.

        **NOTE**: In versions earlier than Klaytn v1.7.0, only integer type is available.

        **JSONRPC:** `debug_getBlockRlp`
      tags:
        - debug
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/GetBlockRlpReq'
      responses:
        '200':
          description: Return the RLP-encoded block.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        description: The RLP-encoded block.
                        example: f90399f90394a05a825207c8396b848fefc73e442db004adee6596309af27630871b6a3d424758a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000940000000000000000000000000000000000000000a0b2ff1e4173123faa241fb93d83860e09f9e1ca1cfaf24c40c9e963e65c0b0317a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421be8d4a50fff80845bb9e92eb90187d7820401846b6c617988676f312e31302e33856c696e75780000000000000000f90164f854943b215ed129645b949722d4efbd9c749838d85bf0947050164b7718c667c9661afd924f6c0c5e5d4a01947f303b360063efc575e99cf2f7602efa034e832e94f38624dba0e106aa6a79335f77d3fd6409f9e4d8b84126d1ae355905704d8ffcc50599a8a051ac7c50ed6fc6d7caf6510cf0329b56cf3e3babfe45cc95143074ca0385627ea3b6ac3f6ad7961b60f23e32965d3b0c2900f8c9b841c3423ecb41ee86b193dbb98bf74e0c1b8e0c475503a8f5ef37ef7566af34443c77b492a1f92e5a7411c36efeae08ebc698d02353c38f07a3d5c32168243ab7e901b841ec6558f4e5d123b9dc240e77db493f1e5e2f55f108d3c4f9b39e10dbca39ad7b3fc2dd5d27a7a3d92938ad4245bef5a914377fb2b92cbe342067a9963ab121b700b841f34ed94f29cd0aefd841cc8aba9dcc9d4c2fe14795f3a661e8ce92c2014c2099327e5f4285e1d1821e55f297cf5252bafed521ab49906b9b596a3187ce1e529c00a063746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365880000000000000000c0c0
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/getBlockRlp' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_getBlockRlp",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["latest"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugGetBlockRlpResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugGetBlockRlpExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugGetBlockRlpExample() throws IOException {
                    DebugGetBlockRlpResponse response = w3.debugGetBlockRlp("earliest").send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockNumber = "200";

              provider.debug
                .getBlockRlp(blockNumber, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "latest"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.get_block_rlp(blockHash)

            print(debug_response)
  /debug/blockchainInspection/getModifiedAccountsByHash:
    post:
      operationId: getModifiedAccountsByHash
      summary: '[Inspection] debug_getModifiedAccountsByHash'
      description: |
        Returns all accounts that have changed between the two blocks specified by their block hashes. Changes made in endBlockHash are included, but changes made in startBlockHash are not. If endBlockHash is not given, it returns the accounts modified in the startBlockHash. A change is defined as a difference in nonce, balance, code hash, or storage hash.

        **JSONRPC:** `debug_getModifiedAccountsByHash`
      tags:
        - debug
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/GetModifiedAccountsByHashReq'
      responses:
        '200':
          description: Return the list of addresses modified between the given range.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        title: Addresses
                        type: array
                        items:
                          $ref: '#/components/schemas/Address'
                        description: The list of addresses modified between the given range.
                        example:
                          - '0x31b93ca83b5ad17582e886c400667c6f698b8ccd'
                          - '0xb7fe15c42e66bd71835b07dc6e7daee7729f6235'
                          - '0xe31a0edb11357dba71377e625fc6174da4ef4321'
                          - '0x16b11cf9c2186a117b0da38315b42b1eaa03bbe5'
                          - '0xd3ec3c7e4cad042dbdcb6a7e0fdbc55a92276f12'
                          - '0xa4e0d726ce51572e66295756ad93206592c43a59'
                          - '0xf65e07b6626ab43ecea744803fa46bd4a89bfdb6'
                          - '0xaac56dfe44f9894d4f536cd17acfbc44bf81a843'
                          - '0x3855407fa65c4c5104648b3a9e495072df62b585'
                          - '0x61a7cbdd597848494fa85cbb76f9c63ad9c06cad'
                          - '0xa4845491cb0dad5bd6707a33c02af0d9db435c15'
                          - '0x026e8f70a26b6e5c8bec25e23869846edfdd6728'
                          - '0x3cf3e8caea91501321feee0f0692fcd98f1c6292'
                          - '0x18822790d7baf2fa6bbca6ad8baa46985abeb81b'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/getModifiedAccountsByHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_getModifiedAccountsByHash",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x165c29e453dff6e1d9838d9e975a438b6f11a2c0a281b0d5b97c8d3110a79ac5", "0x2a8acdc3e9bb735918dc6a0141b9939976f446fde0b39336d74278da93b8d41d"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugGetModifiedAccountsByHashResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugGetModifiedAccountsByHashExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugGetModifiedAccountsByHashExample() throws IOException {
                    String startBlockHash = "0xcc1ac1e244f9f83b812b5d77ada1c399f02ea7b61e72ff31789d9ef6dad45442";
                    String endBlockHash = "0x437e92b2d30a0a828dfdd23b837a8ddf8c8b79c222e191d16c47afbf5a6aaed7";

                    DebugGetModifiedAccountsByHashResponse response = w3.debugGetModifiedAccountsByHash(startBlockHash, endBlockHash).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const startBlockHash =
                "0x165c29e453dff6e1d9838d9e975a438b6f11a2c0a281b0d5b97c8d3110a79ac5";
              const endBlockHash =
                "0x2a8acdc3e9bb735918dc6a0141b9939976f446fde0b39336d74278da93b8d41d";

              provider.debug
                .getModifiedAccountsByHash(
                  startBlockHash,
                  { endBlockHash },
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            startBlockHash = "0xcc1ac1e244f9f83b812b5d77ada1c399f02ea7b61e72ff31789d9ef6dad45442"
            endBlockHash = "0x437e92b2d30a0a828dfdd23b837a8ddf8c8b79c222e191d16c47afbf5a6aaed7"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.get_modified_accounts_by_hash(startBlockHash, endBlockHash)

            print(debug_response)
  /debug/blockchainInspection/getModifiedAccountsByNumber:
    post:
      operationId: getModifiedAccountsByNumber
      summary: '[Inspection] debug_getModifiedAccountsByNumber'
      description: |
        Returns all accounts that have changed between the two blocks specified by their block numbers. Changes made in endBlockNum are included, but changes made in startBlockNum are not. If endBlockNum is not given, it returns the accounts modified in the startBlockNum. A change is defined as a difference in nonce, balance, code hash, or storage hash.

        **JSONRPC:** `debug_getModifiedAccountsByNumber`
      tags:
        - debug
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/GetModifiedAccountsByNumberReq'
      responses:
        '200':
          description: Return the list of addresses modified between the given range.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: array
                        items:
                          $ref: '#/components/schemas/Address'
                        description: The list of addresses modified between the given range.
                        example:
                          - '0x31b93ca83b5ad17582e886c400667c6f698b8ccd'
                          - '0xb7fe15c42e66bd71835b07dc6e7daee7729f6235'
                          - '0xe31a0edb11357dba71377e625fc6174da4ef4321'
                          - '0x16b11cf9c2186a117b0da38315b42b1eaa03bbe5'
                          - '0xd3ec3c7e4cad042dbdcb6a7e0fdbc55a92276f12'
                          - '0xa4e0d726ce51572e66295756ad93206592c43a59'
                          - '0xf65e07b6626ab43ecea744803fa46bd4a89bfdb6'
                          - '0xaac56dfe44f9894d4f536cd17acfbc44bf81a843'
                          - '0x3855407fa65c4c5104648b3a9e495072df62b585'
                          - '0x61a7cbdd597848494fa85cbb76f9c63ad9c06cad'
                          - '0xa4845491cb0dad5bd6707a33c02af0d9db435c15'
                          - '0x026e8f70a26b6e5c8bec25e23869846edfdd6728'
                          - '0x3cf3e8caea91501321feee0f0692fcd98f1c6292'
                          - '0x18822790d7baf2fa6bbca6ad8baa46985abeb81b'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/getModifiedAccountsByNumber' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_getModifiedAccountsByNumber",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [128]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugGetModifiedAccountsByNumberResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugGetModifiedAccountsByNumberExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugGetModifiedAccountsByNumberExample() throws IOException {
                    int startBlockNum = 171904;
                    int endBlockNum = 172160;
                    DebugGetModifiedAccountsByNumberResponse response = w3.debugGetModifiedAccountsByNumber(startBlockNum, endBlockNum).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const startBlockNum = 171904;
              const endBlockNum = 172160;

              provider.debug
                .getModifiedAccountsByNumber(
                  startBlockNum,
                  { endBlockNum },
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            startBlockNum = 171904
            endBlockNum = 172160

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.get_modified_accounts_by_number(startBlockNum, endBlockNum)

            print(debug_response)
  /debug/blockchainInspection/getModifiedStorageNodesByNumber:
    post:
      operationId: getModifiedStorageNodesByNumber
      summary: '[Inspection] debug_getModifiedStorageNodesByNumber'
      description: |
        Returns the number of changed or modified state trie nodes.

        **JSONRPC:** `debug_getModifiedStorageNodesByNumber`
      tags:
        - debug
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/GetModifiedStorageNodesByNumberReq'
      responses:
        '200':
          description: Return the number of changed or modified state trie nodes (int)
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        description: Return the number of changed or modified state trie nodes (int)
                        type: number
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/getModifiedStorageNodesByNumber' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_getModifiedStorageNodesByNumber",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x73a7d19d14f7dfac5b799e405e22133b2adc57a6", 100, 200]
            }'
        - lang: java
          label: Java
          source: |
            import java.io.IOException;

            import org.web3j.protocol.klaytn.core.method.response.DebugGetModifiedStorageNodesByNumberResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            public class DebugGetModifiedStorageNodesByNumberExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));  void debugGetModifiedStorageNodesByNumberExample() throws IOException {
                String address = "0x73a7d19d14f7dfac5b799e405e22133b2adc57a6";
                Integer startBlockNum = 100;
                Integer endBlockNum = 200;
                DebugGetModifiedStorageNodesByNumberResponse response = w3.debugGetModifiedStorageNodesByNumber(
                    address, startBlockNum, endBlockNum).send();
                response.getResult();
              }

            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const address = "0x73a7d19d14f7dfac5b799e405e22133b2adc57a6";
              const startBlockNum = 100;
              const endBlockNum = 200;

              provider.debug
                .getModifiedStorageNodesByNumber(
                  address,
                  startBlockNum,
                  endBlockNum,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://dev.api.klaytn.sotatek.works"

            address = "0x73a7d19d14f7dfac5b799e405e22133b2adc57a6"
            startBlockNum = 100
            endBlockNum = 200

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.get_modified_storage_nodes_by_number(address, startBlockNum, endBlockNum)

            print(debug_response)
  /debug/blockchainInspection/preimage:
    post:
      summary: '[Inspection] debug_preimage'
      tags:
        - debug
      operationId: preimage
      description: |
        Returns the preimage for a sha3 hash, if known.

        :::note
        State-migrated databases may not contain preimages.
        :::

        **JSONRPC:** `debug_preimage`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: debug_preimage
                    params:
                      type: array
                      description: sha3 hash.
                      items:
                        title: Hash
                        type: string
                        example: '0xaf953a2d01f55cfe080c0c94150a60105e8ac3d51153058a1f03dd239dd08586'
      responses:
        '200':
          description: Returns the preimage for a sha3 hash, if known.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        title: preimage
                        type: string
                        description: Preimage for a sha3 hash.
                        example: '0xaf953a2d01f55cfe080c0c94150a60105e8ac3d51153058a1f03dd239dd08586'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/blockProfile/debug/preimage' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_preimage",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xaf953a2d01f55cfe080c0c94150a60105e8ac3d51153058a1f03dd239dd08586"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugPreimageResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugPreimageExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugPreImageExample() throws IOException {
                    String sha3Hash = "0xaf953a2d01f55cfe080c0c94150a60105e8ac3d51153058a1f03dd239dd08586";

                    DebugPreimageResponse response = w3.debugPreimage(sha3Hash).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const sha3Hash =
                "0xaf953a2d01f55cfe080c0c94150a60105e8ac3d51153058a1f03dd239dd08586";

              provider.debug
                .preimage(sha3Hash, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            sha3Hash = "0xaf953a2d01f55cfe080c0c94150a60105e8ac3d51153058a1f03dd239dd08586"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.preimage(sha3Hash)

            print(debug_response)
  /debug/blockchainInspection/printBlock:
    post:
      operationId: printBlock
      summary: '[Inspection] debug_printBlock'
      description: |
        Retrieves a block and returns its pretty printed form.

        **NOTE:** *In versions earlier than Klaytn v1.7.0, only integer type is available.*

        **JSONRPC:** `debug_printBlock`
      tags:
        - debug
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/PrintBlockReq'
      responses:
        '200':
          description: Return the dump of a block struct.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        description: Dump of a block struct.
                        example: "(*types.Block)(0xc4355b05a0)(Block(#65120): Size: 2.95 kB {\nMinerHash: 7a5f8d37d34be6d9d19c5f161756d607da62227bb725ddb2f372682d7a9f1445\nHeader(e96d6477acfeba8ba865c315020471dcf751aa1bddca77f469334ab0492d218f):\n[\n\tParentHash:       e768b5b7eeb1005fe130c26da744d47e042e9227cee675fa70c89ede38653aea\n\tCoinbase:         0000000000000000000000000000000000000000\n\tRewardbase:  ... 0000000000000000000000000000000000000000\n\tRoot:             4fd68a8f550cbd9ad665bc1a8021882ced5e1859fd9e28a48cb2910532b6ef27\n\tTxSha:            e3dbb8245038adcdc849de54af1d05f0c36c4c20d2710e31d525bd012d20a193\n\tReceiptSha:       212d4f453a897e2a486c86a4b120c1a850e89753865fe7f1aafa4"
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/printBlock' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_printBlock",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x80"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugPrintBlockResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugPrintBlockExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugPrintBlockExample() throws IOException {
                    String blockNumber = "0x80";

                    DebugPrintBlockResponse response = w3.debugPrintBlock(blockNumber).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockNumber = "0x80";

              provider.debug
                .printBlock(blockNumber, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockNumber = "0x80"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.print_block(blockNumber)

            print(debug_response)
  /debug/blockchainInspection/seedHash:
    post:
      operationId: seedHash
      summary: '[Inspection] debug_seedHash'
      description: |
        Retrieves the seed hash of a block.

        **JSONRPC:** `debug_seedHash`
      tags:
        - debug
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/SeedHashReq'
      responses:
        '200':
          description: The block seed hash.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        title: SeedHash
                        type: string
                        description: The block seed hash.
                        example: '0x0000000000000000000000000000000000000000000000000000000000000000'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/seedHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_seedHash",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [100]
            }'
  /debug/blockchainInspection/setHead:
    post:
      operationId: setHead
      summary: '[Inspection] debug_setHead'
      description: |
        Sets the current head of the local chain by block number.

        **WARNING:** This API is not yet implemented and always returns "not yet implemented API" error.

        **NOTE:** This is a destructive action and may severely damage your chain. Use with extreme caution.

        **JSONRPC:** `debug_setHead`
      tags:
        - debug
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: debug_setHead
                    params:
                      type: array
                      items:
                        title: number
                        type: string
                      description: The block number in hexadecimal string.
                      example:
                        - '0x100'
      responses:
        '200':
          description: Return "not yet implemented API" error.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        example: null
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/setHead' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_setHead",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x100"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugSetHeadResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugSetHeadExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugSetHeadExample() throws IOException {
                    DebugSetHeadResponse response = w3.debugSetHead("0x100").send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const number = "0x100";

              provider.debug
                .setHead(number, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            number = "0x100"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.set_head(number)

            print(debug_response)
  /debug/blockchainInspection/startCollectingTrieStats:
    post:
      operationId: startCollectingTrieStats
      summary: '[Inspection] debug_startCollectingTrieStats'
      description: |
        The startCollectingTrieStats iterates the latest state or storage trie to collect trie statistics. It collects storage trie statistics of the contract in the given address. If an empty address(="0x00...00") is given, it collects statistics of the whole state trie. Statistics will be logged every minute before end, containing overall and depth-by-depth information. The method returns an error if it fails in starting a task, or null if it successfully has started it.

        **JSONRPC:** `debug_startCollectingTrieStats`
      tags:
        - debug
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: debug_startCollectingTrieStats
                    params:
                      type: array
                      items:
                        type: string
                      description: Contract address
                      example:
                        - '0x0000000000000000000000000000000000000000'
      responses:
        '200':
          description: null if collecting trie statistics task is started, or an error if not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        description: null if collecting trie statistics task is started, or an error if not.
                        example: null
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/startCollectingTrieStats' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_startCollectingTrieStats",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x0000000000000000000000000000000000000000"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugStartCollectingTrieStatsResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugStartCollectingTrieStatsExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void whenRequestValid_ThenCall200ResponseReturns() throws IOException {
                    String address = "0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b";

                    DebugStartCollectingTrieStatsResponse response = w3.debugStartCollectingTrieStats(address).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const address = "0x0000000000000000000000000000000000000000";

              provider.debug
                .startCollectingTrieStats(address, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "0x0000000000000000000000000000000000000000"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.start_collecting_trie_stats(address)

            print(debug_response)
  /debug/blockchainInspection/startContractWarmUp:
    post:
      operationId: startContractWarmUp
      summary: '[Inspection] debug_startContractWarmUp'
      description: |
        The startContractWarmUp iterates the latest storage trie of the given contract address to warm-up the trie cache. The iteration will be automatically stopped if 90% of the trie cache is full. The method returns an error if it fails in starting a warm-up or the given address is not a contract address, or null if it successfully has started it.

        **JSONRPC:** `debug_startContractWarmUp`
      tags:
        - debug
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: debug_startContractWarmUp
                    params:
                      type: array
                      items:
                        type: string
                      description: Contract address
                      example:
                        - '0x4Cd39B49064a31E966cA0ddF4111aCe2eD7E9502'
      responses:
        '200':
          description: Return null if a warm-up is started, or an error if not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        title: StartContractWarmUpResult
                        type: string
                        description: null if a warm-up is started, or an error if not.
                        example: null
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/startContractWarmUp' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_startContractWarmUp",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xfD1d63a152f7A7Ef14bd157C1c73c5bC3239EA5D"]
            }'
        - lang: java
          label: Java
          source: |
            import java.io.IOException;

            import org.web3j.protocol.klaytn.core.method.response.DebugStartContractWarmUpResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            public class DebugStartContractWarmUpExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));  void debugStartContractWarmUpExample() throws IOException {
                String address = "0xfD1d63a152f7A7Ef14bd157C1c73c5bC3239EA5D";

                DebugStartContractWarmUpResponse response = w3.debugStartContractWarmUp(address).send();
                response.getResult();
              }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const address = "0x4Cd39B49064a31E966cA0ddF4111aCe2eD7E9502";

              provider.debug
                .startContractWarmUp(address, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "0x4Cd39B49064a31E966cA0ddF4111aCe2eD7E9502"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.start_contract_warm_up(address)

            print(debug_response)
  /debug/blockchainInspection/startWarmUp:
    post:
      operationId: startWarmUp
      summary: '[Inspection] debug_startWarmUp'
      description: |
        The startWarmUp iterates the latest state trie to warm-up the trie cache. The iteration will be automatically stopped if 90% of the trie cache is full. The method returns an error if it fails in starting a warm-up, or null if it successfully has started it.

        **JSONRPC:** `debug_startWarmUp`
      tags:
        - debug
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - type: object
                  properties:
                    method:
                      type: string
                      default: debug_startWarmUp
      responses:
        '200':
          description: Return null if a warm-up is started, or an error if not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: string
                        description: null if a warm-up is started, or an error if not.
                        example: null
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/startWarmUp' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_startWarmUp",
              "id": 1,
              "jsonrpc": "2.0"
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugStartWarmUpResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugStartWarmUpExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugStartWarmUpExample() throws IOException {
                    DebugStartWarmUpResponse response = w3.debugStartWarmUp().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.debug
                .startWarmUp({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.start_warm_up()

            print(debug_response)
  /debug/blockchainInspection/stopWarmUp:
    post:
      operationId: stopWarmUp
      summary: '[Inspection] debug_stopWarmUp'
      description: |
        The stopWarmUp stops the currently running warm-up. This method takes no parameters, and returns null or an error depending on a warm-up was stopped or not.

        **JSONRPC:** `debug_stopWarmUp`
      tags:
        - debug
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
      responses:
        '200':
          description: null if a warm-up is stopped, or an error if not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        title: StopWarmUpResult
                        type: string
                        description: null if a warm-up is stopped, or an error if not.
                        example: null
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/stopWarmUp' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_stopWarmUp",
              "id": 1,
              "jsonrpc": "2.0"
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugStopWarmUpResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugStopWarmUpExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void whenRequestValid_ThenCall200ResponseReturns() throws IOException {
                    DebugStopWarmUpResponse response = w3.debugStopWarmUp().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.debug
                .stopWarmUp({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.stop_warm_up()

            print(debug_response)
  /debug/blockchainInspection/storageRangeAt:
    post:
      operationId: storageRangeAt
      summary: '[Inspection] debug_storageRangeAt'
      description: |
        StorageRangeAt returns the storage of a contract account at the given block height and transaction index.

        :::note
        The 'key' field of the results is 'null' when the preimage is not available in the database. State-migrated databases may not contain preimages.
        :::

        **JSONRPC:** `debug_storageRangeAt`
      tags:
        - debug
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugStorageRangeAtReq'
      responses:
        '200':
          description: StorageRangeResult
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        type: object
                        required:
                          - nextKey
                          - storage
                        properties:
                          nextKey:
                            type: string
                            format: hex
                          storage:
                            type: object
                        example:
                          storage:
                            '0x12064c130a62c085dd9ba4147b9e43e285b1921382e917b5a98305165129cb3b':
                              key: null
                              value: '0x000000000000000000000000000000000000000000000000000000005d1d6611'
                            '0x12346954c5309ce51729175ca19b6bb93557ad3cc62db86930c4792fae900e1f':
                              key: '0x45a6893cb17fdefbdab6c4445329be181dfbbd45d77ee7d0365c2b0f0dca7f62'
                              value: '0x000000000000000000000000368dd4c4d9eaadba63d03d46d763524ccf6ee4ed'
                            '0x1258923c5f06b2271566794565770dc787ab3c85131dbb47439174be4e9804fb':
                              key: '0xc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2d2'
                              value: '0x000000000000000000000000d5b717457df52a59856394e9310e2cdd62cded6f'
                          nextKey: '0x127da8558d24c1f64ea135cfd82539481d0b47fb00337215358718d6006d9ba4'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/storageRangeAt' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_storageRangeAt",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x90c81195698bc9f282bbdec386b0afb4dcc28e43aae834894281c3ecb3c88d21", 1, "0x73a7d19d14f7dfac5b799e405e22133b2adc57a6", "0x12", 1]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugStorageRangeAtResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugStorageRangeAtExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugStorageRangeAtExample() throws IOException {
                    String blockHash = "0x90c81195698bc9f282bbdec386b0afb4dcc28e43aae834894281c3ecb3c88d21";
                    int txIndex = 1;
                    String contractAddress = "0x73a7d19d14f7dfac5b799e405e22133b2adc57a6";
                    String keyStart = "0x12";
                    int maxResult = 1;

                    DebugStorageRangeAtResponse response = w3.debugStorageRangeAt(blockHash, txIndex, contractAddress, keyStart, maxResult).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockHash =
                "0x90c81195698bc9f282bbdec386b0afb4dcc28e43aae834894281c3ecb3c88d21";
              const txIndex = 1;
              const contractAddress = "0x73a7d19d14f7dfac5b799e405e22133b2adc57a6";
              const keyStart = "0x12";
              const maxResult = 1;

              provider.debug
                .storageRangeAt(
                  blockHash,
                  txIndex,
                  contractAddress,
                  keyStart,
                  maxResult,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0x90c81195698bc9f282bbdec386b0afb4dcc28e43aae834894281c3ecb3c88d21"
            txIndex = 1
            address = "0x73a7d19d14f7dfac5b799e405e22133b2adc57a6"
            keyStart = "0x12"
            maxResult = 1

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.storage_range_at(blockHash, txIndex, address, keyStart, maxResult)

            print(debug_response)
  /debug/vMTracing/traceBadBlock:
    post:
      summary: '[Trace] debug_traceBadBlock'
      tags:
        - debug
      operationId: traceBadBlock
      description: |
        The traceBadBlock method will return a full stack trace of all invoked opcodes of all transactions that were included in this block.

        **NOTE:** the parent of this block must be present or it will fail.

        **JSONRPC:** `debug_traceBadBlock`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugTraceBadBlockReq'
      responses:
        '200':
          description: The structured logs created during the execution of KLVM.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugTraceBadBlockResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/traceBadBlock' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_traceBadBlock",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x1d5ba00e313a81ae6d409d459c153327072665d9ea2f47608369722baf0cfbb6"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugTraceBadBlockResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugTraceBadBlockExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugTraceBadBlockExample() throws IOException {
                    String blockHash = "0x1d5ba00e313a81ae6d409d459c153327072665d9ea2f47608369722baf0cfbb6";

                    DebugTraceBadBlockResponse response = w3.debugTraceBadBlock(blockHash, null).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockHash =
                "0x1d5ba00e313a81ae6d409d459c153327072665d9ea2f47608369722baf0cfbb6";

              provider.debug
                .traceBadBlock(blockHash, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0x1d5ba00e313a81ae6d409d459c153327072665d9ea2f47608369722baf0cfbb6"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.trace_bad_block(blockHash)

            print(debug_response)
  /debug/vMTracing/traceBlock:
    post:
      summary: '[Trace] debug_traceBlock'
      tags:
        - debug
      operationId: traceBlock
      description: |
        The traceBlock method will return a full stack trace of all invoked opcodes of all transactions that were included in this block.

        **NOTE:** the parent of this block must be present or it will fail.

        **JSONRPC:** `debug_traceBlock`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugTraceBlockReq'
      responses:
        '200':
          description: The structured logs created during the execution of KLVM.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugTraceBlockResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/traceBlock' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_traceBlock",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xf9059ef9033ea0b3fdad1b5407c0e9b05615a7f4187046387cdc2fb25bbb15152e9113a93b79e794a86fd667c6a340c53cc5d796ba84dbe1f29cb2f7a0d6e1c132b8f7167b134db1f564898c1e969fa491a7d9569fbea6bbd7e549c28ea082fec4a7ffeabaacda60293276c3048911a496d3613fabaccd336bf517209b4ba0ce610626f0d277da8690e3733cfac2bbbf4e60d6a21066318c33b8ab38860d4cbfb583051e7c84644836443ab90187d683010a02846b6c617986676f312e3138856c696e7578000000000000000000f90164f85494571e53df607be97431a5bbefca1dffe5aef56f4d945cb1a7dccbd0dc446e3640898ede8820368554c89499fb17d324fa0e07f23b49d09028ac0919414db694b74ff9dea397fe9e231df545eb53fe2adf776cb2b841e567386ed4da423bd5979b0807d330cc61f290e0e1fb16718be8990a7d94baa94fff36abe1b957bd9bfb6f05a72e0501c2f6841db208594079c01d222306ca0d00f8c9b841472c3b009c531094beac9050329840e695daad3d4cad64536b53237ddfc153f55d284fcaa8b558309ef2190aa453c5f8577240d62a8eb52d98d7887407c5a9d901b841e4f780bcd37a5454a9a7c73ef463d44fa8ac10f20a0ae6f71dd4da77124d98f1388c6b0de1ab60ca89890b583af3f3e95802543ee859c19876b6842120f0a9a600b84140e74ee691d07e3194609fed2931c8801185a4f512a251649f106ed53dcc3f2e1a51b43eca7d91faf93922db35b06f579286bbc5dc0296319324eb1c59907af70080808505d21dba00f9025a31f8e380850ba43b74008405f5e10094fdeedbb2fe5b48d5b49e435ba00e0358740d0cf58094f00e108b66c543d7478461fe75733553b14993c284552984b3f847f8458207f6a03b12c0fd9df13cc079eb1765fbfb2752503421a253ac2f280ae8bf1eb2cb45b1a04860aa0b7c3a3ec80071477a1141d6df614cbdb886c5fe7e9bbcb532a00539f59449f16029074d13890ac9fe589cc913ffd58d39a8f847f8458207f6a03784c05e3ec8a7737df6c09b0a6674ea825e943b3dc6acc2120ada04e5d21904a028c0cd7df839740d610470f7d0d57b25832b9fed8a478f0e5552366a4671c2027802f8b68203e98302440f8459682f00850bfda3a300830493e09408e2425ce1fa5f8eb006d3898c48c5d3de44b79580b844202ee0ed00000000000000000000000000000000000000000000000000000000000244040000000000000000000000000000000000000000000000000000000005f5a0dac001a07f37d46064be9d403d7c589fb6c02b2433acaf4e2d0daf2391fc56383ff6cffca043ac3acd3e3acd4c989c8a449392ec4b488b850b1e40e8558f14b81dc64cbaff7802f8b68203e9830243048459682f00850bfda3a300830493e0944d92f10a23e28ab11d2d39325b9db0fd0504520d80b844202ee0ed00000000000000000000000000000000000000000000000000000000000242fc00000000000000000000000000000000000000000000000000000007cc6e734fc080a0f8e9f3404be26aa9a7c351cdd28eb1b605987c81f65d5be73c0cc79cfafedd20a05cad9db4cc8b7f8d1836383c8744a595a95506407fbbe77a74827b4b46176fe4"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugTraceBlockResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugTraceBlockExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugTraceBlockExample() throws IOException {
                    String blockRlp = "0xf9059ef9033ea0b3fdad1b5407c0e9b05615a7f4187046387cdc2fb25bbb15152e9113a93b79e794a86fd667c6a340c53cc5d796ba84dbe1f29cb2f7a0d6e1c132b8f7167b134db1f564898c1e969fa491a7d9569fbea6bbd7e549c28ea082fec4a7ffeabaacda60293276c3048911a496d3613fabaccd336bf517209b4ba0ce610626f0d277da8690e3733cfac2bbbf4e60d6a21066318c33b8ab38860d4cbfb583051e7c84644836443ab90187d683010a02846b6c617986676f312e3138856c696e7578000000000000000000f90164f85494571e53df607be97431a5bbefca1dffe5aef56f4d945cb1a7dccbd0dc446e3640898ede8820368554c89499fb17d324fa0e07f23b49d09028ac0919414db694b74ff9dea397fe9e231df545eb53fe2adf776cb2b841e567386ed4da423bd5979b0807d330cc61f290e0e1fb16718be8990a7d94baa94fff36abe1b957bd9bfb6f05a72e0501c2f6841db208594079c01d222306ca0d00f8c9b841472c3b009c531094beac9050329840e695daad3d4cad64536b53237ddfc153f55d284fcaa8b558309ef2190aa453c5f8577240d62a8eb52d98d7887407c5a9d901b841e4f780bcd37a5454a9a7c73ef463d44fa8ac10f20a0ae6f71dd4da77124d98f1388c6b0de1ab60ca89890b583af3f3e95802543ee859c19876b6842120f0a9a600b84140e74ee691d07e3194609fed2931c8801185a4f512a251649f106ed53dcc3f2e1a51b43eca7d91faf93922db35b06f579286bbc5dc0296319324eb1c59907af70080808505d21dba00f9025a31f8e380850ba43b74008405f5e10094fdeedbb2fe5b48d5b49e435ba00e0358740d0cf58094f00e108b66c543d7478461fe75733553b14993c284552984b3f847f8458207f6a03b12c0fd9df13cc079eb1765fbfb2752503421a253ac2f280ae8bf1eb2cb45b1a04860aa0b7c3a3ec80071477a1141d6df614cbdb886c5fe7e9bbcb532a00539f59449f16029074d13890ac9fe589cc913ffd58d39a8f847f8458207f6a03784c05e3ec8a7737df6c09b0a6674ea825e943b3dc6acc2120ada04e5d21904a028c0cd7df839740d610470f7d0d57b25832b9fed8a478f0e5552366a4671c2027802f8b68203e98302440f8459682f00850bfda3a300830493e09408e2425ce1fa5f8eb006d3898c48c5d3de44b79580b844202ee0ed00000000000000000000000000000000000000000000000000000000000244040000000000000000000000000000000000000000000000000000000005f5a0dac001a07f37d46064be9d403d7c589fb6c02b2433acaf4e2d0daf2391fc56383ff6cffca043ac3acd3e3acd4c989c8a449392ec4b488b850b1e40e8558f14b81dc64cbaff7802f8b68203e9830243048459682f00850bfda3a300830493e0944d92f10a23e28ab11d2d39325b9db0fd0504520d80b844202ee0ed00000000000000000000000000000000000000000000000000000000000242fc00000000000000000000000000000000000000000000000000000007cc6e734fc080a0f8e9f3404be26aa9a7c351cdd28eb1b605987c81f65d5be73c0cc79cfafedd20a05cad9db4cc8b7f8d1836383c8744a595a95506407fbbe77a74827b4b46176fe4";

                    DebugTraceBlockResponse response = w3.debugTraceBlock(blockRlp, null).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockRlp =
                "0xf9059ef9033ea0b3fdad1b5407c0e9b05615a7f4187046387cdc2fb25bbb15152e9113a93b79e794a86fd667c6a340c53cc5d796ba84dbe1f29cb2f7a0d6e1c132b8f7167b134db1f564898c1e969fa491a7d9569fbea6bbd7e549c28ea082fec4a7ffeabaacda60293276c3048911a496d3613fabaccd336bf517209b4ba0ce610626f0d277da8690e3733cfac2bbbf4e60d6a21066318c33b8ab38860d4cbfb583051e7c84644836443ab90187d683010a02846b6c617986676f312e3138856c696e7578000000000000000000f90164f85494571e53df607be97431a5bbefca1dffe5aef56f4d945cb1a7dccbd0dc446e3640898ede8820368554c89499fb17d324fa0e07f23b49d09028ac0919414db694b74ff9dea397fe9e231df545eb53fe2adf776cb2b841e567386ed4da423bd5979b0807d330cc61f290e0e1fb16718be8990a7d94baa94fff36abe1b957bd9bfb6f05a72e0501c2f6841db208594079c01d222306ca0d00f8c9b841472c3b009c531094beac9050329840e695daad3d4cad64536b53237ddfc153f55d284fcaa8b558309ef2190aa453c5f8577240d62a8eb52d98d7887407c5a9d901b841e4f780bcd37a5454a9a7c73ef463d44fa8ac10f20a0ae6f71dd4da77124d98f1388c6b0de1ab60ca89890b583af3f3e95802543ee859c19876b6842120f0a9a600b84140e74ee691d07e3194609fed2931c8801185a4f512a251649f106ed53dcc3f2e1a51b43eca7d91faf93922db35b06f579286bbc5dc0296319324eb1c59907af70080808505d21dba00f9025a31f8e380850ba43b74008405f5e10094fdeedbb2fe5b48d5b49e435ba00e0358740d0cf58094f00e108b66c543d7478461fe75733553b14993c284552984b3f847f8458207f6a03b12c0fd9df13cc079eb1765fbfb2752503421a253ac2f280ae8bf1eb2cb45b1a04860aa0b7c3a3ec80071477a1141d6df614cbdb886c5fe7e9bbcb532a00539f59449f16029074d13890ac9fe589cc913ffd58d39a8f847f8458207f6a03784c05e3ec8a7737df6c09b0a6674ea825e943b3dc6acc2120ada04e5d21904a028c0cd7df839740d610470f7d0d57b25832b9fed8a478f0e5552366a4671c2027802f8b68203e98302440f8459682f00850bfda3a300830493e09408e2425ce1fa5f8eb006d3898c48c5d3de44b79580b844202ee0ed00000000000000000000000000000000000000000000000000000000000244040000000000000000000000000000000000000000000000000000000005f5a0dac001a07f37d46064be9d403d7c589fb6c02b2433acaf4e2d0daf2391fc56383ff6cffca043ac3acd3e3acd4c989c8a449392ec4b488b850b1e40e8558f14b81dc64cbaff7802f8b68203e9830243048459682f00850bfda3a300830493e0944d92f10a23e28ab11d2d39325b9db0fd0504520d80b844202ee0ed00000000000000000000000000000000000000000000000000000000000242fc00000000000000000000000000000000000000000000000000000007cc6e734fc080a0f8e9f3404be26aa9a7c351cdd28eb1b605987c81f65d5be73c0cc79cfafedd20a05cad9db4cc8b7f8d1836383c8744a595a95506407fbbe77a74827b4b46176fe4";

              provider.debug
                .traceBlock(blockRlp, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockRlp = "0xf9059ef9033ea0b3fdad1b5407c0e9b05615a7f4187046387cdc2fb25bbb15152e9113a93b79e794a86fd667c6a340c53cc5d796ba84dbe1f29cb2f7a0d6e1c132b8f7167b134db1f564898c1e969fa491a7d9569fbea6bbd7e549c28ea082fec4a7ffeabaacda60293276c3048911a496d3613fabaccd336bf517209b4ba0ce610626f0d277da8690e3733cfac2bbbf4e60d6a21066318c33b8ab38860d4cbfb583051e7c84644836443ab90187d683010a02846b6c617986676f312e3138856c696e7578000000000000000000f90164f85494571e53df607be97431a5bbefca1dffe5aef56f4d945cb1a7dccbd0dc446e3640898ede8820368554c89499fb17d324fa0e07f23b49d09028ac0919414db694b74ff9dea397fe9e231df545eb53fe2adf776cb2b841e567386ed4da423bd5979b0807d330cc61f290e0e1fb16718be8990a7d94baa94fff36abe1b957bd9bfb6f05a72e0501c2f6841db208594079c01d222306ca0d00f8c9b841472c3b009c531094beac9050329840e695daad3d4cad64536b53237ddfc153f55d284fcaa8b558309ef2190aa453c5f8577240d62a8eb52d98d7887407c5a9d901b841e4f780bcd37a5454a9a7c73ef463d44fa8ac10f20a0ae6f71dd4da77124d98f1388c6b0de1ab60ca89890b583af3f3e95802543ee859c19876b6842120f0a9a600b84140e74ee691d07e3194609fed2931c8801185a4f512a251649f106ed53dcc3f2e1a51b43eca7d91faf93922db35b06f579286bbc5dc0296319324eb1c59907af70080808505d21dba00f9025a31f8e380850ba43b74008405f5e10094fdeedbb2fe5b48d5b49e435ba00e0358740d0cf58094f00e108b66c543d7478461fe75733553b14993c284552984b3f847f8458207f6a03b12c0fd9df13cc079eb1765fbfb2752503421a253ac2f280ae8bf1eb2cb45b1a04860aa0b7c3a3ec80071477a1141d6df614cbdb886c5fe7e9bbcb532a00539f59449f16029074d13890ac9fe589cc913ffd58d39a8f847f8458207f6a03784c05e3ec8a7737df6c09b0a6674ea825e943b3dc6acc2120ada04e5d21904a028c0cd7df839740d610470f7d0d57b25832b9fed8a478f0e5552366a4671c2027802f8b68203e98302440f8459682f00850bfda3a300830493e09408e2425ce1fa5f8eb006d3898c48c5d3de44b79580b844202ee0ed00000000000000000000000000000000000000000000000000000000000244040000000000000000000000000000000000000000000000000000000005f5a0dac001a07f37d46064be9d403d7c589fb6c02b2433acaf4e2d0daf2391fc56383ff6cffca043ac3acd3e3acd4c989c8a449392ec4b488b850b1e40e8558f14b81dc64cbaff7802f8b68203e9830243048459682f00850bfda3a300830493e0944d92f10a23e28ab11d2d39325b9db0fd0504520d80b844202ee0ed00000000000000000000000000000000000000000000000000000000000242fc00000000000000000000000000000000000000000000000000000007cc6e734fc080a0f8e9f3404be26aa9a7c351cdd28eb1b605987c81f65d5be73c0cc79cfafedd20a05cad9db4cc8b7f8d1836383c8744a595a95506407fbbe77a74827b4b46176fe4"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.trace_block(blockRlp)

            print(debug_response)
  /debug/vMTracing/traceBlockByHash:
    post:
      summary: '[Trace] debug_traceBlockByHash'
      tags:
        - debug
      operationId: traceBlockByHash
      description: |
        Similar to debug_traceBlock, traceBlockByHash accepts a block hash and will replay the block that is already present in the database.

        **JSONRPC:** `debug_traceBlockByHash`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugTraceBlockByHashReq'
      responses:
        '200':
          description: The structured logs created during the execution of KLVM.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugTraceBlockByHashResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/traceBlockByHash' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_traceBlockByHash",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xed110b330152df2022d40fa3c38987643034aa56fc96079fb6c67b66a6ed4f19"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugTraceBlockByHashResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugTraceBlockByHashExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugTraceBlockByHashExample() throws IOException {
                    String blockHash = "0xed110b330152df2022d40fa3c38987643034aa56fc96079fb6c67b66a6ed4f19";

                    DebugTraceBlockByHashResponse response = w3.debugTraceBlockByHash(blockHash, null).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockHash =
                "0xed110b330152df2022d40fa3c38987643034aa56fc96079fb6c67b66a6ed4f19";

              provider.debug
                .traceBlockByHash(blockHash, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0xed110b330152df2022d40fa3c38987643034aa56fc96079fb6c67b66a6ed4f19"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.trace_block_by_hash(blockHash)

            print(debug_response)
  /debug/vMTracing/traceBlockByNumber:
    post:
      summary: '[Trace] debug_traceBlockByNumber'
      tags:
        - debug
      operationId: traceBlockByNumber
      description: |
        Similar to debug_traceBlock, traceBlockByNumber accepts a block number and will replay the block that is already present in the database.

        **JSONRPC:** `debug_traceBlockByNumber`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugTraceBlockByNumberReq'
      responses:
        '200':
          description: The structured logs created during the execution of KLVM.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugTraceBlockByNumberResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/traceBlockByNumber' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_traceBlockByNumber",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [1449]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugTraceBlockByNumberResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugTraceBlockByNumberExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugTraceBlockByNumberExample() throws IOException {
                    int blockNum = 21;

                    DebugTraceBlockByNumberResponse response = w3.debugTraceBlockByNumber(blockNum, null).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const block = 2459;

              provider.debug
                .traceBlockByNumber(block, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            number = 21

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.trace_block_by_number(number)

            print(debug_response)
  /debug/vMTracing/traceBlockByNumberRange:
    post:
      summary: '[Trace] debug_traceBlockByNumberRange'
      tags:
        - debug
      operationId: traceBlockByNumberRange
      description: |
        Returns the structured logs created during the execution of EVM between two blocks (including start) as a JSON object. That is, the result of tracing for a total of end-start+1 blocks is returned.

        **NOTE:** Don't trace too many blocks at the same time as it can overuse machine resources.

        **JSONRPC:** `debug_traceBlockByNumberRange`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugTraceBlockByNumberRangeReq'
      responses:
        '200':
          description: Value contains the structured logs created during the execution of KLVM.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugTraceBlockByNumberRangeResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/traceBlockByNumberRange' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_traceBlockByNumberRange",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [21, 22]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugTraceBlockByNumberRangeResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugTraceBlockByNumberRangeExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugTraceBlockByNumberRangeExample() throws IOException {
                    int startBlockNum = 21;
                    int endBlockNum = 30;

                    DebugTraceBlockByNumberRangeResponse response = w3.debugTraceBlockByNumberRange(startBlockNum, endBlockNum, null).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const startBlock = 21;
              const endBlock = 30;

              provider.debug
                .traceBlockByNumberRange(
                  startBlock,
                  endBlock,
                  {},
                  (err, data, response) => {},
                )
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            startBlock = 21
            endBlock = 22

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.trace_block_by_number_range(startBlock, endBlock)

            print(debug_response)
  /debug/vMTracing/traceBlockFromFile:
    post:
      summary: '[Trace] debug_traceBlockFromFile'
      tags:
        - debug
      operationId: traceBlockFromFile
      description: |
        Similar to debug_traceBlock, traceBlockFromFile accepts a file containing the RLP of the block.

        **NOTE:** the file must include the associated hexadecimal string without 0x.

        **JSONRPC:** `debug_traceBlockFromFile`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugTraceBlockFromFileReq'
      responses:
        '200':
          description: The structured logs created during the execution of KLVM.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugTraceBlockFromFileResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/traceBlockFromFile' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_traceBlockFromFile",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["/home/sotatek/block.rlp"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugTraceBlockFromFileResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugTraceBlockFromFileExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void whenRequestValid_ThenCall200ResponseReturns() throws IOException {
                    String fileName = "/home/sotatek/block.rlp";

                    DebugTraceBlockFromFileResponse response = w3.debugTraceBlockFromFile(fileName, null).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const fileName = "/home/sotatek/block.rlp";

              provider.debug
                .traceBlockFromFile(fileName, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            fileName = "/home/sotatek/block.rlp";

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.trace_block_from_file(fileName)

            print(debug_response)
  /debug/vMTracing/traceChain:
    post:
      summary: '[Trace] debug_traceChain'
      tags:
        - debug
      operationId: traceChain
      description: |
        Returns the structured logs created during the execution of EVM between two blocks (excluding start) as a JSON object. This endpoint must be invoked via debug_subscribe as follows:

        **NOTE:** Don't trace too many blocks at the same time as it can overuse machine resources.

        **JSONRPC:** `debug_traceChain`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugTraceChainReq'
      responses:
        '200':
          description: Returns the structured logs created during the execution of EVM between two blocks as a JSON object.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugTraceChainResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: "curl -X 'POST' \\\n\_ 'https://api.baobab.klaytn.net:8651/debug/traceChain' \\\n\_ -H 'accept: application/json' \\\n\_ -H 'Content-Type: application/json' \\\n\_ -d '{\n\_ \"method\": \"debug_traceChain\",\n\_ \"id\": 1,\n\_ \"jsonrpc\": \"2.0\",\n\_ \"params\": [21, 30, {}]\n}'\n\n"
  /debug/vMTracing/traceTransaction:
    post:
      summary: '[Trace] debug_traceTransaction'
      tags:
        - debug
      operationId: traceTransaction
      description: |
        The traceTransaction debugging method will attempt to run the transaction in the exact same manner as it was executed on the network. It will replay any transaction that may have been executed prior to this one before it will finally attempt to execute the transaction that corresponds to the given hash.

        **JSONRPC:** `debug_traceTransaction`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugTraceTransactionReq'
      responses:
        '200':
          description: The structured logs created during the execution of KLVM.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugTraceTransactionResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/traceTransaction' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_traceTransaction",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x344fc43b5b87984d5a50fe2c54e121f94945ba9ff9da20f9de0f1b4914f47055"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugTraceTransactionResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugTraceTransactionExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugTraceTransactionExample() throws IOException {
                    String txHash = "0x21b2919b89278ca786226f10edbaadced7381dbd73df546a4823547aaebffa58";

                    DebugTraceTransactionResponse response = w3.debugTraceTransaction(txHash, null).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const txHash =
                "0x344fc43b5b87984d5a50fe2c54e121f94945ba9ff9da20f9de0f1b4914f47055";

              provider.debug
                .traceTransaction(txHash, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            txHash = "0x07f6057bc93aca52e53cdbfac9b9830f6a9cae2b3f48f0b47e4cb54959143d09"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.trace_transaction(txHash)

            print(debug_response)
  /debug/vMTracing/traceCall:
    post:
      summary: '[Trace] debug_traceCall'
      tags:
        - debug
      operationId: traceCall
      description: |
        The debug_traceCall allows tracing on a specific block if callArgs is provided.

        **JSONRPC:** `debug_traceCall`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugTraceCallReq'
      responses:
        '200':
          description: The detail tracing infomation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/traceCall' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_traceCall",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [{"to":"0x46eda75e7ca73cb1c2f83c3927211655420dbc44","data":"0x3fb5c1cb00000000000000000000000000000000000000000000000000000000000003e7"}, "latest", {"tracer":"revertTracer"}]
            }'
        - lang: java
          label: Java
          source: |
            import org.web3j.protocol.klaytn.core.method.response.DebugTraceBadBlockResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugTraceBadBlockExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));

                void debugTraceCallExample() throws IOException {
                    Object tracerCallObject = {"to":"0x46eda75e7ca73cb1c2f83c3927211655420dbc44","data":"0x3fb5c1cb00000000000000000000000000000000000000000000000000000000000003e7"}
                    String blockNumber = "latest"
                    Object traceObject = {"tracer":"revertTracer"}
                    DebugTraceCallResponse response = w3.debugTraceCall(tracerCallObject, blockNumber, traceObject, null).send();
                    
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");

            (async () => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const tracerCallObject = {
                to: "0x46eda75e7ca73cb1c2f83c3927211655420dbc44",
                data: "0x3fb5c1cb00000000000000000000000000000000000000000000000000000000000003e7",
              };
              const blockNumber = "latest";
              const options = { tracer: "revertTracer" };

              // The full list of JSON-RPC is available at:
              // https://docs.klaytn.foundation/content/dapp/json-rpc/api-references
              const data = await provider.debug.traceCall(
                tracerCallObject,
                blockNumber,
                options,
              );
              console.log("Trace call", data);
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            tracerCallObject = {"to":"0x46eda75e7ca73cb1c2f83c3927211655420dbc44","data":"0x3fb5c1cb00000000000000000000000000000000000000000000000000000000000003e7"};
            blockNumber = "latest"
            options = {"tracer":"revertTracer"}
            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.trace_call(tracerCallObject, blockNumber, options)

            print(debug_response)
  /debug/vMStandardTracing/standardTraceBadBlockToFile:
    post:
      summary: '[StandardTrace] debug_standardTraceBadBlockToFile'
      tags:
        - debug
      operationId: standardTraceBadBlockToFile
      description: |
        Similar to debug_traceBadBlock, standardTraceBadBlockToFile accepts a bad block hash and will replay the bad block. It returns a list of file names containing tracing result. Note that the files will be stored in the machine that serves this API.

        **JSONRPC:** `debug_standardTraceBadBlockToFile`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugStandardTraceBadBlockToFileReq'
      responses:
        '200':
          description: Returns a list of file names containing tracing result
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugStandardTraceBadBlockToFileResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/standardTraceBadBlockToFile' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_standardTraceBadBlockToFile",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0x2d05db16efa693a14a26feb6c1bafa4b2ac4ecabdaf3ed5f965bb38bc91eba62"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugStandardTraceBadBlockToFileResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugStandardTraceBadBlockToFileExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugStandardTraceBlockToFileExample() throws IOException {
                    String blockHash = "0x1d5ba00e313a81ae6d409d459c153327072665d9ea2f47608369722baf0cfbb6";

                    DebugStandardTraceBadBlockToFileResponse response = w3.debugStandardTraceBadBlockToFile(blockHash, null).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockHash =
                "0x1d5ba00e313a81ae6d409d459c153327072665d9ea2f47608369722baf0cfbb6";

              provider.debug
                .standardTraceBadBlockToFile(blockHash, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0x1d5ba00e313a81ae6d409d459c153327072665d9ea2f47608369722baf0cfbb6"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.standard_trace_bad_block_to_file(blockHash)

            print(debug_response)
  /debug/vMStandardTracing/standardTraceBlockToFile:
    post:
      summary: '[StandardTrace] debug_standardTraceBlockToFile'
      tags:
        - debug
      operationId: standardTraceBlockToFile
      description: |
        Similar to debug_traceBlock, standardTraceBlockToFile accepts a block hash and will replay the block that is already present in the database. It returns a list of file names containing tracing result. Note that the files will be stored in the machine that serves this API.

        **JSONRPC:** `debug_standardTraceBlockToFile`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugStandardTraceBlockToFileReq'
      responses:
        '200':
          description: A list of file names.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugStandardTraceBlockToFileResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/standardTraceBlockToFile' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_standardTraceBlockToFile",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["0xf1b4df5d4457d4771740887eeb46de3fc26ae4cddf93d69b1b237c2366ff12eb"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugStandardTraceBlockToFileResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugStandardTraceBlockToFileExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugStandardTraceBlockToFileExample() throws IOException {
                    String blockHash = "0xf1b4df5d4457d4771740887eeb46de3fc26ae4cddf93d69b1b237c2366ff12eb";

                    DebugStandardTraceBlockToFileResponse response = w3.debugStandardTraceBlockToFile(blockHash, null).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const blockHash =
                "0xdabbc6a0d2619c56db4645c4e85799af9927bdf3bd13d0c77e49db413e3db9f3";

              provider.debug
                .standardTraceBlockToFile(blockHash, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            blockHash = "0x1d5ba00e313a81ae6d409d459c153327072665d9ea2f47608369722baf0cfbb6"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.standard_trace_block_to_file(blockHash)

            print(debug_response)
  /debug/runtimeTracing/goTrace:
    post:
      summary: '[RuntimeTrace] debug_goTrace'
      tags:
        - debug
      operationId: goTrace
      description: |
        Turns on Go runtime tracing for the given duration and writes trace data to disk.

        **JSONRPC:** `debug_goTrace`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugGoTraceReq'
      responses:
        '200':
          description: Turns on Go runtime tracing for the given duration and writes trace data to disk.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugGoTraceResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/goTrace' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_goTrace",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["go.trace",5]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugGoTraceResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugGoTraceExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugGoTraceExample() throws IOException {
                    String file = "go.trace";
                    int seconds = 5;

                    DebugGoTraceResponse response = w3.debugGoTrace(file, seconds).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const file = "go.trace";
              const seconds = 5;

              provider.debug
                .goTrace(file, seconds, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            fileName = "go.trace"
            seconds = 5

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.go_trace(fileName, seconds)

            print(debug_response)
  /debug/runtimeTracing/startGoTrace:
    post:
      summary: '[RuntimeTrace] debug_startGoTrace'
      tags:
        - debug
      operationId: startGoTrace
      description: |
        Starts writing a Go runtime trace to the given file.

        **JSONRPC:** `debug_startGoTrace`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugStartGoTraceReq'
      responses:
        '200':
          description: Starts writing a Go runtime trace to the given file.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugStartGoTraceResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/startGoTrace' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_startGoTrace",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["go.trace"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugStartGoTraceResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugStartGoTraceExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugStartGoTraceExample() throws IOException {
                    String file = "go.trace";

                    DebugStartGoTraceResponse response = w3.debugStartGoTrace(file).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const file = "go.trace";

              provider.debug
                .startGoTrace(file, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            fileName = "go.trace"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.start_go_trace(fileName)

            print(debug_response)
  /debug/runtimeTracing/stopGoTrace:
    post:
      summary: '[RuntimeTrace] debug_stopGoTrace'
      tags:
        - debug
      operationId: stopGoTrace
      description: |
        Stops writing the Go runtime trace.

        **JSONRPC:** `debug_stopGoTrace`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugStopGoTraceReq'
      responses:
        '200':
          description: Stops writing the Go runtime trace.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugStopGoTraceResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/stopGoTrace' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_stopGoTrace",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugStopGoTraceResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugStopGoTraceExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugStopGoTraceExample() throws IOException {
                    DebugStopGoTraceResponse response = w3.debugStopGoTrace().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.debug
                .stopGoTrace({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.stop_go_trace()

            print(debug_response)
  /debug/profiling/blockProfile:
    post:
      summary: '[Profiling] debug_blockProfile'
      tags:
        - debug
      operationId: blockProfile
      description: |
        Turns on block profiling for the given duration and writes profile data to disk. It uses a profile rate of 1 for most accurate information. If a different rate is desired, set the rate and write the profile manually using debug_writeBlockProfile.

        **JSONRPC:** `debug_blockProfile`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugBlockProfileReq'
      responses:
        '200':
          description: Turns on block profiling for the given duration and writes profile data to disk.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugBlockProfileResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/blockProfile' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_blockProfile",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["block.profile", 10]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugBlockProfileResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugBlockProfileExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugBlockProfileExample() throws IOException {
                    String file = "block.profile";
                    int seconds = 4;

                    DebugBlockProfileResponse response = w3.debugBlockProfile(file, seconds).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const file = "block.profile";
              const seconds = 10;

              provider.debug
                .blockProfile(file, seconds, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            import json
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            fileName = "block.profile"
            seconds = 10

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.block_profile(fileName, seconds)

            print(json.loads(debug_response.response.data))
  /debug/profiling/cpuProfile:
    post:
      summary: '[Profiling] debug_cpuProfile'
      tags:
        - debug
      operationId: cpuProfile
      description: |
        Turns on CPU profiling for the given duration and writes profile data to disk.

        **JSONRPC:** `debug_cpuProfile`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugCpuProfileReq'
      responses:
        '200':
          description: Turns on CPU profiling for the given duration and writes profile data to disk.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugCpuProfileResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/cpuProfile' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_cpuProfile",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["block.profile", 10]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugCpuProfileResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugCPUProfileExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugCpuProfileExample() throws IOException {
                    String file = "block.profile";
                    int seconds = 4;

                    DebugCpuProfileResponse response = w3.debugCpuProfile(file, seconds).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const file = "block.profile";
              const seconds = 10;

              provider.debug
                .cpuProfile(file, seconds, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            import json
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            fileName = "block.profile"
            seconds = 10

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.cpu_profile(fileName, seconds)

            print(json.loads(debug_response.response.data))
  /debug/profiling/isPProfRunning:
    post:
      summary: '[Profiling] debug_isPProfRunning'
      tags:
        - debug
      operationId: isPProfRunning
      description: |
        Returns true if the pprof HTTP server is running and false otherwise.

        **JSONRPC:** `debug_isPProfRunning`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/IsPProfRunningReq'
      responses:
        '200':
          description: true if the pprof HTTP server is running and false otherwise.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/IsPProfRunningResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://public-en-baobab.klaytn.net/debug/isPProfRunning' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_isPProfRunning",
              "id": 1,
              "jsonrpc": "2.0"
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugIsPProfRunningResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugIsPProfRunningExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugIsPProfRunningExample() throws IOException {
                    DebugIsPProfRunningResponse response = w3.debugIsPProfRunning().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.debug
                .isPProfRunning({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            import json
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.is_p_prof_running()

            print(json.loads(debug_response.response.data))
  /debug/profiling/mutexProfile:
    post:
      summary: '[Profiling] debug_mutexProfile'
      tags:
        - debug
      operationId: mutexProfile
      description: |
        Turns on mutex profiling for nsec (nanosecond) and writes profile data to file. It uses a profile rate of 1 for most accurate information. If a different rate is desired, set the rate and write the profile manually.

        **JSONRPC:** `debug_mutexProfile`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugMutexProfileReq'
      responses:
        '200':
          description: Turns on mutex profiling for nsec (nanosecond) and writes profile data to file.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugMutexProfileResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/mutexProfile' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_mutexProfile",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["mutex.profile", 10]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugMutexProfileResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugMutexProfileExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugMutexProfileExample() throws IOException {
                    String file = "mutex.profile";
                    int seconds = 5;

                    DebugMutexProfileResponse response = w3.debugMutexProfile(file, seconds).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const file = "mutex.profile";
              const seconds = 10;

              provider.debug
                .mutexProfile(file, seconds, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            import json
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            fileName = "mutex.profile"
            seconds = 10

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.mutex_profile(fileName, seconds)

            print(json.loads(debug_response.response.data))
  /debug/profiling/setBlockProfileRate:
    post:
      summary: '[Profiling] debug_setBlockProfileRate'
      tags:
        - debug
      operationId: setBlockProfileRate
      description: |
        Sets the rate (in samples/sec) of goroutine block profile data collection. A non-zero rate enables block profiling, setting it to zero stops the profile. Collected profile data can be written using debug_writeBlockProfile.

        **JSONRPC:** `debug_setBlockProfileRate`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugSetBlockProfileRateReq'
      responses:
        '200':
          description: Sets the rate (in samples/sec) of goroutine block profile data collection.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugSetBlockProfileRateResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/setBlockProfileRate' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_setBlockProfileRate",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [3]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugSetBlockProfileRateResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugSetBlockProfileRateExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugSetBlockProfileRateExample() throws IOException {
                    int rate = 3;

                    DebugSetBlockProfileRateResponse response = w3.debugSetBlockProfileRate(rate).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const rate = 3;

              provider.debug
                .setBlockProfileRate(rate, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            import json
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            rate = 4

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.set_block_profile_rate(rate)

            print(json.loads(debug_response.response.data))
  /debug/profiling/setMutexProfileFraction:
    post:
      operationId: setMutexProfileFraction
      summary: '[Profiling] debug_setMutexProfileFraction'
      description: |
        SetMutexProfileFraction sets the rate of mutex profiling.

        **JSONRPC:** `debug_setMutexProfileFraction`
      tags:
        - debug
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/setMutexProfileFractionReq'
      responses:
        '200':
          description: Set mutex profile fraction
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - type: object
                    properties:
                      result:
                        title: SetMutexProfileFractionResult
                        type: string
                        example: null
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/setMutexProfileFraction' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_setMutexProfileFraction",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [2]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugSetMutexProfileFractionResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugSetMutexProfileFractionExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugSetMutexProfileFractionExample() throws IOException {
                    int rate = 2;

                    DebugSetMutexProfileFractionResponse response = w3.debugSetMutexProfileFraction(rate).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const rate = 2;

              provider.debug
                .setMutexProfileFraction(rate, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            rate = 2

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.set_mutex_profile_fraction(rate)

            print(debug_response)
  /debug/profiling/startCPUProfile:
    post:
      summary: '[Profiling] debug_startCPUProfile'
      tags:
        - debug
      operationId: startCPUProfile
      description: |
        Turns on CPU profiling indefinitely, writing to the given file.

        **JSONRPC:** `debug_startCPUProfile`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugStartCPUProfileReq'
      responses:
        '200':
          description: Turns on CPU profiling indefinitely, writing to the given file.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugStartCPUProfileResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/startCPUProfile' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_startCPUProfile",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["cpu.profile"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugStartCPUProfileResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugStartCPUProfileExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugStartCPUProfileExample() throws IOException {
                    String file = "cpu.profile";

                    DebugStartCPUProfileResponse response = w3.debugStartCPUProfile(file).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const file = "cpu.profile";

              provider.debug
                .startCPUProfile(file, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            import json
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            fileName = "cpu.profile"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.start_cpu_profile(fileName)

            print(json.loads(debug_response.response.data))
  /debug/profiling/startPProf:
    post:
      operationId: startPProf
      summary: '[Profiling] debug_startPProf'
      description: |
        Starts the pprof HTTP server. The running pprof server can be accessed by (when the default configuration, i.e., localhost:6060, is used):
         * http://localhost:6060/debug/pprof (for the pprof results)
         * http://localhost:6060/memsize/ (for the memory size reports)
         * http://localhost:6060/debug/vars (for the metrics)


        **JSONRPC:** `debug_startPProf`
      tags:
        - debug
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/StartPProfReq'
      responses:
        '200':
          description: Return value null
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/StartPProfResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/startPProf' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_startPProf",
              "id": 1,
              "jsonrpc": "2.0",
              "params": [
                "localhost",
                6060
              ]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugStartPProfResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugStartPProfExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugStartPProfExample() throws IOException {
                    String address = "localhost";
                    int port = 6000;
                    DebugStartPProfResponse response = w3.debugStartPProf(address, port).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const address = "localhost";
              const port = 6060;

              provider.debug
                .startPProf({ address, port }, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            import json
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            address = "localhost"
            port = 6060

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.start_p_prof(address, port)

            print(json.loads(debug_response.response.data))
  /debug/profiling/stopCPUProfile:
    post:
      summary: '[Profiling] debug_stopCPUProfile'
      tags:
        - debug
      operationId: stopCPUProfile
      description: |
        Turns off CPU profiling.

        **JSONRPC:** `debug_stopCPUProfile`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugStopCPUProfileReq'
      responses:
        '200':
          description: Turns off CPU profiling.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugStopCPUProfileResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/stopCPUProfile' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_stopCPUProfile",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugStopCPUProfileResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugStopCPUProfileExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugStopCPUProfileExample() throws IOException {
                    DebugStopCPUProfileResponse response = w3.debugStopCPUProfile().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.debug
                .stopCPUProfile({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            import json
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.stop_cpu_profile()

            print(json.loads(debug_response.response.data))
  /debug/profiling/stopPProf:
    post:
      operationId: stopPProf
      summary: '[Profiling] debug_stopPProf'
      description: |
        Stops the pprof HTTP server.

        **JSONRPC:** `debug_stopPProf`
      tags:
        - debug
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/StopPProfReq'
      responses:
        '200':
          description: Return value null
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/StopPProfResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/stopPProf' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_stopPProf",
              "id": 1,
              "jsonrpc": "2.0",
              "params": []
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugStopPProfResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugStopPProfExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugStopPProfExample() throws IOException {
                    DebugStopPProfResponse response = w3.debugStopPProf().send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              provider.debug
                .stopPProf({}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            import json
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.stop_p_prof()

            print(json.loads(debug_response.response.data))
  /debug/profiling/writeBlockProfile:
    post:
      summary: '[Profiling] debug_writeBlockProfile'
      tags:
        - debug
      operationId: writeBlockProfile
      description: |
        Writes a goroutine blocking profile to the given file.

        **JSONRPC:** `debug_writeBlockProfile`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugWriteBlockProfileReq'
      responses:
        '200':
          description: Writes a goroutine blocking profile to the given file.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugWriteBlockProfileResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/writeBlockProfile' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_writeBlockProfile",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["block.profile"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugWriteBlockProfileResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugWriteBlockProfileExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugWriteBlockProfileExample() throws IOException {
                    String file = "block.profile";

                    DebugWriteBlockProfileResponse response = w3.debugWriteBlockProfile(file).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const file = "block.profile";

              provider.debug
                .writeBlockProfile(file, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            import json
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            fileName = "block.profile"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.write_block_profile(fileName)

            print(json.loads(debug_response.response.data))
  /debug/profiling/writeMemProfile:
    post:
      summary: '[Profiling] debug_writeMemProfile'
      tags:
        - debug
      operationId: writeMemProfile
      description: |
        Writes an allocation profile to the given file. Note that the profiling rate cannot be set through the API, it must be set on the command line using the --memprofilerate flag.

        **JSONRPC:** `debug_writeMemProfile`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugWriteMemProfileReq'
      responses:
        '200':
          description: Writes an allocation profile to the given file.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugWriteMemProfileResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/writeMemProfile' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_writeMemProfile",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["mem.profile"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugWriteMemProfileResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugWriteMemProfileExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugWriteMemProfileExample() throws IOException {
                    String file = "mem.profile";

                    DebugWriteMemProfileResponse response = w3.debugWriteMemProfile(file).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const file = "mem.profile";

              provider.debug
                .writeMemProfile(file, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            import json
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            fileName = "mem.profile"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.write_mem_profile(fileName)

            print(json.loads(debug_response.response.data))
  /debug/profiling/writeMutexProfile:
    post:
      summary: '[Profiling] debug_writeMutexProfile'
      tags:
        - debug
      operationId: writeMutexProfile
      description: |
        Writes a goroutine blocking profile to the given file.

        **JSONRPC:** `debug_writeMutexProfile`
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/JsonRpcRequest'
                - $ref: '#/components/schemas/DebugWriteMutexProfileReq'
      responses:
        '200':
          description: Writes a goroutine blocking profile to the given file.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/JsonRpcResponse'
                  - $ref: '#/components/schemas/DebugWriteMutexProfileResp'
      x-codeSamples:
        - lang: curl
          label: Curl
          source: |
            curl -X 'POST' \
              'https://api.baobab.klaytn.net:8651/debug/writeMutexProfile' \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' \
              -d '{
              "method": "debug_writeMutexProfile",
              "id": 1,
              "jsonrpc": "2.0",
              "params": ["mutex.profile"]
            }'
        - lang: java
          label: Java
          source: |

            import org.web3j.protocol.klaytn.core.method.response.DebugWriteMutexProfileResponse;
            import org.web3j.protocol.http.HttpService;
            import org.web3j.protocol.klaytn.Web3j;

            import java.io.IOException;

            public class DebugWriteMutexProfileExample {
                private Web3j w3 = Web3j.build(new HttpService("https://public-en-baobab.klaytn.net"));
                void debugWriteMutexProfileExample() throws IOException {
                    String file = "mutex.profile";

                    DebugWriteMutexProfileResponse response = w3.debugWriteMutexProfile(file).send();
                    response.getResult();
                }
            }
        - lang: javascript
          label: Javascript
          source: |
            const { JsonRpcProvider } = require("@klaytn/ethers-ext");
            (() => {
              const provider = new JsonRpcProvider("https://public-en-baobab.klaytn.net");
              const file = "mutex.profile";

              provider.debug
                .writeMutexProfile(file, {}, (err, data, response) => {})
                .then((data) => {
                  console.log(data);
                });
            })();
        - lang: python
          label: Python
          source: |
            import json
            from web3 import Web3
            from web3py_ext import extend

            host = "https://api.baobab.klaytn.net:8651"

            fileName = "mutex.profile"

            w3 = Web3(Web3.HTTPProvider(host))
            debug_response = w3.debug.write_mutex_profile(fileName)

            print(json.loads(debug_response.response.data))
components:
  schemas:
    JsonRpcRequest:
      type: object
      required:
        - method
        - id
        - jsonrpc
      properties:
        method:
          type: string
          description: Method name
        id:
          type: integer
          default: 1
          format: int64
          description: Request ID, Random or Auto incrementation
        jsonrpc:
          type: string
          default: '2.0'
          description: JSON-RPC Version (2.0)
        params:
          type: array
          items: {}
    ChaindbCompactReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: debug_chaindbCompact
    ErrorMember:
      type: object
      title: ErrorMember
      required:
        - code
      properties:
        code:
          type: integer
          format: int64
          example: -32700
          description: |
            A Number that indicates the error type that occurred.
            This MUST be an integer.

            | code | message | description |
            |-----|-----|-------|
            | -32700   | Parse error   | invalid JSON was received by the server. An error occurred on the server while parsing the JSON text. |
            |-32602 | Invalid params | Invalid method parameter(s). |
        message:
          type: string
          example: Parse error
          description: |
            A String providing a short description of the error.
            The message SHOULD be limited to a concise single sentence.
        data:
          type: string
          description: |
            A Primitive or Structured value that contains additional information about the error.
            This may be omitted.
            The value of this member is defined by the Server (e.g. detailed error information, nested errors etc.).
    JsonRpcResponse:
      type: object
      required:
        - jsonrpc
        - id
      properties:
        jsonrpc:
          type: string
          default: '2.0'
        id:
          type: integer
          format: int64
        error:
          $ref: '#/components/schemas/ErrorMember'
        result: {}
    chaindbPropertyReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: debug_chaindbProperty
        params:
          type: array
          items:
            type: string
          example:
            - string
    IntegerBlockNumber:
      title: IntegerBlockNumber
      description: the block number with type integer
      type: number
    HexadecimalBlockNumber:
      title: HexadecimalBlockNumber
      type: string
      format: hexadecimal
      description: the block number with type hexadecimal
    BlockTag:
      title: BlockTag
      type: string
      description: the block tag [latest, pending, earliest]
    BlockHash:
      title: BlockHash
      type: string
      format: 32-byte DATA
      description: the block hash
    BlockNumberOrHashOrTag:
      oneOf:
        - $ref: '#/components/schemas/IntegerBlockNumber'
        - $ref: '#/components/schemas/HexadecimalBlockNumber'
        - $ref: '#/components/schemas/BlockTag'
        - $ref: '#/components/schemas/BlockHash'
    DebugDumpBlockReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: debug_dumpBlock
        params:
          type: array
          items:
            properties:
              BlockNumberOrHashOrTag:
                $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - latest
    DebugDumpBlockResp:
      type: object
      properties:
        result:
          type: object
          required:
            - accounts
            - root
          description: The block information.
          properties:
            accounts:
              type: object
            root:
              type: string
          example:
            accounts:
              '0000000000000000000000000000000000000035':
                balance: '12800000000000000000'
                nonce: 0
                root: 56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421
                codeHash: 62b00472fac99d94ccc52f5addac43d54c129cd2c6d2357c9557abea67efdec5
                code: 6080604052600436106100615763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631a39d8ef81146100805780636353586b146100a757806370a08231146100ca578063fd6b7ef8146100f8575b3360009081526001602052604081208054349081019091558154019055005b34801561008c57600080fd5b5061009561010d565b60408051918252519081900360200190f35b6100c873ffffffffffffffffffffffffffffffffffffffff60043516610113565b005b3480156100d657600080fd5b5061009573ffffffffffffffffffffffffffffffffffffffff60043516610147565b34801561010457600080fd5b506100c8610159565b60005481565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604081208054349081019091558154019055565b60016020526000908152604090205481565b336000908152600160205260408120805490829055908111156101af57604051339082156108fc029083906000818181858888f193505050501561019c576101af565b3360009081526001602052604090208190555b505600a165627a7a723058201307c3756f4e627009187dcdbc0b3e286c13b98ba9279a25bfcc18dd8bcd73e40029
                storage: {}
              '0000000000000000000000000000000000000036':
                balance: '12800000000000000000'
                nonce: 1
                root: 56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421
                codeHash: 3f34b5d7038ae652086ba4847ede2668b26a50107c5258d1412f764b942e2661
                code: 6080604052600436106100615763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631a39d8ef81146100805780636353586b146100a757806370a08231146100ca578063fd6b7ef8146100f8575b3360009081526001602052604081208054349081019091558154019055005b34801561008c57600080fd5b5061009561010d565b60408051918252519081900360200190f35b6100c873ffffffffffffffffffffffffffffffffffffffff60043516610113565b005b3480156100d657600080fd5b5061009573ffffffffffffffffffffffffffffffffffffffff60043516610147565b34801561010457600080fd5b506100c8610159565b60005481565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604081208054349081019091558154019055565b60016020526000908152604090205481565b336000908152600160205260408120805490829055908111156101af57604051339082156108fc029083906000818181858888f193505050501561019c576101af565b3360009081526001602052604090208190555b505600a165627a7a723058201307c3756f4e627009187dcdbc0b3e286c13b98ba9279a25bfcc18dd8bcd73e40029
                storage: {}
            root: 70383c826d1161ec2f12d799023317d8da7775dd47b8502d2d7ef646d094d3a5
    DumpStateTrieResp:
      type: object
      properties:
        result:
          type: object
          required:
            - root
            - tries
          description: The dump state Trie result
          properties:
            root:
              type: string
            tries:
              type: array
              items:
                type: object
                properties:
                  type:
                    type: string
                  hash:
                    type: string
                  parent:
                    type: string
                  path:
                    type: string
          example:
            root: '0xd62748ae1ba12975f61470f06912c05d92b4366611338e57ee165802d392e628'
            tries:
              - type: state
                hash: '0xd62748ae1ba12975f61470f06912c05d92b4366611338e57ee165802d392e628'
                parent: '0x0000000000000000000000000000000000000000000000000000000000000000'
                path: 0x
    GetBlockRlpReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: debug_getBlockRlp
        params:
          type: array
          items:
            properties:
              BlockNumberOrHashOrTag:
                $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - latest
    GetModifiedAccountsByHashReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: debug_getModifiedAccountsByHash
        params:
          type: array
          items:
            properties:
              StartBlockHash:
                type: string
                format: 32-byte DATA
                title: StartBlockHash
                description: The first block number of the range to check.
              EndBlockHash:
                type: string
                format: 32-byte DATA
                title: EndBlockHash
                description: (optional) The last block number of the range.
          example:
            - '0xcc1ac1e244f9f83b812b5d77ada1c399f02ea7b61e72ff31789d9ef6dad45442'
            - '0x437e92b2d30a0a828dfdd23b837a8ddf8c8b79c222e191d16c47afbf5a6aaed7'
    Address:
      title: Address
      type: string
      format: 20-byte DATA
      description: Address
    GetModifiedAccountsByNumberReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: debug_getModifiedAccountsByNumber
        params:
          type: array
          items:
            properties:
              StartBlockNum:
                type: integer
                title: StartBlockNum
                description: The first block number of the range to check
              EndBlockNum:
                type: integer
                title: EndBlockNum
                description: (optional) The last block number of the range
          example:
            - 128
    GetModifiedStorageNodesByNumberReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: debug_getModifiedStorageNodesByNumber
        params:
          type: array
          items:
            properties:
              Address:
                type: string
                title: Address
                description: The contract address.
              StartBlockNum:
                type: integer
                title: StartBlockNum
                description: The first block number of the range to check.
              EndBlockNum:
                type: integer
                title: EndBlockNum
                description: The last block number of the range.
          example:
            - '0x77982323172e5b6182539d3522d5a33a944206d4'
            - 100
            - 200
    PrintBlockReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: debug_printBlock
        params:
          type: array
          items:
            properties:
              BlockNumberOrHashOrTag:
                $ref: '#/components/schemas/BlockNumberOrHashOrTag'
          example:
            - '0x80'
    SeedHashReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: debug_seedHash
        params:
          type: array
          items:
            type: integer
            format: uint64
          description: The block number.
          example:
            - 100
    DebugStorageRangeAtReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: debug_storageRangeAt
        params:
          type: array
          items:
            properties:
              BlockHash:
                $ref: '#/components/schemas/BlockHash'
              TxIndex:
                title: TxIndex
                type: integer
              Address:
                $ref: '#/components/schemas/Address'
              KeyStart:
                title: KeyStart
                type: string
                format: hex
              MaxResult:
                title: MaxResult
                type: integer
          example:
            - '0xfb413e37f9df27a6603663ee347bfc66223ef13a615f849ac35fce38729e07c1'
            - 0
            - '0x0000000000000000000000000000000000000400'
            - '0x12'
            - 3
    TracingOptions:
      title: TracingOptions
      type: object
      properties:
        disableStorage:
          type: boolean
          description: Setting this to true will disable storage capture (default = false).
          default: false
        disableMemory:
          type: boolean
          description: Setting this to true will disable memory capture (default = false).
          default: false
        disableStack:
          type: boolean
          description: Setting this to true will disable stack capture (default = false).
          default: false
        timeout:
          type: string
          description: Overrides the default timeout of 5 seconds for JavaScript-based tracing calls. A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms", "-1.5h" or "2h45m". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
        trace:
          type: string
          enum:
            - 4byteTracer
            - callTracer
            - fastCallTracer
            - evmdisTracer
            - noopTracer
            - opcountTracer
            - prestateTracer
            - revertTracer
            - unigramTracer
            - bigramTracer
            - trigramTracer
          description: |
            Setting this will enable JavaScript-based transaction tracing, described in the next section. If set, the previous four arguments will be ignored. The predefined tracers can also be used as the following table.
            | Tracer Name | Description |
            |-----|-----|
            | 4byteTracer | 4byteTracer searches for 4byte-identifiers, and collects them for post-processing. It collects the methods identifiers along with the size of the supplied data, so a reversed signature can be matched against the size of the data. |
            | callTracer | callTracer is a full-blown transaction tracer that extracts and reports all the internal calls made by a transaction, along with any useful information. |
            | fastCallTracer | fastCallTracer is a Go-native version of callTracer. Since it is not executed on JavaScript VM, it shows more than 10x speedup compared to callTracer. Please use fastCallTracer instead of callTracer if the performance is the matter of the first importance. |
            | evmdisTracer | evmdisTracer returns sufficient information from a trace to perform evmdis-style disassembly. |
            | noopTracer | noopTracer is just the barebone boilerplate code required from a JavaScript object to be usable as a transaction tracer. |
            | opcountTracer | opcountTracer is a sample tracer that just counts the number of instructions executed by the KLVM before the transaction terminated. |
            | prestateTracer | prestateTracer outputs sufficient information to create a local execution of the transaction from a custom assembled genesis block. |
            | revertTracer | revertTracer outputs the error string of REVERT. If the execution is not reverted, it outputs an empty string. |
            | unigramTracer | unigramTracer returns the number of occurrences of each opcode. |
            | bigramTracer | bigramTracer returns the number of occurrences of two consecutive opcodes. |
            | trigramTracer | trigramTracer returns the number of occurrences of three consecutive opcodes. |
    DebugTraceBadBlockReq:
      type: object
      properties:
        method:
          type: string
          default: debug_traceBadBlock
        params:
          type: array
          items:
            properties:
              Hash:
                title: Hash
                type: string
                format: 32-byte DATA
                description: Hash of a block.
              TracingOptions:
                $ref: '#/components/schemas/TracingOptions'
          example:
            - '0x1d5ba00e313a81ae6d409d459c153327072665d9ea2f47608369722baf0cfbb6'
    DebugTraceBadBlockResp:
      type: object
      properties:
        result:
          type: array
          description: The structured logs created during the execution of KLVM.
          items:
            type: object
            properties:
              failed:
                type: boolean
              gas:
                type: integer
              returnValue:
                type: string
              structLogs:
                type: array
                items:
                  type: object
                  properties:
                    gas:
                      type: integer
                    failed:
                      type: boolean
                    returnValue:
                      type: string
                    structLogs:
                      type: array
                      items:
                        type: object
          example:
            - result:
                failed: false
                gas: 67100
                returnValue: ''
                structLogs: []
            - result:
                failed: false
                gas: 195179
                returnValue: ''
                structLogs:
                  - gas: 67100
                    failed: false
                    returnValue: ''
                    structLogs: []
                  - ...: null
    DebugTraceBlockReq:
      type: object
      properties:
        method:
          type: string
          default: debug_traceBlock
        params:
          type: array
          items:
            properties:
              BlockRLP:
                title: BlockRlp
                type: string
                description: The RLP-encoded block.
              TracingOptions:
                $ref: '#/components/schemas/TracingOptions'
          example:
            - '0xf9059ef9033ea0b3fdad1b5407c0e9b05615a7f4187046387cdc2fb25bbb15152e9113a93b79e794a86fd667c6a340c53cc5d796ba84dbe1f29cb2f7a0d6e1c132b8f7167b134db1f564898c1e969fa491a7d9569fbea6bbd7e549c28ea082fec4a7ffeabaacda60293276c3048911a496d3613fabaccd336bf517209b4ba0ce610626f0d277da8690e3733cfac2bbbf4e60d6a21066318c33b8ab38860d4cbfb583051e7c84644836443ab90187d683010a02846b6c617986676f312e3138856c696e7578000000000000000000f90164f85494571e53df607be97431a5bbefca1dffe5aef56f4d945cb1a7dccbd0dc446e3640898ede8820368554c89499fb17d324fa0e07f23b49d09028ac0919414db694b74ff9dea397fe9e231df545eb53fe2adf776cb2b841e567386ed4da423bd5979b0807d330cc61f290e0e1fb16718be8990a7d94baa94fff36abe1b957bd9bfb6f05a72e0501c2f6841db208594079c01d222306ca0d00f8c9b841472c3b009c531094beac9050329840e695daad3d4cad64536b53237ddfc153f55d284fcaa8b558309ef2190aa453c5f8577240d62a8eb52d98d7887407c5a9d901b841e4f780bcd37a5454a9a7c73ef463d44fa8ac10f20a0ae6f71dd4da77124d98f1388c6b0de1ab60ca89890b583af3f3e95802543ee859c19876b6842120f0a9a600b84140e74ee691d07e3194609fed2931c8801185a4f512a251649f106ed53dcc3f2e1a51b43eca7d91faf93922db35b06f579286bbc5dc0296319324eb1c59907af70080808505d21dba00f9025a31f8e380850ba43b74008405f5e10094fdeedbb2fe5b48d5b49e435ba00e0358740d0cf58094f00e108b66c543d7478461fe75733553b14993c284552984b3f847f8458207f6a03b12c0fd9df13cc079eb1765fbfb2752503421a253ac2f280ae8bf1eb2cb45b1a04860aa0b7c3a3ec80071477a1141d6df614cbdb886c5fe7e9bbcb532a00539f59449f16029074d13890ac9fe589cc913ffd58d39a8f847f8458207f6a03784c05e3ec8a7737df6c09b0a6674ea825e943b3dc6acc2120ada04e5d21904a028c0cd7df839740d610470f7d0d57b25832b9fed8a478f0e5552366a4671c2027802f8b68203e98302440f8459682f00850bfda3a300830493e09408e2425ce1fa5f8eb006d3898c48c5d3de44b79580b844202ee0ed00000000000000000000000000000000000000000000000000000000000244040000000000000000000000000000000000000000000000000000000005f5a0dac001a07f37d46064be9d403d7c589fb6c02b2433acaf4e2d0daf2391fc56383ff6cffca043ac3acd3e3acd4c989c8a449392ec4b488b850b1e40e8558f14b81dc64cbaff7802f8b68203e9830243048459682f00850bfda3a300830493e0944d92f10a23e28ab11d2d39325b9db0fd0504520d80b844202ee0ed00000000000000000000000000000000000000000000000000000000000242fc00000000000000000000000000000000000000000000000000000007cc6e734fc080a0f8e9f3404be26aa9a7c351cdd28eb1b605987c81f65d5be73c0cc79cfafedd20a05cad9db4cc8b7f8d1836383c8744a595a95506407fbbe77a74827b4b46176fe4'
    DebugTraceBlockResp:
      type: object
      properties:
        result:
          type: array
          description: The structured logs created during the execution of KLVM.
          items:
            type: object
            properties:
              failed:
                type: boolean
              gas:
                type: integer
              returnValue:
                type: string
              structLogs:
                type: array
                items:
                  type: object
          example:
            - result:
                failed: false
                gas: 247922
                returnValue: 60806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b514610051578063cfae321714610068575b600080fd5b34801561005d57600080fd5b506100666100f8565b005b34801561007457600080fd5b5061007d610168565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100bd5780820151818401526020810190506100a2565b50505050905090810190601f1680156100ea5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610166573373ffffffffffffffffffffffffffffffffffffffff16ff5b565b606060018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102005780601f106101d557610100808354040283529160200191610200565b820191906000526020600020905b8154815290600101906020018083116101e357829003601f168201915b50505050509050905600a165627a7a72305820f4e74ca2266a24aabd6a8ee6c4e54ad49014e2faa152e49e7f9d927c932c72870029
                structLogs:
                  - pc: 2
                    op: PUSH1
                    gas: 891341
                    gasCost: 3
                    depth: 1
                    stack:
                      - '0000000000000000000000000000000000000000000000000000000000000080'
                    memory: []
                    storage: {}
                  - ...: null
    DebugTraceBlockByHashReq:
      type: object
      properties:
        method:
          type: string
          default: debug_traceBlockByHash
        params:
          type: array
          items:
            properties:
              BlockHash:
                $ref: '#/components/schemas/BlockHash'
              TracingOptions:
                $ref: '#/components/schemas/TracingOptions'
          example:
            - '0xed110b330152df2022d40fa3c38987643034aa56fc96079fb6c67b66a6ed4f19'
    DebugTraceBlockByHashResp:
      type: object
      properties:
        result:
          type: array
          description: The structured logs created during the execution of KLVM.
          items:
            type: object
            properties:
              failed:
                type: boolean
              gas:
                type: integer
              returnValue:
                type: string
              structLogs:
                type: array
                items:
                  type: object
          example:
            - result:
                failed: false
                gas: 247922
                returnValue: 60806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b514610051578063cfae321714610068575b600080fd5b34801561005d57600080fd5b506100666100f8565b005b34801561007457600080fd5b5061007d610168565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100bd5780820151818401526020810190506100a2565b50505050905090810190601f1680156100ea5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610166573373ffffffffffffffffffffffffffffffffffffffff16ff5b565b606060018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102005780601f106101d557610100808354040283529160200191610200565b820191906000526020600020905b8154815290600101906020018083116101e357829003601f168201915b50505050509050905600a165627a7a72305820f4e74ca2266a24aabd6a8ee6c4e54ad49014e2faa152e49e7f9d927c932c72870029
                structLogs:
                  - pc: 0
                    op: PUSH1
                    gas: 891344
                    gasCost: 3
                    depth: 1
                    stack: []
                    memory: []
                    storage: {}
                  - ...: null
                  - ...: null
                  - ...: null
    BlockNumberInTraceBlockByNumber:
      title: Number
      oneOf:
        - type: number
          title: number
        - format: hex
          type: string
          title: string
    DebugTraceBlockByNumberReq:
      type: object
      properties:
        method:
          type: string
          default: debug_traceBlockByNumber
        params:
          type: array
          items:
            properties:
              BlockNumberInTraceBlockByNumber:
                $ref: '#/components/schemas/BlockNumberInTraceBlockByNumber'
              TracingOptions:
                $ref: '#/components/schemas/TracingOptions'
          example:
            - 1449
    DebugTraceBlockByNumberResp:
      type: object
      properties:
        result:
          type: array
          description: The structured logs created during the execution of KLVM.
          items:
            type: object
            properties:
              failed:
                type: boolean
              gas:
                type: integer
              returnValue:
                type: string
              structLogs:
                type: array
                items:
                  type: object
          example:
            - result:
                gas: 247922
                failed: false
                returnValue: 60806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b514610051578063cfae321714610068575b600080fd5b34801561005d57600080fd5b506100666100f8565b005b34801561007457600080fd5b5061007d610168565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100bd5780820151818401526020810190506100a2565b50505050905090810190601f1680156100ea5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610166573373ffffffffffffffffffffffffffffffffffffffff16ff5b565b606060018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102005780601f106101d557610100808354040283529160200191610200565b820191906000526020600020905b8154815290600101906020018083116101e357829003601f168201915b50505050509050905600a165627a7a72305820f4e74ca2266a24aabd6a8ee6c4e54ad49014e2faa152e49e7f9d927c932c72870029
                structLogs:
                  - pc: 0
                    op: PUSH1
                    gas: 891344
                    gasCost: 3
                    depth: 1
                    stack: []
                    memory: []
                    storage: {}
                  - pc: 2
                    op: PUSH1
                    gas: 891341
                    gasCost: 3
                    depth: 1
                    stack:
                      - '0000000000000000000000000000000000000000000000000000000000000080'
                    memory: []
                    storage: {}
                  - pc: 4
                    op: MSTORE
                    gas: 891338
                    gasCost: 12
                    depth: 1
                    stack:
                      - '0000000000000000000000000000000000000000000000000000000000000080'
                      - '0000000000000000000000000000000000000000000000000000000000000040'
                    memory:
                      - '0000000000000000000000000000000000000000000000000000000000000000'
                      - '0000000000000000000000000000000000000000000000000000000000000000'
                      - '0000000000000000000000000000000000000000000000000000000000000000'
                    storage: {}
                  - pc: 5
                    op: CALLVALUE
                    gas: 891326
                    gasCost: 2
                    depth: 1
                    stack: []
                    memory:
                      - '0000000000000000000000000000000000000000000000000000000000000000'
                      - '0000000000000000000000000000000000000000000000000000000000000000'
                      - '0000000000000000000000000000000000000000000000000000000000000080'
                    storage: {}
                  - ...
                  - pc: 322
                    op: RETURN
                    gas: 865278
                    gasCost: 0
                    depth: 1
                    stack:
                      - '0000000000000000000000000000000000000000000000000000000000000236'
                      - '0000000000000000000000000000000000000000000000000000000000000000'
                    memory:
                      - 60806040526004361061004c576000357c010000000000000000000000000000
                      - 0000000000000000000000000000900463ffffffff16806341c0e1b514610051
                      - 578063cfae321714610068575b600080fd5b34801561005d57600080fd5b5061
                      - 00666100f8565b005b34801561007457600080fd5b5061007d610168565b6040
                      - '5180806020018281038252838181518152602001915080519060200190808383'
                      - 60005b838110156100bd5780820151818401526020810190506100a2565b5050
                      - 5050905090810190601f1680156100ea5780820380516001836020036101000a
                      - 031916815260200191505b509250505060405180910390f35b60008090549061
                      - 01000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffff
                      - ffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffff
                      - ffffffffffffff161415610166573373ffffffffffffffffffffffffffffffff
                      - ffffffff16ff5b565b6060600180546001816001161561010002031660029004
                      - 80601f0160208091040260200160405190810160405280929190818152602001
                      - 828054600181600116156101000203166002900480156102005780601f106101
                      - d557610100808354040283529160200191610200565b82019190600052602060
                      - 0020905b8154815290600101906020018083116101e357829003601f16820191
                      - 5b50505050509050905600a165627a7a72305820f4e74ca2266a24aabd6a8ee6
                      - c4e54ad49014e2faa152e49e7f9d927c932c7287002900000000000000000000
                    storage:
                      '0000000000000000000000000000000000000000000000000000000000000000': 000000000000000000000000b0945862f63b832849a5f20b19e9f8188eb2230a
                      '0000000000000000000000000000000000000000000000000000000000000001': '0000000000000000000000000000000000000000000000000000000000000000'
    DebugTraceBlockByNumberRangeReq:
      type: object
      properties:
        method:
          type: string
          default: debug_traceBlockByNumberRange
        params:
          type: array
          example:
            - 21
            - 30
          items:
            anyOf:
              - title: StartBlock
                type: number
                description: Tracing start block number.
                example: 21
              - title: EndBlock
                type: number
                description: Tracing end block number.
                example: 30
              - $ref: '#/components/schemas/TracingOptions'
    DebugTraceBlockByNumberRangeResp:
      type: object
      properties:
        result:
          type: object
          description: Value contains the structured logs created during the execution of KLVM.
          additionalProperties:
            x-additionalPropertiesName: StructuredLogs
            type: object
            properties:
              block:
                type: string
              hash:
                type: string
              traces:
                type: array
                items:
                  type: object
                  properties:
                    result:
                      type: object
                    txHash:
                      type: string
          example:
            '21':
              block: '0x15'
              hash: '0x24b0a90822e63295623e6d8f5a8e5d47cead5c8d5854e44db00dc42d28e0850e'
              traces:
                - result:
                    ...: null
                  txHash: '0x43ed7e441db8e90f377d74b5d61c6d7d8b85ffd277b965c9f275ce7e93fb1090'
                - result:
                    ...: null
                  txHash: '0x1a448049b21d39cd4320ab95f18b8e91d687bfc7136268f50e041e439181fa0d'
            '22':
              ...: null
            ...: null
    DebugTraceBlockFromFileReq:
      type: object
      properties:
        method:
          type: string
          default: debug_traceBlockFromFile
        params:
          type: array
          items:
            properties:
              FileName:
                title: FileName
                type: string
                description: The file name which contains the RLP of the block.
              TracingOptions:
                $ref: '#/components/schemas/TracingOptions'
          example:
            - block.rlp
    DebugTraceBlockFromFileResp:
      type: object
      properties:
        result:
          type: array
          description: The structured logs created during the execution of KLVM.
          items:
            type: object
            required:
              - failed
              - gas
              - returnValue
              - structLogs
            properties:
              failed:
                type: boolean
              gas:
                type: integer
              returnValue:
                type: string
              structLogs:
                type: array
                items:
                  type: object
                  properties:
                    gas:
                      type: integer
                    failed:
                      type: boolean
                    returnValue:
                      type: string
                    structLogs:
                      type: array
                      items:
                        type: object
          example:
            failed: false
            gas: 247922
            returnValue: 60806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b514610051578063cfae321714610068575b600080fd5b34801561005d57600080fd5b506100666100f8565b005b34801561007457600080fd5b5061007d610168565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100bd5780820151818401526020810190506100a2565b50505050905090810190601f1680156100ea5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610166573373ffffffffffffffffffffffffffffffffffffffff16ff5b565b606060018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102005780601f106101d557610100808354040283529160200191610200565b820191906000526020600020905b8154815290600101906020018083116101e357829003601f168201915b50505050509050905600a165627a7a72305820f4e74ca2266a24aabd6a8ee6c4e54ad49014e2faa152e49e7f9d927c932c72870029
            structLogs:
              - pc: 2
                op: PUSH1
                gas: 891341
                gasCost: 3
                depth: 1
                stack:
                  - '0000000000000000000000000000000000000000000000000000000000000080'
                memory: []
                storage: {}
              - ...: null
    DebugTraceChainReq:
      type: object
      properties:
        method:
          type: string
          default: debug_traceChain
        params:
          type: array
          example:
            - 21
            - 30
            - {}
          items:
            anyOf:
              - title: StartBlockNumber
                type: integer
                description: Tracing start block number.
              - title: EndBlockNumber
                type: integer
                description: Tracing end block number.
              - $ref: '#/components/schemas/TracingOptions'
    DebugTraceChainResp:
      type: object
      properties:
        result:
          type: object
          description: Returns the structured logs created during the execution of EVM between two blocks as a JSON object.
    DebugTraceTransactionReq:
      type: object
      properties:
        method:
          type: string
          default: debug_traceTransaction
        params:
          type: array
          items:
            properties:
              TxHash:
                title: TxHash
                type: string
                description: The hash of the transaction.
                example: '0x07f6057bc93aca52e53cdbfac9b9830f6a9cae2b3f48f0b47e4cb54959143d09'
              TracingOptions:
                $ref: '#/components/schemas/TracingOptions'
          example:
            - '0x07f6057bc93aca52e53cdbfac9b9830f6a9cae2b3f48f0b47e4cb54959143d09'
    StructLogs:
      title: StructLogs
      type: object
      properties:
        computation:
          type: number
        computationCost:
          type: number
        depth:
          type: number
        gas:
          type: number
        gasCost:
          type: number
        memory:
          type: array
          items:
            type: string
        op:
          type: string
        pc:
          type: number
        stack:
          type: array
          items:
            type: string
          description: The status of the response
        storage:
          type: object
          description: The status of the response
    DebugTraceTransactionResp:
      type: object
      properties:
        result:
          type: object
          description: The structured logs created during the execution of KLVM.
          required:
            - failed
            - gas
            - returnValue
            - structLogs
          properties:
            failed:
              type: boolean
            gas:
              type: integer
            returnValue:
              type: string
            structLogs:
              type: array
              items:
                $ref: '#/components/schemas/StructLogs'
          example:
            failed: false
            gas: 28110
            returnValue: ''
            structLogs:
              - computation: 149999880
                computationCost: 120
                depth: 1
                gas: 6710
                gasCost: 3
                memory: []
                op: PUSH1
                pc: 0
                stack: []
                storage: {}
              - computation: 149999760
                computationCost: 120
                depth: 1
                gas: 6707
                gasCost: 3
                memory: []
                op: PUSH1
                pc: 2
                stack:
                  - '0000000000000000000000000000000000000000000000000000000000000080'
                storage: {}
              - ...: null
              - computation: 149965613
                computationCost: 0
                depth: 1
                gas: 0
                gasCost: 0
                memory:
                  - '0000000000000000000000000000000000000000000000000000000000000000'
                  - '0000000000000000000000000000000000000000000000000000000000000000'
                  - '0000000000000000000000000000000000000000000000000000000000000080'
                  - '0000000000000000000000000000000000000000000000000000000000000000'
                  - '0000000000000000000000000000000000000000000000000000000000000002'
                op: STOP
                pc: 176
                stack:
                  - 00000000000000000000000000000000000000000000000000000000d09de08a
                storage:
                  '0': '0000000000000000000000000000000000000000000000000000000000000002'
    TracerCallObject:
      title: TracerCallObject
      type: object
      description: The tracer call object. See the next table for the object's properties.
      properties:
        from:
          type: string
          format: 20-byte DATA
          description: (optional) Address the transaction is simulated to have been sent from. The 0x00..0 address is used if no address is specified.
        to:
          type: string
          format: 20-byte DATA
          description: (optional) Address the transaction is sent to.
        input:
          type: string
          format: DATA
          description: (optional) Hash of the method signature and encoded parameter. It replaces data field, but 'data` field is still supported for backward compatibility.
    TracerObject:
      title: TracerObject
      type: object
      description: Tracer type.
      properties:
        tracer:
          type: string
          enum:
            - 4byteTracer
            - callTracer
            - fastCallTracer
            - evmdisTracer
            - noopTracer
            - opcountTracer
            - prestateTracer
            - revertTracer
            - unigramTracer
            - bigramTracer
            - trigramTracer
          description: |
            Setting this will enable JavaScript-based transaction tracing, described in the next section. If set, the previous four arguments will be ignored. The predefined tracers can also be used as the following table.
            | Tracer Name | Description |
            |-----|-----|
            | 4byteTracer | 4byteTracer searches for 4byte-identifiers, and collects them for post-processing. It collects the methods identifiers along with the size of the supplied data, so a reversed signature can be matched against the size of the data. |
            | callTracer | callTracer is a full-blown transaction tracer that extracts and reports all the internal calls made by a transaction, along with any useful information. |
            | fastCallTracer | fastCallTracer is a Go-native version of callTracer. Since it is not executed on JavaScript VM, it shows more than 10x speedup compared to callTracer. Please use fastCallTracer instead of callTracer if the performance is the matter of the first importance. |
            | evmdisTracer | evmdisTracer returns sufficient information from a trace to perform evmdis-style disassembly. |
            | noopTracer | noopTracer is just the barebone boilerplate code required from a JavaScript object to be usable as a transaction tracer. |
            | opcountTracer | opcountTracer is a sample tracer that just counts the number of instructions executed by the KLVM before the transaction terminated. |
            | prestateTracer | prestateTracer outputs sufficient information to create a local execution of the transaction from a custom assembled genesis block. |
            | revertTracer | revertTracer outputs the error string of REVERT. If the execution is not reverted, it outputs an empty string. |
            | unigramTracer | unigramTracer returns the number of occurrences of each opcode. |
            | bigramTracer | bigramTracer returns the number of occurrences of two consecutive opcodes. |
            | trigramTracer | trigramTracer returns the number of occurrences of three consecutive opcodes. |
    DebugTraceCallReq:
      type: object
      properties:
        method:
          type: string
          default: debug_traceCall
        params:
          type: array
          items:
            properties:
              TracerCallObject:
                $ref: '#/components/schemas/TracerCallObject'
              BlockNumberOrHashOrTag:
                $ref: '#/components/schemas/BlockNumberOrHashOrTag'
              TracerObject:
                $ref: '#/components/schemas/TracerObject'
            example:
              - to: '0x46eda75e7ca73cb1c2f83c3927211655420dbc44'
                data: '0x3fb5c1cb00000000000000000000000000000000000000000000000000000000000003e7'
              - latest
              - tracer: revertTracer
    StandardTracingOptions:
      title: StandardTracingOptions
      type: object
      description: You may give trace API function a secondary optional argument, which specifies the options for this specific call.
      properties:
        disableStorage:
          type: boolean
          default: false
          description: Setting this to true will disable storage capture.
        disableMemory:
          type: boolean
          default: false
          description: Setting this to true will disable memory capture.
        disableStack:
          type: boolean
          default: false
          description: Setting this to true will disable stack capture.
        txHash:
          type: string
          description: Setting this value will trace only the specified transaction.
    DebugStandardTraceBadBlockToFileReq:
      type: object
      properties:
        method:
          type: string
          default: debug_standardTraceBadBlockToFile
        params:
          type: array
          items:
            properties:
              Hash:
                title: Hash
                description: Hash of a block.
                type: string
                format: 32-byte DATA
              StandardTracingOptions:
                $ref: '#/components/schemas/StandardTracingOptions'
          example:
            - '0x1d5ba00e313a81ae6d409d459c153327072665d9ea2f47608369722baf0cfbb6'
    DebugStandardTraceBadBlockToFileResp:
      type: object
      properties:
        result:
          type: array
          description: A list of file names. Each represents a tracing result of a transaction. The format of a file name is block_{first 4 bytes of the block hash}-{transaction index}-{first 4 bytes of the transaction hash}-{random string}.
          items:
            type: string
          example:
            - /var/folders/v9/z3vq7j4d42b2jq_vxsv0km6h0000gn/T/block_0x1d5ba00e-0-0xae6f8ed4-608268252
            - /var/folders/v9/z3vq7j4d42b2jq_vxsv0km6h0000gn/T/block_0x1d5ba00e-1-0x2e37321f-315574667
    DebugStandardTraceBlockToFileReq:
      type: object
      properties:
        method:
          type: string
          default: debug_standardTraceBlockToFile
        params:
          type: array
          items:
            properties:
              Hash:
                title: Hash
                type: string
                description: Hash of a block.
                format: 32-byte DATA
              StandardTracingOptions:
                $ref: '#/components/schemas/StandardTracingOptions'
          example:
            - '0x485fff444481ee28debe50639f312f44e0a09342161a8906a99cf325cc2512a4'
    DebugStandardTraceBlockToFileResp:
      type: object
      properties:
        result:
          type: array
          description: A list of file names. Each represents a tracing result of a transaction. The format of a file name is block_{first 4 bytes of the block hash}-{transaction index}-{first 4 bytes of the transaction hash}-{random string}.
          items:
            type: string
          example:
            - /var/folders/v9/z3vq7j4d42b2jq_vxsv0km6h0000gn/T/block_0x485fff44-0-0xfe8210fc-141224302
    DebugGoTraceReq:
      type: object
      properties:
        method:
          type: string
          default: debug_goTrace
        params:
          type: array
          items:
            properties:
              File:
                title: File
                type: string
                description: The filename for the trace output.
              Seconds:
                title: Seconds
                type: integer
                description: The tracing duration in seconds.
          example:
            - go.trace
            - 5
    DebugGoTraceResp:
      type: object
      properties:
        result:
          type: string
          nullable: true
          default: null
    DebugStartGoTraceReq:
      type: object
      properties:
        method:
          type: string
          default: debug_startGoTrace
        params:
          type: array
          description: The filename for the tracing output.
          items:
            title: File
            type: string
          example:
            - go.trace
    DebugStartGoTraceResp:
      type: object
      properties:
        result:
          type: string
          nullable: true
          default: null
    DebugStopGoTraceReq:
      type: object
      properties:
        method:
          type: string
          default: debug_stopGoTrace
    DebugStopGoTraceResp:
      type: object
      properties:
        result:
          type: string
          example: null
    DebugBlockProfileReq:
      type: object
      properties:
        method:
          type: string
          default: debug_blockProfile
        params:
          type: array
          items:
            properties:
              File:
                title: File
                type: string
                description: The filename for the profiling output.
              Seconds:
                title: Seconds
                type: integer
                description: The profiling duration in seconds.
          example:
            - block.profile
            - 10
    DebugBlockProfileResp:
      type: object
      properties:
        result:
          type: string
          nullable: true
          default: null
    DebugCpuProfileReq:
      type: object
      properties:
        method:
          type: string
          default: debug_cpuProfile
        params:
          type: array
          items:
            properties:
              File:
                title: File
                type: string
                description: The filename for the profiling result.
              Seconds:
                title: Seconds
                type: integer
                description: The profiling duration in seconds.
          example:
            - block.profile
            - 10
    DebugCpuProfileResp:
      type: object
      properties:
        result:
          type: string
          nullable: true
          default: null
    IsPProfRunningReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: debug_isPProfRunning
    IsPProfRunningResp:
      type: object
      properties:
        result:
          type: boolean
          description: true if the pprof HTTP server is running and false otherwise.
          example: true
    DebugMutexProfileReq:
      type: object
      properties:
        method:
          type: string
          default: debug_mutexProfile
        params:
          type: array
          items:
            properties:
              File:
                title: File
                type: string
                description: The filename for the profiling result.
              Seconds:
                title: Seconds
                type: integer
                description: The profiling duration in seconds.
          example:
            - mutex.profile
            - 10
    DebugMutexProfileResp:
      type: object
      properties:
        result:
          type: string
          nullable: true
          default: null
    DebugSetBlockProfileRateReq:
      type: object
      properties:
        method:
          type: string
          default: debug_setBlockProfileRate
        params:
          type: array
          description: The profiling rate in samples/sec.
          items:
            title: Rate
            type: integer
          example:
            - 3
    DebugSetBlockProfileRateResp:
      type: object
      properties:
        result:
          type: string
          example: null
    setMutexProfileFractionReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: debug_setMutexProfileFraction
        params:
          type: array
          items:
            title: rate
            type: integer
          description: rate
          example:
            - 2
    DebugStartCPUProfileReq:
      type: object
      properties:
        method:
          type: string
          default: debug_startCPUProfile
        params:
          type: array
          description: The filename for the profiling output.
          items:
            title: File
            type: string
          example:
            - cpu.profile
    DebugStartCPUProfileResp:
      type: object
      properties:
        result:
          type: string
          nullable: true
          default: null
    StartPProfReq:
      type: object
      required:
        - method
        - params
      properties:
        method:
          type: string
          default: debug_startPProf
        params:
          type: array
          items:
            properties:
              Address:
                title: Address
                description: pprof HTTP server listening interface
                type: string
              Port:
                title: Port
                description: pprof HTTP server listening port
                type: integer
          example:
            - localhost
            - 6000
    StartPProfResp:
      type: object
      properties:
        result:
          type: string
          example: null
    DebugStopCPUProfileReq:
      type: object
      properties:
        method:
          type: string
          default: debug_stopCPUProfile
    DebugStopCPUProfileResp:
      type: object
      properties:
        result:
          type: string
          nullable: true
          default: null
    StopPProfReq:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          default: debug_stopPProf
    StopPProfResp:
      type: object
      properties:
        result:
          type: string
          example: null
    DebugWriteBlockProfileReq:
      type: object
      properties:
        method:
          type: string
          default: debug_writeBlockProfile
        params:
          type: array
          description: The filename for the profiling output.
          items:
            title: File
            type: string
          example:
            - block.profile
    DebugWriteBlockProfileResp:
      type: object
      properties:
        result:
          type: string
          nullable: true
          default: null
    DebugWriteMemProfileReq:
      type: object
      properties:
        method:
          type: string
          default: debug_writeMemProfile
        params:
          type: array
          description: The filename for the profiling output.
          items:
            title: File
            type: string
          example:
            - mem.profile
    DebugWriteMemProfileResp:
      type: object
      properties:
        result:
          type: string
          nullable: true
          default: null
    DebugWriteMutexProfileReq:
      type: object
      properties:
        method:
          type: string
          default: debug_writeMutexProfile
        params:
          type: array
          description: The filename for the profiling output.
          items:
            title: File
            type: string
          example:
            - mutex.profile
    DebugWriteMutexProfileResp:
      type: object
      properties:
        result:
          type: string
          nullable: true
          default: null
